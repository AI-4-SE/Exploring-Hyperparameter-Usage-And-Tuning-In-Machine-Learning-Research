{
    "LIP_JPPNet/LIP_model.py": {
        "tensorflow": {
            "concat_33": {
                "variable": {
                    "value": "pos_par",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pose, parsing, pose_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "par_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[parsing, pose, parsing_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_62": {
                "variable": {
                    "value": "parsing_human",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[parsing_human1, parsing_human2, parsing_human3, parsing_human4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "parsing_human",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "LIP_JPPNet/evaluate_parsing_JPPNet.py": {
        "tensorflow": {
            "Coordinator_25": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, image_rev]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "variable": {
                    "value": "parsing_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([tf.image.resize_images(parsing_out1_100, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out1_075, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out1_125, tf.shape(image_batch_origin)[1:3,])])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "parsing_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([tf.image.resize_images(parsing_out2_100, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out2_075, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out2_125, tf.shape(image_batch_origin)[1:3,])])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "parsing_out3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([tf.image.resize_images(parsing_out3_100, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out3_075, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out3_125, tf.shape(image_batch_origin)[1:3,])])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "variable": {
                    "value": "raw_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([parsing_out1, parsing_out2, parsing_out3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_92": {
                "variable": {
                    "value": "(head_output, tail_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "raw_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.stack([parsing_out1, parsing_out2, parsing_out3]), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_93": {
                "variable": {
                    "value": "tail_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tail_output",
                    "type": "variable",
                    "possible_values": []
                },
                "num": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "tail_output_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tail_list_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * 20",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_104": {
                "variable": {
                    "value": "tail_output_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_output_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(tail_list_rev, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(tail_output_rev, tf.stack([1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "tf.stack([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "raw_output_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([head_output, tail_output_rev])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_108": {
                "variable": {
                    "value": "raw_output_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_output_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.stack([head_output, tail_output_rev]), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw_output_all, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(raw_output_all, dimension=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_109": {
                "variable": {
                    "value": "raw_output_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_output_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.stack([head_output, tail_output_rev]), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw_output_all, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(raw_output_all, dimension=3)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_110": {
                "variable": {
                    "value": "pred_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_output_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.stack([head_output, tail_output_rev]), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(raw_output_all, dim=0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(raw_output_all, dimension=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_113": {
                "variable": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_115": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_117": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_118": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_124": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.global_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "start_queue_runners_132": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_31": {
                "variable": {
                    "value": "image_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "tf.stack([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_81": {
                "values": {
                    "value": "[tf.image.resize_images(parsing_out1_100, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out1_075, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out1_125, tf.shape(image_batch_origin)[1:3,])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_84": {
                "values": {
                    "value": "[tf.image.resize_images(parsing_out2_100, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out2_075, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out2_125, tf.shape(image_batch_origin)[1:3,])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_87": {
                "values": {
                    "value": "[tf.image.resize_images(parsing_out3_100, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out3_075, tf.shape(image_batch_origin)[1:3,]), tf.image.resize_images(parsing_out3_125, tf.shape(image_batch_origin)[1:3,])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_91": {
                "values": {
                    "value": "[parsing_out1, parsing_out2, parsing_out3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_104": {
                "values": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_107": {
                "values": {
                    "value": "[head_output, tail_output_rev]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "local_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_31": {
                "values": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_84": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_87": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_88": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_89": {
                "input": {
                    "value": "image_batch_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([image, image_rev])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LIP_JPPNet/kaffe/tensorflow/network.py": {
        "tensorflow": {
            "placeholder_with_default_45": {
                "variable": {
                    "value": "self.use_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "use_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_192": {
                "features": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_197": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_206": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "local_response_normalization_214": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_223": {
                "concat_dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_227": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_258": {
                "logits": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_275": {
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self.use_dropout + self.use_dropout * keep_prob",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_45": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_126": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_134": {
                "variable": {
                    "value": "input_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_135": {
                "variable": {
                    "value": "kernel_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('weights', shape=[k_h, k_w, int(c_i) / group, c_o])",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', shape=[k_h, k_w, int(c_i) / group, c_o])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_138": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "output_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, kernel_groups)]",
                            "ListComp"
                        ],
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, kernel_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "bias_add_142": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, output_groups)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, output_groups)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(input, activation_fn=activation_fn, is_training=is_training, updates_collections=None, scale=scale, scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('biases', [c_o])",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [c_o])",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_145": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, output_groups)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, output_groups)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(input, activation_fn=activation_fn, is_training=is_training, updates_collections=None, scale=scale, scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atrous_conv2d_168": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_176": {
                "variable": {
                    "value": "input_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "split_177": {
                "variable": {
                    "value": "kernel_groups",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('weights', shape=[k_h, k_w, int(c_i) / group, c_o])",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', shape=[k_h, k_w, int(c_i) / group, c_o])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_180": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "output_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, kernel_groups)]",
                            "ListComp"
                        ],
                        [
                            "[convolve(i, k) for (i, k) in zip(input_groups, kernel_groups)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "bias_add_184": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, output_groups)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, output_groups)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(input, activation_fn=activation_fn, is_training=is_training, updates_collections=None, scale=scale, scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('biases', [c_o])",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [c_o])",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_187": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, output_groups)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "tf.concat(3, output_groups)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output, name=scope.name)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(input, activation_fn=activation_fn, is_training=is_training, updates_collections=None, scale=scale, scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "feed_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_255": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(input, squeeze_dims=[1, 2])",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict",
                            "variable"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "LIP_JPPNet/utils/image_reader.py": {
        "tensorflow": {
            "to_int32_19": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(img)[0]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_20": {
                "variable": {
                    "value": "w_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(img)[1]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([h_new, w_new])",
                    "type": "Call",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_23": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(label, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_38": {
                "variable": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([1.0, distort_left_right_random, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reverse_39": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.concat([img_b, img_g, img_r], 2), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.stack([1.0, distort_left_right_random, 1.0]), 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_40": {
                "variable": {
                    "value": "reversed_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.stack([1.0, distort_left_right_random, 1.0]), 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_56": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_59": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line.strip('\\n')",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_60": {
                "variable": {
                    "value": "combined_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([image, label], 2)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "tf.maximum(crop_h, image_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "target_width": {
                    "value": "tf.maximum(crop_w, image_shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_crop_64": {
                "variable": {
                    "value": "combined_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "combined_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.pad_to_bounding_box(combined, 0, 0, tf.maximum(crop_h, image_shape[0]), tf.maximum(crop_w, image_shape[1]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[crop_h, crop_w, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "label_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined_crop[:, :, last_image_dim:]",
                            "Subscript"
                        ],
                        [
                            "label_crop + ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.cast(label_crop, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_111": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_jpeg_113": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_114": {
                "variable": {
                    "value": "(img_r, img_g, img_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.concat([img_b, img_g, img_r], 2), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([img_b, img_g, img_r], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_144": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.image_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_145": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[self.images]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "input_size is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "batch_157": {
                "variable": {
                    "value": "(image_batch, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.image, self.label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "num_elements",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_19": {
                "x": {
                    "value": "tf.to_float(tf.shape(img)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.5, maxval=1.5, dtype=tf.float32, seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_20": {
                "x": {
                    "value": "tf.to_float(tf.shape(img)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.5, maxval=1.5, dtype=tf.float32, seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_21": {
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_38": {
                "values": {
                    "value": "[1.0, distort_left_right_random, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_60": {
                "x": {
                    "value": "crop_w",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line.strip('\\n')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_63": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_115": {
                "values": {
                    "value": "[img_b, img_g, img_r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_19": {
                "x": {
                    "value": "tf.shape(img)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_20": {
                "x": {
                    "value": "tf.shape(img)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_19": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.concat([img_b, img_g, img_r], 2), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_20": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.concat([img_b, img_g, img_r], 2), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "LIP_JPPNet/utils/lip_reader.py": {
        "tensorflow": {
            "to_int32_21": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(img)[0]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_22": {
                "variable": {
                    "value": "w_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(img)[1]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([h_new, w_new])",
                    "type": "Call",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_26": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(label, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h), tf.to_int32(resized_w)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h / 8.0), tf.to_int32(resized_w / 8.0)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(crop_h / 8.0), tf.to_int32(crop_w / 8.0)])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_27": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_28": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(heatmap, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(heatmap, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap_crop, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.concat(pose, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h), tf.to_int32(resized_w)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h / 8.0), tf.to_int32(resized_w / 8.0)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(crop_h / 8.0), tf.to_int32(crop_w / 8.0)])",
                            "Call"
                        ]
                    ]
                }
            },
            "less_41": {
                "variable": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([1.0, distort_left_right_random, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "boolean_mask_42": {
                "variable": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mask": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.stack([1.0, distort_left_right_random, 1.0]), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask([0, 1, 2], mirror)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_43": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.concat([img_b, img_g, img_r], 2), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.stack([1.0, distort_left_right_random, 1.0]), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask([0, 1, 2], mirror)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_45": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distort_left_right_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], 0, 1.0, dtype=tf.float32)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.logical_not(flag), flag]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "label_and_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label, label_rev]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_49": {
                "variable": {
                    "value": "label_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_and_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([label, label_rev])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.logical_not(flag), flag])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "label_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(label_and_rev, mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_, tf.shape(label))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "heatmap_and_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[heatmap, heatmap_rev]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_53": {
                "variable": {
                    "value": "heatmap_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "heatmap_and_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([heatmap, heatmap_rev])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.logical_not(flag), flag])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "heatmap_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "heatmap_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(heatmap_and_rev, mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(heatmap_, tf.shape(heatmap))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(heatmap)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_61": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(resized_h), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_62": {
                "variable": {
                    "value": "w_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(resized_w), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([h_new, w_new])",
                    "type": "Call",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_66": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(label, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h), tf.to_int32(resized_w)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h / 8.0), tf.to_int32(resized_w / 8.0)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(crop_h / 8.0), tf.to_int32(crop_w / 8.0)])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_68": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(heatmap, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h), tf.to_int32(resized_w)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h / 8.0), tf.to_int32(resized_w / 8.0)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(crop_h / 8.0), tf.to_int32(crop_w / 8.0)])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(heatmap, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(heatmap, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap_crop, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.concat(pose, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_74": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.to_int32(resized_h), tf.to_int32(resized_w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_76": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(label, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h), tf.to_int32(resized_w)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h / 8.0), tf.to_int32(resized_w / 8.0)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(crop_h / 8.0), tf.to_int32(crop_w / 8.0)])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_78": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.to_int32(resized_h / 8.0), tf.to_int32(resized_w / 8.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_79": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(heatmap, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h), tf.to_int32(resized_w)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h / 8.0), tf.to_int32(resized_w / 8.0)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(crop_h / 8.0), tf.to_int32(crop_w / 8.0)])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(heatmap, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(heatmap, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap_crop, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.concat(pose, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_95": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(heatmap, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(heatmap, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap_crop, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.concat(pose, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_98": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, label, heatmap]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_99": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_to_bounding_box_100": {
                "variable": {
                    "value": "combined_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([image, label, heatmap], 2)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "tf.maximum(crop_h, image_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "target_width": {
                    "value": "tf.maximum(crop_w, image_shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_crop_104": {
                "variable": {
                    "value": "combined_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "combined_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.pad_to_bounding_box(combined, 0, 0, tf.maximum(crop_h, image_shape[0]), tf.maximum(crop_w, image_shape[1]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[crop_h, crop_w, 4 + NUM_POSE]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_109": {
                "variable": {
                    "value": "label_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined_crop[:, :, last_image_dim:last_image_dim + last_label_dim]",
                            "Subscript"
                        ],
                        [
                            "label_crop + ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.cast(label_crop, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_115": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.to_int32(crop_h / 8.0), tf.to_int32(crop_w / 8.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_116": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(heatmap_crop, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h), tf.to_int32(resized_w)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(resized_h / 8.0), tf.to_int32(resized_w / 8.0)])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.to_int32(crop_h / 8.0), tf.to_int32(crop_w / 8.0)])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(heatmap, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(heatmap, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap_crop, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.concat(pose, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_170": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "read_file_171": {
                "variable": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "read_file_172": {
                "variable": {
                    "value": "label_contents_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_jpeg_174": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_175": {
                "variable": {
                    "value": "(img_r, img_g, img_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.concat([img_b, img_g, img_r], 2), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_176": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.concat([img_b, img_g, img_r], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_180": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_png_181": {
                "variable": {
                    "value": "label_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[2])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_189": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line.strip('\\n')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_209": {
                "variable": {
                    "value": "heatmap_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pose_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * 16",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_210": {
                "variable": {
                    "value": "heatmap_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "heatmap_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(pose_rev, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reverse(heatmap_rev, tf.stack([1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "tf.stack([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "read_file_186": {
                "variable": {
                    "value": "pose_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "pose_id + '_{}.png'.format(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "decode_png_187": {
                "variable": {
                    "value": "pose_i",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "pose_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(pose_id + '_{}.png'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_255": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.image_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_256": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_257": {
                "variable": {
                    "value": "self.labels_rev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label_rev_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_258": {
                "variable": {
                    "value": "self.poses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pose_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_259": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[self.images, self.labels, self.labels_rev, self.poses]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_271": {
                "variable": {
                    "value": "(image_batch, label_batch, heatmap_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.image, self.label, self.heatmap]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "num_elements",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_21": {
                "x": {
                    "value": "tf.to_float(tf.shape(img)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.75, maxval=1.25, dtype=tf.float32, seed=None)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([1], minval=0.75, maxval=1.25, dtype=tf.float32, seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_22": {
                "x": {
                    "value": "tf.to_float(tf.shape(img)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.75, maxval=1.25, dtype=tf.float32, seed=None)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([1], minval=0.75, maxval=1.25, dtype=tf.float32, seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_24": {
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_41": {
                "values": {
                    "value": "[1.0, distort_left_right_random, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_50": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_54": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(heatmap, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(heatmap, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap_crop, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.concat(pose, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_61": {
                "x": {
                    "value": "tf.to_float(resized_h)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.75, maxval=1.25, dtype=tf.float32, seed=None)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([1], minval=0.75, maxval=1.25, dtype=tf.float32, seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_62": {
                "x": {
                    "value": "tf.to_float(resized_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], minval=0.75, maxval=1.25, dtype=tf.float32, seed=None)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([1], minval=0.75, maxval=1.25, dtype=tf.float32, seed=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_64": {
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(heatmap, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(heatmap, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap_crop, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.concat(pose, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(heatmap, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(heatmap, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(heatmap_crop, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(heatmap, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.concat(pose, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_100": {
                "x": {
                    "value": "crop_w",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_102": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_116": {
                "input": {
                    "value": "heatmap_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined_crop[:, :, last_image_dim + last_label_dim:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_176": {
                "values": {
                    "value": "[img_b, img_g, img_r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_210": {
                "values": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_21": {
                "x": {
                    "value": "tf.shape(img)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_22": {
                "x": {
                    "value": "tf.shape(img)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_not_46": {
                "x": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(distort_left_right_random, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_61": {
                "x": {
                    "value": "resized_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_float_62": {
                "x": {
                    "value": "resized_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_74": {
                "x": {
                    "value": "resized_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "to_int32_78": {
                "x": {
                    "value": "resized_w / 8.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_115": {
                "x": {
                    "value": "crop_w / 8.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_21": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.concat([img_b, img_g, img_r], 2), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_22": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(image, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.concat([img_b, img_g, img_r], 2), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "LIP_JPPNet/utils/model.py": {
        "tensorflow": {}
    },
    "LIP_JPPNet/utils/ops.py": {
        "tensorflow": {
            "get_variable_11": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel, kernel, input_.get_shape()[-1], output]",
                            "List"
                        ],
                        [
                            "input_.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[kernel, kernel, input_.get_shape()[-1], output]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_12": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape, initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', shape, initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_14": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_15": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(input_, w, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [output], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_24": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel, kernel, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel, kernel, input_.get_shape()[-1], output]",
                            "List"
                        ],
                        [
                            "input_.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "[kernel, kernel, input_.get_shape()[-1], output]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atrous_conv2d_39": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape, initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', shape, initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_42": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(input_, w, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [output], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [output], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_17": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(input_, w, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_20": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(input_, w, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, stride, stride, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(input_, w, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name=scope.name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_30": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_11": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_14": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_31": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_38": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_41": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "LIP_JPPNet/utils/utils.py": {
        "tensorflow": {
            "get_checkpoint_state_111": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_59": {
                "variable": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(input_batch, new_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_batch, squeeze_dims=[3])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(input_batch, depth=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(input_batch, new_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_batch, squeeze_dims=[3])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(input_batch, depth=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "label_encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_62": {
                "variable": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(input_batch, new_size)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_batch, squeeze_dims=[3])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(input_batch, depth=n_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "cp_vton/cp_dataset.py": {
        "torch": {
            "from_numpy_53": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cm_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(cm)",
                            "Call"
                        ],
                        [
                            "(cm_array >= 128).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "phead",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parse_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(parse_array == 1).astype(np.float32) + (parse_array == 2).astype(np.float32) + (parse_array == 4).astype(np.float32) + (parse_array == 13).astype(np.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "pcm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "parse_cloth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(parse_array == 5).astype(np.float32) + (parse_array == 6).astype(np.float32) + (parse_array == 7).astype(np.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "pose_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "point_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose_data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.fine_height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.fine_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "agnostic",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shape, im_h, pose_map]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CPDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.sampler.RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "RandomSampler_145": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CPDataset(opt)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cp_vton/networks.py": {
        "torch": {
            "Conv2d_57": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pow_81": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_94": {
                "variable": {
                    "value": "feature_mul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_B.view(b, c, h * w).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_A.transpose(2, 3).contiguous().view(b, c, h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_nc, 512, kernel_size=4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 4 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_116": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "self.grid_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "self.grid_Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_193": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(Xmat - Xmat.transpose(0, 1), 2) + torch.pow(Ymat - Ymat.transpose(0, 1), 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(P_dist_squared)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(O, X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "tensors": {
                    "value": "(P.transpose(0, 1), Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_199": {
                "variable": {
                    "value": "Li",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.cat((K, P), 1), torch.cat((P.transpose(0, 1), Z), 1)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_229": {
                "variable": {
                    "value": "W_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, :self.N, :, :].squeeze(3)",
                            "Call"
                        ],
                        [
                            "Q_X + self.P_X_base.expand_as(Q_X)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_230": {
                "variable": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, self.N:, :, :].squeeze(3)",
                            "Call"
                        ],
                        [
                            "Q_Y + self.P_Y_base.expand_as(Q_Y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_236": {
                "variable": {
                    "value": "A_X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, self.N:, :self.N].expand((batch_size, 3, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, :self.N, :, :].squeeze(3)",
                            "Call"
                        ],
                        [
                            "Q_X + self.P_X_base.expand_as(Q_X)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_237": {
                "variable": {
                    "value": "A_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Li[:, self.N:, :self.N].expand((batch_size, 3, self.N))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta[:, self.N:, :, :].squeeze(3)",
                            "Call"
                        ],
                        [
                            "Q_Y + self.P_Y_base.expand_as(Q_Y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_259": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(delta_X, 2) + torch.pow(delta_Y, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(dist_squared)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_317": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_319": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_345": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_358": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_359": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_360": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_390": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_430": {
                "obj": {
                    "value": "model.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** i * ngf if 2 ** i * ngf < 512 else 512",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** (i + 1) * ngf if 2 ** i * ngf < 512 else 512",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_82": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(feature, 2), 1) + epsilon, 0.5).unsqueeze(1).expand_as(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_278": {
                "tensors": {
                    "value": "(points_X_prime, points_Y_prime)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_323": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_324": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "load_436": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normal_15": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "(self.grid_X, self.grid_Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_191": {
                "input": {
                    "value": "Ymat - Ymat.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_193": {
                "input": {
                    "value": "P_dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(Xmat - Xmat.transpose(0, 1), 2) + torch.pow(Ymat - Ymat.transpose(0, 1), 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_256": {
                "input": {
                    "value": "delta_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points_Y_for_summation - P_Y",
                            "BinOp"
                        ],
                        [
                            "points_Y_for_summation - P_Y.expand_as(points_Y_for_summation)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_259": {
                "input": {
                    "value": "dist_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(delta_X, 2) + torch.pow(delta_Y, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_271": {
                "input": {
                    "value": "torch.mul(W_X, U.expand_as(W_X))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_276": {
                "input": {
                    "value": "torch.mul(W_Y, U.expand_as(W_Y))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_329": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_330": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Upsample_335": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_336": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_351": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_270": {
                "input": {
                    "value": "A_X[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_Y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 1].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_Y_batch.expand((batch_size,) + points_Y_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_271": {
                "input": {
                    "value": "W_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N)), Q_X)",
                            "Call"
                        ],
                        [
                            "W_X.unsqueeze(3).unsqueeze(4).transpose(1, 4).repeat(1, points_h, points_w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.expand_as(W_X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_275": {
                "input": {
                    "value": "A_Y[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_Y_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 1].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_Y_batch.expand((batch_size,) + points_Y_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_276": {
                "input": {
                    "value": "W_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.Li[:, :self.N, :self.N].expand((batch_size, self.N, self.N)), Q_Y)",
                            "Call"
                        ],
                        [
                            "W_Y.unsqueeze(3).unsqueeze(4).transpose(1, 4).repeat(1, points_h, points_w, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.expand_as(W_Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_269": {
                "input": {
                    "value": "A_X[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_X_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 0].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_X_batch.expand((batch_size,) + points_X_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_274": {
                "input": {
                    "value": "A_Y[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "points_X_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, :, :, 0].unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "points_X_batch.expand((batch_size,) + points_X_batch.size()[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_341": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cp_vton/test.py": {
        "torch": {
            "grid_sample_75": {
                "variable": {
                    "value": "warped_cloth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['cloth']",
                            "Subscript"
                        ],
                        [
                            "inputs['cloth']",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_76": {
                "variable": {
                    "value": "warped_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['cloth_mask']",
                            "Subscript"
                        ],
                        [
                            "inputs['cloth_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_77": {
                "variable": {
                    "value": "warped_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['grid_image']",
                            "Subscript"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_113": {
                "variable": {
                    "value": "(p_rendered, m_composite)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(torch.cat([agnostic, c], 1))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_114": {
                "variable": {
                    "value": "p_rendered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_rendered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(p_rendered)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_115": {
                "variable": {
                    "value": "m_composite",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_composite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(m_composite)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "[agnostic, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cp_vton/visualization.py": {
        "torch": {}
    }
}