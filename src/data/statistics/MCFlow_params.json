{
    "loader/data_loader.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ldr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DataLoader(mode=0, seed=args.seed, path=args.dataset, drp_percent=args.drp_impt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_23": {
                "variable": {
                    "value": "nf_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in flow.parameters() if p.requires_grad == True]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "nn_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in nn_model.parameters() if p.requires_grad == True]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "nf_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in flow.parameters() if p.requires_grad == True]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/latent_model.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.h_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden_neurons[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.h_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden_neurons[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_neurons[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.h_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden_neurons[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_neurons[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.h_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden_neurons[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_neurons[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.h_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden_neurons[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden_neurons[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_26": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.translate_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[translating_nn() for _ in range(len(mask))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "self.scale_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[scaling_nn() for _ in range(len(mask))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "exp_50": {
                "input": {
                    "value": "-scale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale_nn[index](z_) * (1 - self.mask[index])",
                            "BinOp"
                        ],
                        [
                            "self.scale_nn[index](x_) * (1 - self.mask[index])",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "util/utils.py": {
        "torch": {
            "MSELoss_24": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_120": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(data_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(data_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_38": {
                "variable": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_func(x_hat, labels[0]) * (1 - labels[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss(torch.clamp(x_hat, min=0, max=1), labels[0]) * labels[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "*args": {
                    "value": "nn.Linear(data_shape, num_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "nn.Linear(data_shape, num_neurons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_120": {
                "n": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[int(idx * batch_sz):int((idx + 1) * batch_sz)]",
                            "Subscript"
                        ],
                        [
                            "data[int((idx + 1) * batch_sz):]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "np.asarray(data[begin:end])",
                            "Call"
                        ],
                        [
                            "np.asarray(data[-left_over:])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_154": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[int(idx * batch_sz):int((idx + 1) * batch_sz)]",
                            "Subscript"
                        ],
                        [
                            "data[int((idx + 1) * batch_sz):]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "np.asarray(data[begin:end])",
                            "Call"
                        ],
                        [
                            "np.asarray(data[-left_over:])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[int(idx * batch_sz):int((idx + 1) * batch_sz)]",
                            "Subscript"
                        ],
                        [
                            "data[int((idx + 1) * batch_sz):]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "np.asarray(data[begin:end])",
                            "Call"
                        ],
                        [
                            "np.asarray(data[-left_over:])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[int(idx * batch_sz):int((idx + 1) * batch_sz)]",
                            "Subscript"
                        ],
                        [
                            "data[int((idx + 1) * batch_sz):]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "np.asarray(data[begin:end])",
                            "Call"
                        ],
                        [
                            "np.asarray(data[-left_over:])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "num_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "num_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "num_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "num_neurons",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_neurons",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[int(idx * batch_sz):int((idx + 1) * batch_sz)]",
                            "Subscript"
                        ],
                        [
                            "data[int((idx + 1) * batch_sz):]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "np.asarray(data[begin:end])",
                            "Call"
                        ],
                        [
                            "np.asarray(data[-left_over:])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[int(idx * batch_sz):int((idx + 1) * batch_sz)]",
                            "Subscript"
                        ],
                        [
                            "data[int((idx + 1) * batch_sz):]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "np.asarray(data[begin:end])",
                            "Call"
                        ],
                        [
                            "np.asarray(data[-left_over:])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[int(idx * batch_sz):int((idx + 1) * batch_sz)]",
                            "Subscript"
                        ],
                        [
                            "data[int((idx + 1) * batch_sz):]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "np.asarray(data[begin:end])",
                            "Call"
                        ],
                        [
                            "np.asarray(data[-left_over:])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[int(idx * batch_sz):int((idx + 1) * batch_sz)]",
                            "Subscript"
                        ],
                        [
                            "data[int((idx + 1) * batch_sz):]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "np.asarray(data[begin:end])",
                            "Call"
                        ],
                        [
                            "np.asarray(data[-left_over:])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rows).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_74": {
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow.inverse(z_hat)",
                            "Call"
                        ],
                        [
                            "flow.inverse(z_hat)",
                            "Call"
                        ],
                        [
                            "nf.inverse(z_hat)",
                            "Call"
                        ],
                        [
                            "nf.inverse(z_hat)",
                            "Call"
                        ],
                        [
                            "nf.inverse(z_hat)",
                            "Call"
                        ],
                        [
                            "np.clip(x_hat.cpu().numpy(), 0, 1)",
                            "Call"
                        ],
                        [
                            "nf.inverse(z_hat)",
                            "Call"
                        ],
                        [
                            "np.clip(x_hat.cpu().numpy(), 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}