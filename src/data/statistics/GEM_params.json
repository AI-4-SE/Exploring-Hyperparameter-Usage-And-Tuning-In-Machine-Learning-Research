{
    "gem_mujoco/stable_baselines/td3/episodic_memory.py": {
        "sklearn": {
            "TSNE_337": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/algorithm/amc.py": {
        "tensorflow": {
            "Graph_111": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.em_raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.acts_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.true_rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.qvalues_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_79": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rews_ph + (1.0 - self.done_ph) * self.args.gamma * self.em_q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_83": {
                "variable": {
                    "value": "self.target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "variable": {
                    "value": "self.buffer_target_diffence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(self.qvalues_ph - self.target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_87": {
                "variable": {
                    "value": "self.q_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.qvalues_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_98": {
                "variable": {
                    "value": "self.target_update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(self.tau * v + (1 - self.tau) * v_t) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_104": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_105": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_106": {
                "variable": {
                    "value": "self.target_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_210": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_215": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_89": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_70": {
                "variable": {
                    "value": "self.q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_75": {
                "variable": {
                    "value": "self.tar_q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.tar_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_83": {
                "x": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_91": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "normalizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/algorithm/avedqn.py": {
        "tensorflow": {
            "Graph_146": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_33": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_35": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.raw_obs_next_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.acts_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_112": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rews_ph + (1.0 - self.done_ph) * self.args.gamma ** self.args.nstep * self.q_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_117": {
                "variable": {
                    "value": "self.target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "huber_loss_119": {
                "variable": {
                    "value": "self.q_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "self.q_l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target - self.q_acts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_127": {
                "variable": {
                    "value": "self.target_update_op_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('target_1'), get_vars('target_2'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "group_131": {
                "variable": {
                    "value": "self.target_update_op_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target_1'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_136": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_137": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_138": {
                "variable": {
                    "value": "self.target_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target_1'))] + [v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target_2'))]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_217": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_222": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_115": {
                "variable": {
                    "value": "self.lb_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_116": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_122": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_61": {
                "variable": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(obs_ph, 256, activation=tf.nn.relu, name='q_dense1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense1, 256, activation=tf.nn.relu, name='q_dense2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(obs_ph, 32, 8, 4, 'same', activation=tf.nn.relu, name='q_conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv1, 64, 4, 2, 'same', activation=tf.nn.relu, name='q_conv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_71": {
                "variable": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv2, 64, 3, 1, 'same', activation=tf.nn.relu, name='q_conv3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_73": {
                "variable": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_74": {
                "variable": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_act')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_89": {
                "variable": {
                    "value": "self.q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "target_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "target_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_117": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_120": {
                "x": {
                    "value": "target - self.q_acts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_124": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "normalizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_77": {
                "variable": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "q_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_base')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "q_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_93": {
                "variable": {
                    "value": "self.pi_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(self.q_next, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "self.q_t_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value_net(self.obs_next_ph) * self.pi_next",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_100": {
                "variable": {
                    "value": "self.q_t_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value_net(self.obs_next_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "variable": {
                    "value": "self.q_t_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value_net(self.obs_next_ph) * self.pi_next",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_107": {
                "variable": {
                    "value": "self.q_t_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value_net(self.obs_next_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "input_tensor": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense_act, self.acts_num, name='q_act')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "input": {
                    "value": "self.q_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/algorithm/cddqn.py": {
        "tensorflow": {
            "Graph_137": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_34": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_36": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.raw_obs_next_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.acts_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_103": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rews_ph + (1.0 - self.done_ph) * self.args.gamma ** self.args.nstep * self.q_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_109": {
                "variable": {
                    "value": "self.target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "variable": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "self.q_acts_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q_2 * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "self.q_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.q_acts - self.q_acts_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "self.q_l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target - self.q_acts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_125": {
                "variable": {
                    "value": "self.target_update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_130": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_131": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_132": {
                "variable": {
                    "value": "self.target_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_207": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_212": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_99": {
                "variable": {
                    "value": "self.pi_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(self.q_t_1, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "self.q_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(self.q_t_1, self.q_t_2) * self.pi_next",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "less_106": {
                "variable": {
                    "value": "self.lb_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_120": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(obs_ph, 256, activation=tf.nn.relu, name='q_dense1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense1, 256, activation=tf.nn.relu, name='q_dense2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(obs_ph, 32, 8, 4, 'same', activation=tf.nn.relu, name='q_conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv1, 64, 4, 2, 'same', activation=tf.nn.relu, name='q_conv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_72": {
                "variable": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv2, 64, 3, 1, 'same', activation=tf.nn.relu, name='q_conv3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_74": {
                "variable": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_act')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_90": {
                "variable": {
                    "value": "self.q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_108": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_109": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "huber_loss_112": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "self.q_acts_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_113": {
                "x": {
                    "value": "self.q_acts - self.q_acts_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_114": {
                "x": {
                    "value": "target - self.q_acts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_122": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "normalizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "q_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_base')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "q_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "value_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "value_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "value_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "value_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "input": {
                    "value": "self.q_t_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_117": {
                "x": {
                    "value": "tf.maximum(self.q_lb_ph - self.q_acts, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_118": {
                "x": {
                    "value": "tf.maximum(self.q_lb_ph - self.q_acts_2, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_100": {
                "x": {
                    "value": "self.q_t_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.q_t_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_117": {
                "x": {
                    "value": "self.q_lb_ph - self.q_acts",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_118": {
                "x": {
                    "value": "self.q_lb_ph - self.q_acts_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense_act, self.acts_num, name='q_act')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/algorithm/ddq.py": {
        "tensorflow": {
            "Graph_141": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.em_raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.acts_dims + [1, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.true_rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.qvalues_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_108": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rews_ph + (1.0 - self.done_ph) * self.args.gamma * self.q_target_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q_funcs_stack * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "q_acts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.num_q)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_113": {
                "variable": {
                    "value": "self.target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.qvalues_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "self.buffer_target_diffence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(self.qvalues_ph - self.target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "self.q_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.where(overestimate, sym_q_loss, self.alpha * sym_q_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_128": {
                "variable": {
                    "value": "self.target_update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(self.tau * v + (1 - self.tau) * v_t) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_134": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_135": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_136": {
                "variable": {
                    "value": "self.target_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_238": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_243": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "q_funcs_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.q_funcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "self.q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_funcs_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(self.q_funcs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + self.args.acts_dims + [2, self.num_q // 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "self.q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_max(self.q_step, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "target_q_funcs_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.target_q_funcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "self.target_q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_q_funcs_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(self.target_q_funcs, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + self.args.acts_dims + [2, self.num_q // 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "self.q_target_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.em_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_122": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_min_84": {
                "variable": {
                    "value": "self.q_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "self.q_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_100": {
                "variable": {
                    "value": "self.em_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_min(self.target_q_funcs_stack, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_102": {
                "variable": {
                    "value": "self.em_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_mean(self.target_q_funcs_stack, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_113": {
                "x": {
                    "value": "self.qvalues_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_120": {
                "condition": {
                    "value": "overestimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_acts - self.qvalues_ph > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "sym_q_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(q_acts - self.qvalues_ph) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.alpha * sym_q_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_124": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "normalizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_78": {
                "variable": {
                    "value": "q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_net(self.obs_ph)",
                            "Call"
                        ],
                        [
                            "q_values_target if target else q_values",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_87": {
                "input_tensor": {
                    "value": "self.q_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_93": {
                "variable": {
                    "value": "tar_q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_net(self.obs_ph)",
                            "Call"
                        ],
                        [
                            "q_values_target if target else q_values",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "'value_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "'value_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_100": {
                "input_tensor": {
                    "value": "self.target_q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "input_tensor": {
                    "value": "self.target_q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/algorithm/ddq6.py": {
        "tensorflow": {
            "Graph_190": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.em_raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.acts_dims + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.true_rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.qvalues_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_144": {
                "variable": {
                    "value": "self.target_q_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.target_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_145": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rews_ph + (1.0 - self.done_ph) * self.args.gamma * self.target_q_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_148": {
                "variable": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.qs * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "q_acts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.num_q)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "variable": {
                    "value": "self.meta_q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.meta_q_funcs_stack * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "meta_q_acts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.meta_q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_153": {
                "variable": {
                    "value": "self.meta_target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.qvalues_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_154": {
                "variable": {
                    "value": "self.target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "duplicate_qvalues",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.qvalues_ph for _ in range(self.num_q // 2)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "duplicate_qvalues",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "duplicate_qvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([self.qvalues_ph for _ in range(self.num_q // 2)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(duplicate_qvalues, (-1, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.num_q)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "variable": {
                    "value": "self.buffer_target_diffence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(duplicate_qvalues - self.target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "huber_loss_161": {
                "variable": {
                    "value": "self.q_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "q_acts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.q_acts, shape=(-1, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "Reduction.SUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_166": {
                "variable": {
                    "value": "self.meta_q_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.where(overestimate, sym_q_loss, self.alpha * sym_q_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_178": {
                "variable": {
                    "value": "self.target_update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(self.tau * v + (1 - self.tau) * v_t) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_183": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_184": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_185": {
                "variable": {
                    "value": "self.target_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_287": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_292": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "self.qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.q_funcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "self.q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + self.args.acts_dims + [2, self.num_q // 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "self.q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "self.meta_q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.meta_q_funcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "self.q_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.meta_q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "self.meta_q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_max(self.q_step, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "self.target_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.target_q_funcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "self.target_q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.target_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + self.args.acts_dims + [2, self.num_q // 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_168": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_169": {
                "variable": {
                    "value": "self.meta_q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_136": {
                "variable": {
                    "value": "self.em_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_min(self.target_q_funcs_stack, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_138": {
                "variable": {
                    "value": "self.em_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_mean(self.target_q_funcs_stack, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_153": {
                "x": {
                    "value": "self.qvalues_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_154": {
                "x": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_166": {
                "condition": {
                    "value": "overestimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_q_acts - self.qvalues_ph > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "sym_q_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "huber_loss(meta_q_acts, self.qvalues_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.alpha * sym_q_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_171": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_173": {
                "variable": {
                    "value": "self.meta_q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "normalizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "sub",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_110": {
                "input_tensor": {
                    "value": "tf.reduce_mean(self.q_funcs_stack, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_114": {
                "input_tensor": {
                    "value": "self.q_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "sub",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_96": {
                "variable": {
                    "value": "q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_net(self.obs_ph)",
                            "Call"
                        ],
                        [
                            "value_net(self.obs_ph)",
                            "Call"
                        ],
                        [
                            "q_values_target if target else q_values",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_103": {
                "variable": {
                    "value": "q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_net(self.obs_ph)",
                            "Call"
                        ],
                        [
                            "value_net(self.obs_ph)",
                            "Call"
                        ],
                        [
                            "q_values_target if target else q_values",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_121": {
                "variable": {
                    "value": "tar_q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tar_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_net(self.em_obs_ph)",
                            "Call"
                        ],
                        [
                            "value_net(self.em_obs_ph)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_128": {
                "variable": {
                    "value": "tar_q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tar_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_net(self.em_obs_ph)",
                            "Call"
                        ],
                        [
                            "value_net(self.em_obs_ph)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_136": {
                "input_tensor": {
                    "value": "self.target_q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "input_tensor": {
                    "value": "self.target_q_funcs_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "'value_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "'meta_value_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "'value_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "'meta_value_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/algorithm/dqn.py": {
        "tensorflow": {
            "Graph_139": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_36": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_38": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.raw_obs_next_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.acts_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_106": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rews_ph + (1.0 - self.done_ph) * self.args.gamma ** self.args.nstep * self.q_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_113": {
                "variable": {
                    "value": "self.target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "huber_loss_115": {
                "variable": {
                    "value": "self.q_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "self.q_l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target - self.q_acts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_127": {
                "variable": {
                    "value": "self.target_update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_132": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_133": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_134": {
                "variable": {
                    "value": "self.target_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_221": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_226": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_110": {
                "variable": {
                    "value": "self.lb_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_121": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(obs_ph, 256, activation=tf.nn.relu, name='q_dense1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense1, 256, activation=tf.nn.relu, name='q_dense2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(obs_ph, 32, 8, 4, 'same', activation=tf.nn.relu, name='q_conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv1, 64, 4, 2, 'same', activation=tf.nn.relu, name='q_conv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_74": {
                "variable": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv2, 64, 3, 1, 'same', activation=tf.nn.relu, name='q_conv3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_76": {
                "variable": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_77": {
                "variable": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_act')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_92": {
                "variable": {
                    "value": "self.q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_112": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_113": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_116": {
                "x": {
                    "value": "target - self.q_acts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_123": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "normalizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_80": {
                "variable": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_81": {
                "variable": {
                    "value": "q_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_base')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "q_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_96": {
                "variable": {
                    "value": "self.pi_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(self.q_next, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "self.q_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value_net(self.obs_next_ph) * self.pi_next",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_103": {
                "variable": {
                    "value": "self.q_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value_net(self.obs_next_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_119": {
                "x": {
                    "value": "tf.maximum(self.q_lb_ph - self.q_acts, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_119": {
                "x": {
                    "value": "self.q_lb_ph - self.q_acts",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "input_tensor": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense_act, self.acts_num, name='q_act')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_96": {
                "input": {
                    "value": "self.q_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/algorithm/lrdqn.py": {
        "tensorflow": {
            "Graph_130": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_34": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_36": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.raw_obs_next_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.acts_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_103": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rews_ph + (1.0 - self.done_ph) * self.args.gamma ** self.args.nstep * self.q_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_108": {
                "variable": {
                    "value": "self.target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "self.q_l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target - self.q_acts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_118": {
                "variable": {
                    "value": "self.target_update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_123": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_124": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_125": {
                "variable": {
                    "value": "self.target_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_200": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_205": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_106": {
                "variable": {
                    "value": "self.lb_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_107": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_113": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(obs_ph, 256, activation=tf.nn.relu, name='q_dense1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense1, 256, activation=tf.nn.relu, name='q_dense2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(obs_ph, 32, 8, 4, 'same', activation=tf.nn.relu, name='q_conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv1, 64, 4, 2, 'same', activation=tf.nn.relu, name='q_conv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_72": {
                "variable": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv2, 64, 3, 1, 'same', activation=tf.nn.relu, name='q_conv3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_74": {
                "variable": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_76": {
                "variable": {
                    "value": "q_lowrank_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_act')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.args.rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lowrank_hidden",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_77": {
                "variable": {
                    "value": "q_lowrank_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_lowrank_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense_act, self.args.rank, activation=tf.nn.relu, name='q_lowrank_hidden')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_lowrank_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "q_sparse_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_act')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_sparse_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "self.q_sparse_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q_sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "self.q_sparse_abs_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.q_sparse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_89": {
                "variable": {
                    "value": "self.q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_108": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "huber_loss_110": {
                "labels": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.q_sparse_avg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_111": {
                "x": {
                    "value": "target - self.q_acts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_115": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "normalizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_93": {
                "variable": {
                    "value": "self.pi_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(self.q_next, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "self.q_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value_net(self.obs_next_ph)[0] * self.pi_next",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_100": {
                "variable": {
                    "value": "self.q_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value_net(self.obs_next_ph)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_88": {
                "x": {
                    "value": "self.q_sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "input": {
                    "value": "self.q_next",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/algorithm/mmdqn.py": {
        "tensorflow": {
            "Graph_131": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_34": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_36": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.raw_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.raw_obs_next_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.obs_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + self.args.acts_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.rews_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_102": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rews_ph + (1.0 - self.done_ph) * self.args.gamma ** self.args.nstep * self.q_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_107": {
                "variable": {
                    "value": "self.target_check_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "variable": {
                    "value": "self.q_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "self.q_acts_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q_2 * self.acts_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "self.q_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.q_acts - self.q_acts_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "variable": {
                    "value": "self.q_l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(target - self.q_acts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_119": {
                "variable": {
                    "value": "self.target_update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_124": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_125": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_126": {
                "variable": {
                    "value": "self.target_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[v_t.assign(v) for (v, v_t) in zip(get_vars('main'), get_vars('target'))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_201": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_206": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_99": {
                "variable": {
                    "value": "self.q_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.minimum(self.q_t_1, self.q_t_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "less_105": {
                "variable": {
                    "value": "self.lb_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_106": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.q_lb_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_114": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.Adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(obs_ph, 256, activation=tf.nn.relu, name='q_dense1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense1, 256, activation=tf.nn.relu, name='q_dense2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(obs_ph, 32, 8, 4, 'same', activation=tf.nn.relu, name='q_conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv1, 64, 4, 2, 'same', activation=tf.nn.relu, name='q_conv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_72": {
                "variable": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv2, 64, 3, 1, 'same', activation=tf.nn.relu, name='q_conv3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_74": {
                "variable": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_act')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "main",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_90": {
                "variable": {
                    "value": "self.q_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_107": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "huber_loss_110": {
                "labels": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(target, self.q_lb_ph)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "self.q_acts_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_111": {
                "x": {
                    "value": "self.q_acts - self.q_acts_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_112": {
                "x": {
                    "value": "target - self.q_acts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_116": {
                "variable": {
                    "value": "self.q_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.args.RMSProp_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.args.RMSProp_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "normalizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_78": {
                "variable": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "q_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_base')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "q_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "value_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "value_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "value_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "value_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_99": {
                "x": {
                    "value": "self.q_t_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.q_t_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense_act, self.acts_num, name='q_act')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/learner/off_policy/base_learner.py": {
        "tensorflow": {
            "GPUOptions_81": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConfigProto_83": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.3)",
                            "Call"
                        ]
                    ]
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_88": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, allow_soft_placement=True, log_device_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_57": {
                "variable": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_58": {
                "variable": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(obs_ph, 256, activation=tf.nn.relu, name='q_dense1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_59": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense1, 256, activation=tf.nn.relu, name='q_dense2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(obs_ph, 32, 8, 4, 'same', activation=tf.nn.relu, name='q_conv1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv1, 64, 4, 2, 'same', activation=tf.nn.relu, name='q_conv2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_67": {
                "variable": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "q_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(q_conv2, 64, 3, 1, 'same', activation=tf.nn.relu, name='q_conv3')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_69": {
                "variable": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_70": {
                "variable": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_act')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.acts_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_act",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_73": {
                "variable": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_conv3_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(q_conv3)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "q_dense_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_74": {
                "variable": {
                    "value": "q_base",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_dense_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_conv3_flat, 512, activation=tf.nn.relu, name='q_dense_base')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "q_base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "input_tensor": {
                    "value": "q_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(q_dense_act, self.acts_num, name='q_act')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/utils/os_utils.py": {
        "tensorflow": {
            "FileWriter_227": {
                "logdir": {
                    "value": "summary_path",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "merge_248": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_251": {
                "variable": {
                    "value": "self.summary_cmp_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summary_cmp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "summary_scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_245": {
                "variable": {
                    "value": "self.summary_ph[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.keys",
                            "Attribute"
                        ],
                        [
                            "self.scalars",
                            "Attribute"
                        ],
                        [
                            "self.scalars.keys()",
                            "Call"
                        ],
                        [
                            "self.scalars",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "self.summary_ph[key_cmp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "key_cmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.remove_prefix(key)",
                            "Call"
                        ],
                        [
                            "self.remove_prefix(key)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_246": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.keys",
                            "Attribute"
                        ],
                        [
                            "self.scalars",
                            "Attribute"
                        ],
                        [
                            "self.scalars.keys()",
                            "Call"
                        ],
                        [
                            "self.scalars",
                            "Attribute"
                        ]
                    ]
                },
                "data": {
                    "value": "self.summary_ph[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_241": {
                "name": {
                    "value": "key_cmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.remove_prefix(key)",
                            "Call"
                        ],
                        [
                            "self.remove_prefix(key)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "self.summary_ph[key_cmp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "gem_atari/utils/tf_utils.py": {
        "tensorflow": {
            "get_collection_6": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_12": {
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES, scope=scope_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_22": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.exp(logstd)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.add_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.add_sum_sqr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.add_cnt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_60": {
                "variable": {
                    "value": "self.update_array_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.sum.assign_add(self.add_sum)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.sum_sqr.assign_add(self.add_sum_sqr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_65": {
                "variable": {
                    "value": "self.update_scalar_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.mean.assign(self.sum / self.cnt)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.std.assign(tf.maximum(self.eps_std, tf.sqrt(self.sum_sqr / self.cnt - tf.square(self.sum / self.cnt))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_104": {
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(x - y) > d",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2.0 * d ** 2 + d * tf.abs(x - y)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "quadratic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - y) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_collection_12": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_25": {
                "input_tensor": {
                    "value": "-0.5 * np.log(2.0 * np.pi) - self.logstd - 0.5 * tf.square((x - self.mean) / self.std)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "-0.5 + other.logstd - self.logstd + 0.5 * tf.square(self.std / other.std) + 0.5 * tf.square((self.mean - other.mean) / other.std)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "self.sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "self.sum_sqr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum_sqr",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "self.cnt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "cnt",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "std",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_value_75": {
                "t": {
                    "value": "(inputs_ph - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.norm_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_79": {
                "t": {
                    "value": "(inputs_ph - self.mean[:dim]) / self.std[:dim]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.norm_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_83": {
                "t": {
                    "value": "(inputs_ph - self.mean[-dim:]) / self.std[-dim:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.norm_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_101": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_22": {
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean * 0.0 + logstd",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "normalizer_variables",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_102": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_67": {
                "x": {
                    "value": "self.eps_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(self.sum_sqr / self.cnt - tf.square(self.sum / self.cnt))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_37": {
                "x": {
                    "value": "(self.mean - other.mean) / other.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_67": {
                "x": {
                    "value": "self.sum_sqr / self.cnt - tf.square(self.sum / self.cnt)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_36": {
                "x": {
                    "value": "self.std / other.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_67": {
                "x": {
                    "value": "self.sum / self.cnt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/run/train.py": {
        "tensorflow": {
            "reset_default_graph_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/setup.py": {
        "tensorflow": {
            "is_gpu_available_25": {
                "variable": {
                    "value": "tf_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/a2c/a2c.py": {
        "tensorflow": {
            "Graph_124": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_184": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_196": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_227": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_228": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advs_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "variable": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.proba_distribution.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "self.pg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.advs_ph * neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_166": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pg_loss - self.entropy * self.ent_coef + self.vf_loss * self.vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_194": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "train_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('train_model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_160": {
                "name": {
                    "value": "entropy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_161": {
                "name": {
                    "value": "policy_gradient_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pg_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_162": {
                "name": {
                    "value": "value_function_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vf_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_163": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pg_loss - self.entropy * self.ent_coef + self.vf_loss * self.vf_coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_168": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, self.params)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, self.params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_172": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.rewards_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_173": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_174": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.advs_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_154": {
                "input": {
                    "value": "train_model.value_flat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_172": {
                "input_tensor": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_174": {
                "input_tensor": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_176": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_177": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_178": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_180": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_model.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_182": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_model.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/acer/acer_simple.py": {
        "tensorflow": {
            "gather_31": {
                "variable": {
                    "value": "offset_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(input_tensor, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx_flattened",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, input_tensor.shape[0], dtype=tf.int64) * input_tensor.shape[1] + idx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_64": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "rho_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(f_i, [-1, 1]) / (self.mu_ph + eps)",
                            "BinOp"
                        ],
                        [
                            "get_by_index(rho, self.action_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_275": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_30": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_479": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.rprop_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.rprop_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_506": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_536": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_537": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_296": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "self.done_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_312": {
                "variable": {
                    "value": "self.reward_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_313": {
                "variable": {
                    "value": "self.mu_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_batch, self.n_act]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_315": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_376": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.proba_distribution.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_385": {
                "variable": {
                    "value": "log_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_i + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_415": {
                "variable": {
                    "value": "loss_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.stop_gradient(qret) - q_i) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_485": {
                "variable": {
                    "value": "_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema_apply_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema.apply(self.params)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_504": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "train_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('train_model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_294": {
                "name_or_scope": {
                    "value": "moving_average",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "polyak_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "custom_getter",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_310": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_324": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.policy_proba * train_model.q_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stop_gradient_395": {
                "variable": {
                    "value": "gain_bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv_bc * tf.nn.relu(1.0 - self.correction_term / (rho_i_ + eps)) * f_i_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_399": {
                "variable": {
                    "value": "log_f_bc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_i_ + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_400": {
                "variable": {
                    "value": "gain_bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_f_bc * tf.stop_gradient(adv_bc * tf.nn.relu(1.0 - self.correction_term / (rho + eps)) * f_i_)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_421": {
                "name": {
                    "value": "entropy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(train_model.proba_distribution.entropy())",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_422": {
                "name": {
                    "value": "policy_gradient_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_f + loss_bc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_423": {
                "name": {
                    "value": "value_function_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(tf.stop_gradient(qret) - q_i) * 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_424": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_policy + self.q_coef * loss_q - self.ent_coef * entropy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_430": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-(loss_policy - self.ent_coef * entropy) * self.n_steps * self.n_envs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "phi_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strip(train_model.proba_distribution.mean, self.n_envs, self.n_steps)",
                            "Call"
                        ],
                        [
                            "distribution_f",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_434": {
                "variable": {
                    "value": "k_dot_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_grad * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_435": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "(tf.reduce_sum(kl_grad * grad, axis=-1) - self.delta) / (tf.reduce_sum(tf.square(kl_grad), axis=-1) + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_441": {
                "variable": {
                    "value": "avg_norm_k_dot_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(k_dot_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_442": {
                "variable": {
                    "value": "avg_norm_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_447": {
                "variable": {
                    "value": "grads_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "f_i_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distribution_f.prob(action_)",
                            "Call"
                        ],
                        [
                            "distribution_f",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "grads_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-grad / (self.n_envs * self.n_steps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_448": {
                "variable": {
                    "value": "grads_q",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_q * self.q_coef",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_453": {
                "variable": {
                    "value": "norm_grads_q",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss_q * self.q_coef, self.params)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_norm_454": {
                "variable": {
                    "value": "norm_grads_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(f_i_, self.params, grads_f)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_456": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_policy + self.q_coef * loss_q - self.ent_coef * entropy",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_460": {
                "variable": {
                    "value": "(grads, norm_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[gradient_add(g1, g2, param, verbose=self.verbose) for (g1, g2, param) in zip(grads_policy, grads_q, self.params)]",
                            "ListComp"
                        ],
                        [
                            "tf.gradients(loss, self.params)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, self.params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_463": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_464": {
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.reward_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_465": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_466": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(adv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_467": {
                "name": {
                    "value": "action_probability",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.mu_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_484": {
                "control_inputs": {
                    "value": "[_opt_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_387": {
                "input": {
                    "value": "adv * tf.minimum(self.correction_term, rho_i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_388": {
                "input_tensor": {
                    "value": "gain_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_f * tf.stop_gradient(adv * tf.minimum(self.correction_term, rho_i))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_391": {
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_model.value_flat",
                            "Attribute"
                        ],
                        [
                            "tf.reduce_sum(train_model.policy_proba * train_model.q_value, axis=-1)",
                            "Call"
                        ],
                        [
                            "strip(value, self.n_envs, self.n_steps, True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.n_envs * self.n_steps, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_407": {
                "input_tensor": {
                    "value": "gain_bc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(adv_bc * tf.nn.relu(1.0 - self.correction_term / (rho_i_ + eps)) * f_i_)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_f_bc * tf.stop_gradient(adv_bc * tf.nn.relu(1.0 - self.correction_term / (rho + eps)) * f_i_), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_413": {
                "tensor": {
                    "value": "q_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_value[:, 0]",
                            "Subscript"
                        ],
                        [
                            "get_by_index(q_value, self.action_ph)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.n_envs, self.n_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_414": {
                "tensor": {
                    "value": "qret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_value",
                            "variable"
                        ],
                        [
                            "reward_seq[i] + gamma * qret * (1.0 - done_seq[i])",
                            "BinOp"
                        ],
                        [
                            "rho_bar[i] * (qret - q_is[i]) + value_sequence[i]",
                            "BinOp"
                        ],
                        [
                            "seq_to_batch(qrets, flat=True)",
                            "Call"
                        ],
                        [
                            "q_retrace(self.reward_ph, self.done_ph, q_i, value, tf.pow(rho_i, 1 / self.n_act), self.n_envs, self.n_steps, self.gamma)",
                            "Call"
                        ],
                        [
                            "q_retrace(self.reward_ph, self.done_ph, q_i, value, rho_i, self.n_envs, self.n_steps, self.gamma)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.n_envs, self.n_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_464": {
                "input_tensor": {
                    "value": "self.reward_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_465": {
                "input_tensor": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_466": {
                "input_tensor": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qret - value",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_467": {
                "input_tensor": {
                    "value": "self.mu_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_470": {
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reward_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_471": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_472": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qret - value",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_473": {
                "name": {
                    "value": "action_probability",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mu_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_344": {
                "tensor": {
                    "value": "f_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distribution_f.prob(self.action_ph)",
                            "Call"
                        ],
                        [
                            "get_by_index(distribution_f, self.action_ph)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "tensor": {
                    "value": "f_i_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distribution_f.prob(action_)",
                            "Call"
                        ],
                        [
                            "distribution_f",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_347": {
                "x": {
                    "value": "rho_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(f_i, [-1, 1]) / (self.mu_ph + eps)",
                            "BinOp"
                        ],
                        [
                            "get_by_index(rho, self.action_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 / self.n_act",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_415": {
                "x": {
                    "value": "tf.stop_gradient(qret) - q_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_441": {
                "x": {
                    "value": "k_dot_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(kl_grad * grad, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_442": {
                "x": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, (tf.reduce_sum(kl_grad * grad, axis=-1) - self.delta) / (tf.reduce_sum(tf.square(kl_grad), axis=-1) + eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_475": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_model.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_477": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_model.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_387": {
                "x": {
                    "value": "self.correction_term",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "rho_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(f_i, [-1, 1]) / (self.mu_ph + eps)",
                            "BinOp"
                        ],
                        [
                            "get_by_index(rho, self.action_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_401": {
                "input": {
                    "value": "adv_bc * tf.nn.relu(1.0 - self.correction_term / (rho + eps)) * f_i_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_444": {
                "tensor": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, (tf.reduce_sum(kl_grad * grad, axis=-1) - self.delta) / (tf.reduce_sum(tf.square(kl_grad), axis=-1) + eps))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.n_envs * self.n_steps, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_396": {
                "features": {
                    "value": "1.0 - self.correction_term / (rho_i_ + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_415": {
                "input": {
                    "value": "qret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_value",
                            "variable"
                        ],
                        [
                            "reward_seq[i] + gamma * qret * (1.0 - done_seq[i])",
                            "BinOp"
                        ],
                        [
                            "rho_bar[i] * (qret - q_is[i]) + value_sequence[i]",
                            "BinOp"
                        ],
                        [
                            "seq_to_batch(qrets, flat=True)",
                            "Call"
                        ],
                        [
                            "q_retrace(self.reward_ph, self.done_ph, q_i, value, tf.pow(rho_i, 1 / self.n_act), self.n_envs, self.n_steps, self.gamma)",
                            "Call"
                        ],
                        [
                            "q_retrace(self.reward_ph, self.done_ph, q_i, value, rho_i, self.n_envs, self.n_steps, self.gamma)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_435": {
                "input_tensor": {
                    "value": "kl_grad * grad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_436": {
                "input_tensor": {
                    "value": "tf.square(kl_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_436": {
                "x": {
                    "value": "kl_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-f_polyak_i / (f_i_ + eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_403": {
                "features": {
                    "value": "1.0 - self.correction_term / (rho + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/acktr/acktr.py": {
        "tensorflow": {
            "Graph_137": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_324": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_223": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_269": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_270": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "advs_ph * neg_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "variable": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.proba_distribution.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_188": {
                "variable": {
                    "value": "self.grads_check",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg_loss + self.vf_coef * vf_loss",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_221": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_306": {
                "variable": {
                    "value": "tf_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_313": {
                "variable": {
                    "value": "tf_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "train_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('train_model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('loss')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_181": {
                "name": {
                    "value": "entropy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_182": {
                "name": {
                    "value": "policy_gradient_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(advs_ph * neg_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_183": {
                "name": {
                    "value": "policy_gradient_fisher_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pg_fisher_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_184": {
                "name": {
                    "value": "value_function_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vf_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_185": {
                "name": {
                    "value": "value_function_fisher_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "vf_fisher_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_186": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pg_loss + self.vf_coef * vf_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_191": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.rewards_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_192": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_193": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.advs_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "kfac",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('kfac')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "kfac_apply",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.trained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('kfac_apply')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_171": {
                "input": {
                    "value": "train_model.value_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_175": {
                "input_tensor": {
                    "value": "neg_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_model.proba_distribution.neglogp(self.actions_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_177": {
                "input_tensor": {
                    "value": "tf.pow(train_model.value_fn - tf.stop_gradient(sample_net), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_191": {
                "input_tensor": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_192": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_196": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_197": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_198": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_205": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_176": {
                "input": {
                    "value": "train_model.value_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_178": {
                "x": {
                    "value": "train_model.value_fn - tf.stop_gradient(sample_net)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_200": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_model.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_202": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_model.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_variable_initialized_307": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_variable_initialized_314": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variables_initializer_319": {
                "var_list": {
                    "value": "new_uninitialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for (v, f) in zip(tf_vars, is_uninitialized) if not f and v not in old_uninitialized_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stop_gradient_178": {
                "input": {
                    "value": "sample_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_model.value_fn + tf.random_normal(tf.shape(train_model.value_fn))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/acktr/kfac.py": {
        "tensorflow": {
            "Variable_74": {
                "variable": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/sgd_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "self.cold_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/cold_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "self.factor_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/factor_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/stats_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "self.v_f_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC/vFv",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_default_graph_99": {
                "variable": {
                    "value": "default_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_354": {
                "variable": {
                    "value": "gradient_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "gradientsSampled",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_835": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(self._clip_kl / v_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_858": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_896": {
                "variable": {
                    "value": "global_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_973": {
                "variable": {
                    "value": "cold_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._cold_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self._momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_337": {
                "variable": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_352": {
                "variable": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Print_489": {
                "variable": {
                    "value": "stats_updates[a_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "stats_updates[a_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.convert_to_tensor('step:'), self.global_step, tf.convert_to_tensor('computing stats')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FIFOQueue_518": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[item.dtype for item in update_stats]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[item.get_shape() for item in update_stats]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "QueueRunner_525": {
                "variable": {
                    "value": "self.qr_stats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.FIFOQueue(1, [item.dtype for item in update_stats], shapes=[item.get_shape() for item in update_stats])",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(1, [item.dtype for item in factor_ops_dummy], shapes=[item.get_shape() for item in factor_ops_dummy])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "[enqueue_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_526": {
                "variable": {
                    "value": "update_stats_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(queue.size(), tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*[dequeue_stats_op()])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_530": {
                "variable": {
                    "value": "update_stats_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : _update_running_avg_stats(stats_updates)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_update_accum_stats",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_add_553": {
                "variable": {
                    "value": "stats_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Print_556": {
                "variable": {
                    "value": "stats_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "stats_step_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign_add(self.stats_step, 1)",
                            "Call"
                        ],
                        [
                            "tf.Print(stats_step_op, [tf.convert_to_tensor('step:'), self.global_step, tf.convert_to_tensor('fac step:'), self.factor_step, tf.convert_to_tensor('sgd step:'), self.sgd_step, tf.convert_to_tensor('Accum:'), tf.convert_to_tensor(accumulate), tf.convert_to_tensor('Accum coeff:'), tf.convert_to_tensor(accumulate_coeff), tf.convert_to_tensor('stat step:'), self.stats_step, update_ops[0], update_ops[1]])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('step:'), self.global_step, tf.convert_to_tensor('fac step:'), self.factor_step, tf.convert_to_tensor('sgd step:'), self.sgd_step, tf.convert_to_tensor('Accum:'), tf.convert_to_tensor(accumulate), tf.convert_to_tensor('Accum coeff:'), tf.convert_to_tensor(accumulate_coeff), tf.convert_to_tensor('stat step:'), self.stats_step, update_ops[0], update_ops[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_add_660": {
                "variable": {
                    "value": "factor_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.factor_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_828": {
                "variable": {
                    "value": "local_vg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad * grad_1 * (self._lr * self._lr)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Print_837": {
                "variable": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "scaling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(1.0, tf.sqrt(self._clip_kl / v_g))",
                            "Call"
                        ],
                        [
                            "tf.Print(scaling, [tf.convert_to_tensor('clip: '), scaling, tf.convert_to_tensor(' vFv: '), v_g])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('clip: '), scaling, tf.convert_to_tensor(' vFv: '), v_g]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_857": {
                "variable": {
                    "value": "varlist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FIFOQueue_883": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[item.dtype for item in factor_ops_dummy]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[item.get_shape() for item in factor_ops_dummy]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cond_885": {
                "variable": {
                    "value": "enqueue_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_and(tf.equal(tf.mod(self.stats_step, self._kfac_update), tf.convert_to_tensor(0)), tf.greater_equal(self.stats_step, self._stats_accum_iter))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : queue.enqueue(self.compute_stats_eigen())",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "QueueRunner_893": {
                "variable": {
                    "value": "queue_runner",
                    "type": "variable",
                    "possible_values": []
                },
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.FIFOQueue(1, [item.dtype for item in update_stats], shapes=[item.get_shape() for item in update_stats])",
                            "Call"
                        ],
                        [
                            "tf.FIFOQueue(1, [item.dtype for item in factor_ops_dummy], shapes=[item.get_shape() for item in factor_ops_dummy])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "[enqueue_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_add_983": {
                "variable": {
                    "value": "sgd_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_512": {
                "*inputs": {
                    "value": "*self._apply_stats(stats_updates)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_add_542": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "stats_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fprop_stats_vars",
                            "variable"
                        ],
                        [
                            "bprop_stats_vars",
                            "variable"
                        ],
                        [
                            "stats_updates",
                            "variable"
                        ],
                        [
                            "stats[var][key]",
                            "Subscript"
                        ],
                        [
                            "stats_eigen",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "accumulate_coeff * stats_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_546": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "stats_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fprop_stats_vars",
                            "variable"
                        ],
                        [
                            "bprop_stats_vars",
                            "variable"
                        ],
                        [
                            "stats_updates",
                            "variable"
                        ],
                        [
                            "stats[var][key]",
                            "Subscript"
                        ],
                        [
                            "stats_eigen",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "stats_var * self._stats_decay",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_add_548": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign_add(stats_var, accumulate_coeff * stats_new, use_locking=True)",
                            "Call"
                        ],
                        [
                            "tf.assign(stats_var, stats_var * self._stats_decay, use_locking=True)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(update_op, (1.0 - self._stats_decay) * stats_new, use_locking=True)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(1.0 - self._stats_decay) * stats_new",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_552": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_612": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_659": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_835": {
                "x": {
                    "value": "self._clip_kl / v_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_839": {
                "control_inputs": {
                    "value": "[tf.assign(self.v_f_v, v_g)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_899": {
                "control_inputs": {
                    "value": "[global_step_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_964": {
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_979": {
                "variable": {
                    "value": "(sgd_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "sgd_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(zip(sgd_grads, sgd_var))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_989": {
                "*inputs": {
                    "value": "*[sgd_step_op, cold_optim_op]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cond_999": {
                "pred": {
                    "value": "tf.greater(self.sgd_step, self._cold_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_warm_kfac_start",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_cold_sgd_start",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_231": {
                "device_name": {
                    "value": "/cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_504": {
                "pred": {
                    "value": "tf.greater(self.sgd_step, self._cold_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.group(*self._apply_stats(stats_updates, accumulate=True, accumulate_coeff=1.0 / self._stats_accum_iter))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_508": {
                "*inputs": {
                    "value": "*self._apply_stats(stats_updates, accumulate=True, accumulate_coeff=1.0 / self._stats_accum_iter)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "equal_526": {
                "x": {
                    "value": "queue.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_530": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_584": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_618": {
                "control_inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_657": {
                "ref": {
                    "value": "stats_eigen_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.eigen_reverse_lookup[mark]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factor_tensors[param][key][0]",
                            "Subscript"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_718": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grad, tf.expand_dims(grad_dict[var_assn_bias], 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_804": {
                "variable": {
                    "value": "grad_assn_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(grad, begin=[c_plus_one - 1, 0], size=[1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_assn_bias.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_808": {
                "variable": {
                    "value": "grad_assn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient.op.inputs",
                            "Attribute"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [kernel_width * kernel_height, n_channels, depth])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assn_bias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assn_weights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, grad_shape)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[c_plus_one - 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_815": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient.op.inputs",
                            "Attribute"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [kernel_width * kernel_height, n_channels, depth])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assn_bias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assn_weights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, grad_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "grad_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "Print_827": {
                "input_": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient.op.inputs",
                            "Attribute"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [kernel_width * kernel_height, n_channels, depth])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assn_bias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assn_weights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, grad_shape)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.sqrt(tf.reduce_sum(tf.pow(grad, 2)))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Euclidean norm of new grad",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_and_886": {
                "x": {
                    "value": "tf.equal(tf.mod(self.stats_step, self._kfac_update), tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_908": {
                "control_inputs": {
                    "value": "dependency_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cond_914": {
                "variable": {
                    "value": "update_factor_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_and(tf.equal(tf.mod(self.stats_step, self._kfac_update), tf.convert_to_tensor(0)), tf.greater_equal(self.stats_step, self._stats_accum_iter))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.group(*self.apply_stats_eigen(self.compute_stats_eigen()))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "no_op_wrapper",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_922": {
                "variable": {
                    "value": "update_factor_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.cond(tf.equal(queue.size(), tf.convert_to_tensor(0)), tf.no_op, lambda : tf.group(*self.apply_stats_eigen(dequeue_op())))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "no_op_wrapper",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_940": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(self.factor_step, tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "get_kfac_grad_op",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "grad_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_943": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr * (1.0 - self._momentum)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self._momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_987": {
                "variable": {
                    "value": "sgd_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "sgd_step_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign_add(self.sgd_step, 1)",
                            "Call"
                        ],
                        [
                            "tf.Print(sgd_step_op, [self.sgd_step, tf.convert_to_tensor('doing cold sgd step')])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[self.sgd_step, tf.convert_to_tensor('doing cold sgd step')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_999": {
                "x": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._cold_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_477": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(fprop_factor)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(bprop_factor)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_489": {
                "value": {
                    "value": "step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_490": {
                "value": {
                    "value": "computing stats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "greater_504": {
                "x": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._cold_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_526": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_527": {
                "*inputs": {
                    "value": "*[dequeue_stats_op()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "convert_to_tensor_557": {
                "value": {
                    "value": "step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_559": {
                "value": {
                    "value": "fac step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_561": {
                "value": {
                    "value": "sgd step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_563": {
                "value": {
                    "value": "Accum:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_564": {
                "value": {
                    "value": "accumulate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_565": {
                "value": {
                    "value": "Accum coeff:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_566": {
                "value": {
                    "value": "accumulate_coeff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_567": {
                "value": {
                    "value": "stat step:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_638": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Print_663": {
                "input_": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.convert_to_tensor('updated kfac factors')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_702": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient.op.inputs",
                            "Attribute"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [kernel_width * kernel_height, n_channels, depth])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assn_bias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assn_weights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, grad_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[kernel_width * kernel_height, n_channels, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_705": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient.op.inputs",
                            "Attribute"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [kernel_width * kernel_height, n_channels, depth])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assn_bias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assn_weights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, grad_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_710": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient.op.inputs",
                            "Attribute"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [kernel_width * kernel_height, n_channels, depth])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assn_bias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assn_weights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, grad_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_762": {
                "variable": {
                    "value": "damping",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._epsilon + weight_decay_coeff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / num_factors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_837": {
                "value": {
                    "value": "clip: ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_838": {
                "value": {
                    "value": " vFv: ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_839": {
                "ref": {
                    "value": "self.v_f_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "v_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "v_g + local_vg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_886": {
                "x": {
                    "value": "tf.mod(self.stats_step, self._kfac_update)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_887": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_910": {
                "*inputs": {
                    "value": "*[tf.assign_add(self.cold_step, 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "control_dependencies_933": {
                "control_inputs": {
                    "value": "[update_factor_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_986": {
                "control_inputs": {
                    "value": "[sgd_step_op, cold_optim_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_204": {
                "variable": {
                    "value": "factor_tensors[param][key + _concat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "factor_tensors[param][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_297": {
                "variable": {
                    "value": "slot_fprop_factor_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.diag(tf.ones([fprop_factor_size])) * self._diag_init_coeff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'KFAC_STATS/' + fprop_factor.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_378": {
                "input": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "svd_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / operator_height / operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1]) / operator_height / operator_width], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "extract_image_patches_417": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "svd_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / operator_height / operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1]) / operator_height / operator_width], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "[1, convkernel_size[0], convkernel_size[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fops.get_attr('strides')",
                            "Call"
                        ]
                    ]
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fops.get_attr('padding')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_434": {
                "variable": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1]) / operator_height / operator_width]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_438": {
                "variable": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_443": {
                "a": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "svd_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / operator_height / operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1]) / operator_height / operator_width], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "svd_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / operator_height / operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1]) / operator_height / operator_width], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_444": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(fprop_factor)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(bprop_factor)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_455": {
                "input": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bprop_factor * tf.cast(batch_size, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bprop_factor, [-1, chan]) * operator_height * operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_473": {
                "variable": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bprop_factor * tf.cast(batch_size, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bprop_factor, [-1, chan]) * operator_height * operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_480": {
                "a": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bprop_factor * tf.cast(batch_size, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bprop_factor, [-1, chan]) * operator_height * operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bprop_factor * tf.cast(batch_size, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bprop_factor, [-1, chan]) * operator_height * operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_481": {
                "x": {
                    "value": "tf.shape(bprop_factor)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_504": {
                "*inputs": {
                    "value": "*self._apply_stats(stats_updates, accumulate=True, accumulate_coeff=1.0 / self._stats_accum_iter)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_625": {
                "variable": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([stats_dim]), name='KFAC_FAC/' + stats_var.name.split(':')[0] + '/e', trainable=False)",
                            "Call"
                        ],
                        [
                            "eigen_decomposition[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(eigen_values, tf.float64)",
                            "Call"
                        ],
                        [
                            "detect_min_val(self.stats_eigen[stats]['e'], var, name='act', debug=KFAC_DEBUG)",
                            "Call"
                        ],
                        [
                            "detect_min_val(self.stats_eigen[stats]['e'], var, name='grad', debug=KFAC_DEBUG)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_626": {
                "variable": {
                    "value": "eigen_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eigen_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.diag(tf.ones([stats_dim])), name='KFAC_FAC/' + stats_var.name.split(':')[0] + '/Q', trainable=False)",
                            "Call"
                        ],
                        [
                            "eigen_decomposition[1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(eigen_vectors, tf.float64)",
                            "Call"
                        ],
                        [
                            "self.stats_eigen[stats]['Q']",
                            "Subscript"
                        ],
                        [
                            "self.stats_eigen[stats]['Q']",
                            "Subscript"
                        ],
                        [
                            "self.stats_eigen[stats]['Q']",
                            "Subscript"
                        ],
                        [
                            "self.stats_eigen[stats]['Q']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_639": {
                "input_": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.convert_to_tensor('computed factor eigen')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_663": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_764": {
                "input_tensor": {
                    "value": "tf.abs(e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_804": {
                "input_": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient.op.inputs",
                            "Attribute"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [kernel_width * kernel_height, n_channels, depth])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assn_bias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assn_weights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, grad_shape)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[c_plus_one - 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_827": {
                "x": {
                    "value": "tf.reduce_sum(tf.pow(grad, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_886": {
                "x1": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "self._kfac_update",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_886": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_914": {
                "x": {
                    "value": "tf.equal(tf.mod(self.stats_step, self._kfac_update), tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_922": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_940": {
                "x": {
                    "value": "self.factor_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_202": {
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.name.split(':')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_314": {
                "variable": {
                    "value": "slot_bprop_factor_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.diag(tf.ones([bprop_factor.get_shape()[-1]])) * self._diag_init_coeff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'KFAC_STATS/' + bprop_factor.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_404": {
                "variable": {
                    "value": "sqrt_s1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sqrt(S[:, 0, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_424": {
                "variable": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(fprop_factor, ksizes=[1, convkernel_size[0], convkernel_size[1], 1], strides=strides, rates=[1, 1, 1, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_462": {
                "variable": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bprop_factor * tf.cast(batch_size, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bprop_factor, [-1, chan]) * operator_height * operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_590": {
                "variable": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([stats_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC_FAC/ + stats_var.name.split(:)[0] + /e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_593": {
                "variable": {
                    "value": "eigen_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.diag(tf.ones([stats_dim]))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "KFAC_FAC/ + stats_var.name.split(:)[0] + /Q",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_639": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_664": {
                "value": {
                    "value": "updated kfac factors",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_719": {
                "input": {
                    "value": "grad_dict[var_assn_bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_765": {
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_772": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "e_tnorm / eig_tnorm_neg_list[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_777": {
                "variable": {
                    "value": "adjustment",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.pow(e_tnorm, num_factors - 1.0) / eig_tnorm_neg_list_prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / num_factors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_827": {
                "input_tensor": {
                    "value": "tf.pow(grad, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_914": {
                "x": {
                    "value": "tf.mod(self.stats_step, self._kfac_update)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_916": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_918": {
                "*inputs": {
                    "value": "*self.apply_stats_eigen(self.compute_stats_eigen())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cond_923": {
                "pred": {
                    "value": "tf.equal(queue.size(), tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*self.apply_stats_eigen(dequeue_op()))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "convert_to_tensor_941": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_957": {
                "pred": {
                    "value": "tf.greater_equal(self.stats_step, self._stats_accum_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "update_optim_op",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_960": {
                "pred": {
                    "value": "tf.greater_equal(self.sgd_step, self._cold_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "update_optim_op",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_988": {
                "value": {
                    "value": "doing cold sgd step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_277": {
                "variable": {
                    "value": "slot_fprop_factor_stats2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.diag(tf.ones([fprop_factor2_size])) * self._diag_init_coeff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'KFAC_STATS/' + fprop_factor.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_481": {
                "input": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bprop_factor * tf.cast(batch_size, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bprop_factor, [-1, chan]) * operator_height * operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_640": {
                "value": {
                    "value": "computed factor eigen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_827": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient.op.inputs",
                            "Attribute"
                        ],
                        [
                            "grad_dict[var]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(grad, [kernel_width * kernel_height, n_channels, depth])",
                            "Call"
                        ],
                        [
                            "tf.reshape(grad, [-1, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grad, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([grad, tf.expand_dims(grad_dict[var_assn_bias], 0)], 0)",
                            "Call"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad / coeffs",
                            "BinOp"
                        ],
                        [
                            "gmatmul(eigen_vectors, grad, transpose_a=False, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "gmatmul(grad, eigen_vectors, transpose_b=True, reduce_dim=idx)",
                            "Call"
                        ],
                        [
                            "grad_assn_weights",
                            "variable"
                        ],
                        [
                            "tf.reshape(grad, grad_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_add_910": {
                "ref": {
                    "value": "self.cold_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_914": {
                "x1": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "self._kfac_update",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_915": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_923": {
                "x": {
                    "value": "queue.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_951": {
                "pred": {
                    "value": "tf.greater(self.factor_step, tf.convert_to_tensor(0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : optim.apply_gradients(list(zip(u, varlist)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_957": {
                "x": {
                    "value": "self.stats_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._stats_accum_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_960": {
                "x": {
                    "value": "self.sgd_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._cold_iter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_298": {
                "diagonal": {
                    "value": "tf.ones([fprop_factor_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_401": {
                "tensor": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "svd_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / operator_height / operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1]) / operator_height / operator_width], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, kernel_height * kernel_width, chan]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_404": {
                "x": {
                    "value": "S[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_439": {
                "shape": {
                    "value": "[tf.shape(fprop_factor)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_590": {
                "shape": {
                    "value": "[stats_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_593": {
                "diagonal": {
                    "value": "tf.ones([stats_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_923": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_926": {
                "*inputs": {
                    "value": "*self.apply_stats_eigen(dequeue_op())",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "greater_951": {
                "x": {
                    "value": "self.factor_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.convert_to_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_298": {
                "shape": {
                    "value": "[fprop_factor_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_314": {
                "diagonal": {
                    "value": "tf.ones([bprop_factor.get_shape()[-1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_427": {
                "tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.extract_image_patches(fprop_factor, ksizes=[1, convkernel_size[0], convkernel_size[1], 1], strides=strides, rates=[1, 1, 1, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flatten_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_465": {
                "tensor": {
                    "value": "bprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['bpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "bprop_factor * tf.cast(batch_size, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(bprop_factor, [-1, chan]) * operator_height * operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(bprop_factor, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, chan]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_593": {
                "shape": {
                    "value": "[stats_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_778": {
                "x": {
                    "value": "e_tnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "num_factors - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_951": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_277": {
                "diagonal": {
                    "value": "tf.ones([fprop_factor2_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_314": {
                "shape": {
                    "value": "[bprop_factor.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_434": {
                "shape": {
                    "value": "[tf.shape(fprop_factor)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_277": {
                "shape": {
                    "value": "[fprop_factor2_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_439": {
                "input": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "svd_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / operator_height / operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1]) / operator_height / operator_width], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_435": {
                "input": {
                    "value": "fprop_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "factors[var]['fpropFactors_concat']",
                            "Subscript"
                        ],
                        [
                            "svd_factors[stats_var_dim]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(patches, [-1, flatten_size]) / operator_height / operator_width",
                            "BinOp"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1]) / operator_height / operator_width], 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([fprop_factor, tf.ones([tf.shape(fprop_factor)[0], 1])], 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(patches, [1, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/acktr/kfac_utils.py": {
        "tensorflow": {
            "cast_74": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vec > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_89": {
                "variable": {
                    "value": "eigen_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_90": {
                "variable": {
                    "value": "eigen_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "tensor_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(b_shape[reduce_dim]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tensor_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tensor_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tensor_a, tensor_b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tensor_a, tensor_b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "b_t_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_b.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_95": {
                "variable": {
                    "value": "input_mat_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : input_mat_clipped",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('odd ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(eigen_values, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(eigen_values, expanded_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eigen_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(eigen_values, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(eigen_values, expanded_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_25": {
                "variable": {
                    "value": "tensor_b",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tensor_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_35": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tensor_a, tensor_b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tensor_a, tensor_b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "tensor_a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(a_shape[reduce_dim])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tensor_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tensor_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tensor_a, tensor_b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tensor_a, tensor_b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "a_t_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_a.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_47": {
                "variable": {
                    "value": "tensor_a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tensor_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_57": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tensor_a, tensor_b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tensor_a, tensor_b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_95": {
                "x": {
                    "value": "tf.greater(eigen_ratio, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(eigen_ratio, -500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "a": {
                    "value": "tensor_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tensor_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tensor_b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_95": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_95": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-500",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Print_96": {
                "input_": {
                    "value": "input_mat_clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clipout_neg(input_mat, threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500)), lambda : input_mat_clipped, lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('odd ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]))",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('odd ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_98": {
                "value": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/base_class.py": {
        "tensorflow": {
            "FileWriter_1251": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path + '.zip'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(self.tensorboard_log_path, '{}_{}'.format(self.tb_log_name, latest_run_id))",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_275": {
                "variable": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_338": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "adam_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "pretrain",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_326": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(actions_ph - deterministic_actions_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_331": {
                "variable": {
                    "value": "actions_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(actions_ph, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_332": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "actions_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(actions_ph, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.action_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_333": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "actions_logits_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.stop_gradient(one_hot_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_337": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(actions_ph - deterministic_actions_ph))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=actions_logits_ph, labels=tf.stop_gradient(one_hot_actions))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_326": {
                "x": {
                    "value": "actions_ph - deterministic_actions_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_335": {
                "input": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(actions_ph, self.action_space.n)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/distributions.py": {
        "tensorflow": {
            "get_variable_240": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pi/logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_241": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_301": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_309": {
                "variable": {
                    "value": "exp_a_0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_310": {
                "variable": {
                    "value": "exp_a_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - tf.reduce_max(other.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_311": {
                "variable": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_a_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a_0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a_0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_312": {
                "variable": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_a_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a_1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_318": {
                "variable": {
                    "value": "exp_a_0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - tf.reduce_max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_319": {
                "variable": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_a_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a_0)",
                            "Call"
                        ],
                        [
                            "tf.exp(a_0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_389": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_392": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pi/logstd', shape=[1, self.size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_440": {
                "variable": {
                    "value": "self.probabilities",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_154": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_296": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_302": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.stop_gradient(one_hot_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_314": {
                "input_tensor": {
                    "value": "p_0 * (a_0 - tf.log(z_0) - a_1 + tf.log(z_1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_321": {
                "input_tensor": {
                    "value": "p_0 * (tf.log(z_0) - a_0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_327": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(uniform))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_356": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_359": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x, axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_362": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_365": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_368": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_409": {
                "input_tensor": {
                    "value": "other.logstd - self.logstd + (tf.square(self.std) + tf.square(self.mean - other.mean)) / (2.0 * tf.square(other.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_413": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_447": {
                "x": {
                    "value": "self.probabilities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_450": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=tf.cast(x, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_461": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.probabilities)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_466": {
                "x": {
                    "value": "math_ops.less(samples_from_uniform, self.probabilities)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_307": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_308": {
                "input_tensor": {
                    "value": "other.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_317": {
                "input_tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_326": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_405": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_450": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_455": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=other.logits, labels=self.probabilities)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_457": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.probabilities)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_461": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.probabilities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_465": {
                "input": {
                    "value": "self.probabilities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_466": {
                "x": {
                    "value": "samples_from_uniform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.probabilities))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.probabilities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_513": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_304": {
                "input": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_327": {
                "x": {
                    "value": "uniform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits), dtype=self.logits.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_349": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nvec",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_455": {
                "logits": {
                    "value": "other.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.probabilities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_457": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.probabilities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_314": {
                "x": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(exp_a_0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(exp_a_0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_321": {
                "x": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(exp_a_0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(exp_a_0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_403": {
                "input_tensor": {
                    "value": "tf.square((x - self.mean) / self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_404": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_418": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_451": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_359": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_403": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_404": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_409": {
                "x": {
                    "value": "self.mean - other.mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_410": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/input.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "observation_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Ob'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_21": {
                "variable": {
                    "value": "processed_observations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(observation_ph, ob_space.n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "observation_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,) + ob_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ob_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Ob'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_26": {
                "variable": {
                    "value": "processed_observations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "observation_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(batch_size,), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size,) + ob_space.shape, dtype=ob_space.dtype, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size, ob_space.n), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size, len(ob_space.nvec)), dtype=tf.int32, name=name)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_21": {
                "indices": {
                    "value": "observation_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(batch_size,), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size,) + ob_space.shape, dtype=ob_space.dtype, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size, ob_space.n), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size, len(ob_space.nvec)), dtype=tf.int32, name=name)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "ob_space.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "observation_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, ob_space.n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Ob'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_38": {
                "variable": {
                    "value": "processed_observations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "observation_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(batch_size,), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size,) + ob_space.shape, dtype=ob_space.dtype, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size, ob_space.n), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size, len(ob_space.nvec)), dtype=tf.int32, name=name)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "observation_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, len(ob_space.nvec))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Ob'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_43": {
                "variable": {
                    "value": "processed_observations",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cast(tf.one_hot(input_split, ob_space.nvec[i]), tf.float32) for (i, input_split) in enumerate(tf.split(observation_ph, len(ob_space.nvec), axis=-1))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_44": {
                "x": {
                    "value": "tf.one_hot(input_split, ob_space.nvec[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_44": {
                "indices": {
                    "value": "input_split",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "ob_space.nvec[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_45": {
                "value": {
                    "value": "observation_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(batch_size,), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size,) + ob_space.shape, dtype=ob_space.dtype, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size, ob_space.n), dtype=tf.int32, name=name)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=(batch_size, len(ob_space.nvec)), dtype=tf.int32, name=name)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "len(ob_space.nvec)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/misc_util.py": {
        "tensorflow": {
            "set_random_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/mpi_adam.py": {
        "tensorflow": {
            "Variable_94": {
                "variable": {
                    "value": "a_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "b_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "set_random_seed_92": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_102": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_106": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_107": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "tf.sin(b_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_96": {
                "x": {
                    "value": "a_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_96": {
                "x": {
                    "value": "b_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/mpi_running_mean_std.py": {
        "tensorflow": {
            "get_variable_17": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_35": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.cast(self._sumsq / self._count, tf.float32) - tf.square(self.mean), 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_35": {
                "x": {
                    "value": "tf.cast(self._sumsq / self._count, tf.float32) - tf.square(self.mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_20": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_25": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_35": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_42": {
                "ref": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_43": {
                "ref": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='var')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_44": {
                "ref": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float64, name='count')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/policies.py": {
        "tensorflow": {
            "placeholder_346": {
                "variable": {
                    "value": "self._dones_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_batch,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dones_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_348": {
                "variable": {
                    "value": "self._states_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "state_ph_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.n_env,) + tuple(state_shape)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "states_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "self._action_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ac_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_batch,) + ac_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "action_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_238": {
                "variable": {
                    "value": "self._policy_proba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_345": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_442": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.processed_obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_557": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_416": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_420": {
                "variable": {
                    "value": "extracted_features",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.processed_obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_441": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_242": {
                "variable": {
                    "value": "self._policy_proba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_561": {
                "structure": {
                    "value": "self.processed_obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_244": {
                "logits": {
                    "value": "categorical.flatparam()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/self_imitation.py": {
        "tensorflow": {
            "placeholder_222": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "return",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_223": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_307": {
                "variable": {
                    "value": "mask_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.R - self.model_qf1 > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(self.R)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(self.R)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_309": {
                "variable": {
                    "value": "mask_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.R - self.model_qf2 > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(self.R)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(self.R)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_312": {
                "variable": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.num_valid_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.min_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_322": {
                "variable": {
                    "value": "v_estimate_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model_qf1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_323": {
                "variable": {
                    "value": "v_estimate_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model_qf2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_334": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss * self.W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_336": {
                "variable": {
                    "value": "(grads, grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss * self.W, params)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_308": {
                "input": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_308": {
                "input": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_310": {
                "input": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_310": {
                "input": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_314": {
                "input": {
                    "value": "tf.clip_by_value(self.R - self.model_qf1, 0.0, self.clip)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_316": {
                "input": {
                    "value": "tf.clip_by_value(self.R - self.model_qf2, 0.0, self.clip)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_318": {
                "input_tensor": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_325": {
                "t": {
                    "value": "v_estimate_1 - v_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_326": {
                "t": {
                    "value": "v_estimate_2 - v_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "self.W * v_estimate_1 * tf.stop_gradient(delta_1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_328": {
                "input_tensor": {
                    "value": "self.W * v_estimate_2 * tf.stop_gradient(delta_2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_311": {
                "input_tensor": {
                    "value": "mask_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(self.R - self.model_qf2 > 0.0, tf.ones_like(self.R), tf.zeros_like(self.R))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_315": {
                "t": {
                    "value": "self.R - self.model_qf1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_317": {
                "t": {
                    "value": "self.R - self.model_qf2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_327": {
                "input": {
                    "value": "delta_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(v_estimate_1 - v_target, -self.clip, 0) * mask_1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_328": {
                "input": {
                    "value": "delta_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(v_estimate_2 - v_target, -self.clip, 0) * mask_2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/tf_layers.py": {
        "tensorflow": {
            "split_158": {
                "variable": {
                    "value": "(cell_state, hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "cell_state_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[cell_state, hidden])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_178": {
                "variable": {
                    "value": "cell_state_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[cell_state, hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_195": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input_tensor - mean) / tf.sqrt(variance + epsilon)",
                            "BinOp"
                        ],
                        [
                            "input_tensor * gain + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, n_hidden])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input_tensor - mean) / tf.sqrt(variance + epsilon)",
                            "BinOp"
                        ],
                        [
                            "input_tensor * gain + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, n_hidden])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(output, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "activ_fn(output)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "wshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_height, filter_width, n_input, n_filters]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "bias_var_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_filters] if one_dim_bias else [1, n_filters, 1, 1]",
                            "IfExp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_input, n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(init_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_143": {
                "variable": {
                    "value": "weight_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_input, n_hidden * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "weight_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden, n_hidden * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_167": {
                "variable": {
                    "value": "(in_gate, forget_gate, out_gate, cell_candidate)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ln(tf.matmul(_input, weight_x), gain_x, bias_x) + _ln(tf.matmul(hidden, weight_h), gain_h, bias_h) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(_input, weight_x) + tf.matmul(hidden, weight_h) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_168": {
                "variable": {
                    "value": "in_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(in_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(forget_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "out_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(out_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_171": {
                "variable": {
                    "value": "cell_candidate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cell_candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(cell_candidate)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', bias_var_shape, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.reshape(bias, bshape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_hidden], initializer=tf.constant_initializer(init_bias))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [n_hidden * 4], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "bshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, 1, n_filters]",
                            "List"
                        ],
                        [
                            "[1, n_filters, 1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_149": {
                "variable": {
                    "value": "gain_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "bias_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bx",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "gain_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "bias_h",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bh",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_155": {
                "variable": {
                    "value": "gain_c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "bias_c",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_196": {
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input_tensor - mean) / tf.sqrt(variance + epsilon)",
                            "BinOp"
                        ],
                        [
                            "input_tensor * gain + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, n_hidden])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', wshape, initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [n_input, n_hidden], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NHWC'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_125": {
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input_tensor - mean) / tf.sqrt(variance + epsilon)",
                            "BinOp"
                        ],
                        [
                            "input_tensor * gain + bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, n_hidden])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', wshape, initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [n_input, n_hidden], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_104": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_124": {
                "value": {
                    "value": "init_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_145": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_174": {
                "x": {
                    "value": "_ln(cell_state, gain_c, bias_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_176": {
                "x": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_state * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "forget_gate * cell_state + in_gate * cell_candidate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_149": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_150": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_152": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_153": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_155": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_156": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_166": {
                "a": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "out_gate * tf.tanh(_ln(cell_state, gain_c, bias_c))",
                            "BinOp"
                        ],
                        [
                            "out_gate * tf.tanh(cell_state)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [n_hidden, n_hidden * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_163": {
                "a": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weight_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wx', [n_input, n_hidden * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_164": {
                "a": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden * (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "out_gate * tf.tanh(_ln(cell_state, gain_c, bias_c))",
                            "BinOp"
                        ],
                        [
                            "out_gate * tf.tanh(cell_state)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [n_hidden, n_hidden * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/common/tf_util.py": {
        "tensorflow": {
            "exp_112": {
                "variable": {
                    "value": "exp_a_0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - tf.reduce_max(logits, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_113": {
                "variable": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "exp_a_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(a_0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_169": {
                "variable": {
                    "value": "(_, var_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q_true",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_170": {
                "variable": {
                    "value": "(_, var_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q_true - q_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_191": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(os.getenv('RCALL_NUM_CPU', multiprocessing.cpu_count()))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_381": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "tensor_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor_batch, [n_batch, n_steps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_batch, [n_batch, n_steps, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_batch, n_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "tensor_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor_batch, [n_batch, n_steps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_batch, [n_batch, n_steps, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_batch, n_steps, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_83": {
                "condition": {
                    "value": "tf.abs(tensor) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(tensor) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(tensor) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_100": {
                "input": {
                    "value": "logits - tf.log(-tf.log(noise))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "p_0 * (tf.log(z_0) - a_0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "input_tensor": {
                    "value": "tf.square(pred - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_136": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(tensor), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_session_240": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_308": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_384": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_402": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_409": {
                "variable": {
                    "value": "self.operation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_427": {
                "variable": {
                    "value": "self.operation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_collection_449": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name.replace(scope + '/', new_scope, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_459": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name.replace(scope + '/', new_scope, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_38": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "tf.concat(axis=1, values=tensor_sequence)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "tf.stack(values=tensor_sequence, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_111": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_126": {
                "x": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_136": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(tensor), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InteractiveSession_198": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_200": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variables_initializer_242": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_default_session_322": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_494": {
                "name_or_scope": {
                    "value": "environment_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_38": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tensor_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor_batch, [n_batch, n_steps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor_batch, [n_batch, n_steps, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_53": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "tensor_sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_55": {
                "values": {
                    "value": "tensor_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_84": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_85": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_100": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_136": {
                "input_tensor": {
                    "value": "tf.square(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Session_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_383": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_session_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_414": {
                "main": {
                    "value": "self.operation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{self.theta: theta}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_default_session_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_432": {
                "main": {
                    "value": "self.operation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_502": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='episode_reward', simple_value=rew_acc[env_idx])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_86": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_115": {
                "x": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(exp_a_0, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_136": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_385": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_407": {
                "ref": {
                    "value": "_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Summary_506": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='episode_reward', simple_value=rew_acc[env_idx])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_407": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_sequence[0].get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_427": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_385": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/ddpg/ddpg.py": {
        "tensorflow": {
            "reduce_mean_72": {
                "variable": {
                    "value": "tensor_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_73": {
                "variable": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor - tensor_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "x": {
                    "value": "reduce_var(tensor, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "devs_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tensor - tensor_mean)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "group_139": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clip_by_value_515": {
                "variable": {
                    "value": "normalized_critic_target_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.critic_target, self.ret_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_517": {
                "variable": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.normalized_critic_tf - normalized_critic_target_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_547": {
                "variable": {
                    "value": "self.old_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_std",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_549": {
                "variable": {
                    "value": "self.old_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_99": {
                "*inputs": {
                    "value": "*soft_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Graph_328": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_490": {
                "variable": {
                    "value": "self.adaptive_policy_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(self.actor_tf - adaptive_actor_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_95": {
                "ref": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "assign_96": {
                "ref": {
                    "value": "target_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1.0 - tau) * target_var + tau * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "merge_all_455": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_475": {
                "name_or_scope": {
                    "value": "noise",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_478": {
                "name_or_scope": {
                    "value": "noise_adapt",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_481": {
                "name_or_scope": {
                    "value": "noise_update_func",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_498": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_517": {
                "x": {
                    "value": "self.normalized_critic_tf - normalized_critic_target_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_570": {
                "input_tensor": {
                    "value": "self.critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_572": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_574": {
                "input_tensor": {
                    "value": "self.actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunOptions_697": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_698": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_723": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_132": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var + tf.random_normal(tf.shape(var), mean=0.0, stddev=param_noise_stddev)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_137": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "clip_by_value_359": {
                "variable": {
                    "value": "normalized_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.policy_tf.processed_obs, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_361": {
                "variable": {
                    "value": "normalized_next_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.target_policy.processed_obs, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_381": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_383": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_384": {
                "variable": {
                    "value": "self.critic_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "critic_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_385": {
                "variable": {
                    "value": "self.param_noise_stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_490": {
                "input_tensor": {
                    "value": "tf.square(self.actor_tf - adaptive_actor_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_591": {
                "input_tensor": {
                    "value": "self.obs_rms.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_595": {
                "input_tensor": {
                    "value": "self.perturbed_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_388": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_398": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_415": {
                "name": {
                    "value": "critic_target",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.critic_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_425": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_426": {
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_427": {
                "name": {
                    "value": "param_noise_stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.param_noise_stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_437": {
                "name_or_scope": {
                    "value": "Adam_mpi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_440": {
                "name": {
                    "value": "actor_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.actor_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_441": {
                "name": {
                    "value": "critic_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_490": {
                "x": {
                    "value": "self.actor_tf - adaptive_actor_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_404": {
                "t": {
                    "value": "self.normalized_critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_408": {
                "t": {
                    "value": "self.normalized_critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_415": {
                "input_tensor": {
                    "value": "self.critic_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_417": {
                "name": {
                    "value": "critic_target",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.critic_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_426": {
                "input_tensor": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_427": {
                "input_tensor": {
                    "value": "self.param_noise_stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_430": {
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_431": {
                "name": {
                    "value": "param_noise_stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.param_noise_stddev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_133": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "obs_rms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_345": {
                "name_or_scope": {
                    "value": "ret_rms",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_433": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.obs_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_435": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.obs_train",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/ddpg/main.py": {
        "tensorflow": {
            "reset_default_graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/ddpg/policies.py": {
        "tensorflow": {
            "tanh_140": {
                "variable": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(pi_h, self.ac_space.shape[0], name=scope, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_165": {
                "variable": {
                    "value": "qvalue_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(qf_h, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(qf_h, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "self.activ(qf_h)",
                            "Call"
                        ],
                        [
                            "tf.concat([qf_h, action], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf_output",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qf'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qf'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_134": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_136": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(pi_h, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(pi_h, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "self.activ(pi_h)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qf'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qf'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_155": {
                "variable": {
                    "value": "qf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_157": {
                "variable": {
                    "value": "qf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(qf_h, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(qf_h, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "self.activ(qf_h)",
                            "Call"
                        ],
                        [
                            "tf.concat([qf_h, action], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_140": {
                "inputs": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(pi_h, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(pi_h, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "self.activ(pi_h)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.ac_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qf'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qf'",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_162": {
                "variable": {
                    "value": "qf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[qf_h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_166": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_141": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/deepq/build_graph.py": {
        "tensorflow": {
            "get_variable_139": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_143": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy.q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_149": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=n_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=n_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(policy.q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(policy.q_values, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_151": {
                "variable": {
                    "value": "output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_185": {
                "variable": {
                    "value": "update_param_noise_threshold_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_186": {
                "variable": {
                    "value": "update_param_noise_scale_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_187": {
                "variable": {
                    "value": "reset_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "reset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_190": {
                "variable": {
                    "value": "param_noise_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "param_noise_threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_threshold",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.05)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(policy.q_values) * (tf.log(tf.nn.softmax(policy.q_values)) - tf.log(tf.nn.softmax(adaptive_policy.q_values)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "mean_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.nn.softmax(policy.q_values) * (tf.log(tf.nn.softmax(policy.q_values)) - tf.log(tf.nn.softmax(adaptive_policy.q_values))), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_262": {
                "variable": {
                    "value": "perturbed_deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbable_policy.q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_263": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy.q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_268": {
                "variable": {
                    "value": "perturbed_stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=n_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=n_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "perturbed_deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(perturbable_policy.q_values, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_269": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=n_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=n_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(policy.q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(policy.q_values, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_271": {
                "variable": {
                    "value": "perturbed_output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : perturbed_stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_273": {
                "variable": {
                    "value": "output_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "merge_all_449": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_80": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_359": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_360": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_372": {
                "variable": {
                    "value": "q_func_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name + '/model'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_377": {
                "variable": {
                    "value": "target_q_func_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name + '/target_q_func'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_391": {
                "variable": {
                    "value": "act_t_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_392": {
                "variable": {
                    "value": "rew_t_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_393": {
                "variable": {
                    "value": "done_mask_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "done",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_394": {
                "variable": {
                    "value": "importance_weights_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_397": {
                "variable": {
                    "value": "q_t_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "step_model.q_values * tf.one_hot(act_t_ph, n_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_413": {
                "variable": {
                    "value": "weighted_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "importance_weights_ph * errors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_426": {
                "variable": {
                    "value": "update_target_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_target_expr",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_variable_scope_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "policy.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_147": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_152": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "perturbed_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_229": {
                "*inputs": {
                    "value": "*perturb_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "adaptive_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cond_250": {
                "variable": {
                    "value": "update_scale_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mean_kl < param_noise_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale * 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale / 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_258": {
                "pred": {
                    "value": "update_param_noise_threshold_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_param_noise_threshold_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_threshold",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_264": {
                "input": {
                    "value": "policy.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_266": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_274": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_277": {
                "pred": {
                    "value": "reset_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='reset')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : perturb_vars(original_scope='model', perturbed_scope='perturbed_model/model')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*[])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_279": {
                "pred": {
                    "value": "update_param_noise_scale_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='update_param_noise_scale')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : update_scale()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Variable(0.0, trainable=False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_362": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'deepq'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_389": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_401": {
                "variable": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "double_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "double_policy.q_values",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_402": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target_policy.q_values * tf.one_hot(q_tp1_best_using_online_net, n_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_404": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target_policy.q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_415": {
                "name": {
                    "value": "td_error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(td_error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_416": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "weighted_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(importance_weights_ph * errors)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_435": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_436": {
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(rew_t_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_437": {
                "name": {
                    "value": "importance_weights",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(importance_weights_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_139": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_148": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_189": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_190": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_192": {
                "value": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_221": {
                "variable": {
                    "value": "operation",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var + tf.random_normal(shape=tf.shape(var), mean=0.0, stddev=param_noise_scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_226": {
                "variable": {
                    "value": "operation",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_238": {
                "logits": {
                    "value": "policy.q_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_249": {
                "control_inputs": {
                    "value": "[perturb_for_adaption]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_267": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "step_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('step_model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_375": {
                "name_or_scope": {
                    "value": "target_q_func",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_411": {
                "input": {
                    "value": "q_t_selected_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rew_t_ph + gamma * q_tp1_best_masked",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_415": {
                "input_tensor": {
                    "value": "td_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_t_selected - tf.stop_gradient(q_t_selected_target)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_419": {
                "name": {
                    "value": "td_error",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "td_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_t_selected - tf.stop_gradient(q_t_selected_target)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_436": {
                "input_tensor": {
                    "value": "rew_t_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None], name='reward')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_437": {
                "input_tensor": {
                    "value": "importance_weights_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None], name='weight')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_440": {
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rew_t_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None], name='reward')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_441": {
                "name": {
                    "value": "importance_weights",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "importance_weights_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None], name='weight')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_239": {
                "x": {
                    "value": "tf.nn.softmax(adaptive_policy.q_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_278": {
                "*inputs": {
                    "value": "*[]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_279": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "double_q",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('double_q')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_397": {
                "indices": {
                    "value": "act_t_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='action')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ac_space.nvec if isinstance(ac_space, MultiDiscrete) else ac_space.n",
                            "IfExp"
                        ],
                        [
                            "ac_space.nvec if isinstance(ac_space, MultiDiscrete) else ac_space.n",
                            "IfExp"
                        ],
                        [
                            "ac_space.nvec if isinstance(ac_space, MultiDiscrete) else ac_space.n",
                            "IfExp"
                        ]
                    ]
                }
            },
            "image_443": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "obs_phs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_239": {
                "logits": {
                    "value": "adaptive_policy.q_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_402": {
                "indices": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(double_q_values, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ac_space.nvec if isinstance(ac_space, MultiDiscrete) else ac_space.n",
                            "IfExp"
                        ],
                        [
                            "ac_space.nvec if isinstance(ac_space, MultiDiscrete) else ac_space.n",
                            "IfExp"
                        ],
                        [
                            "ac_space.nvec if isinstance(ac_space, MultiDiscrete) else ac_space.n",
                            "IfExp"
                        ]
                    ]
                }
            },
            "histogram_445": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "obs_phs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_scope_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_433": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_norm_clipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_222": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/deepq/dqn.py": {
        "tensorflow": {
            "Graph_124": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_129": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_150": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_284": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_285": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/deepq/policies.py": {
        "tensorflow": {
            "softmax_43": {
                "variable": {
                    "value": "self.policy_proba",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.q_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_layers.fully_connected(action_out, num_outputs=self.n_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_109": {
                "variable": {
                    "value": "extracted_features",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.processed_obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/gail/adversary.py": {
        "tensorflow": {
            "placeholder_68": {
                "variable": {
                    "value": "self.generator_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "observation_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observations_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.generator_acs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "action_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.actions_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.expert_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "observation_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_observations_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.expert_acs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "action_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.actions_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "generator_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.nn.sigmoid(generator_logits) < 0.5, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "variable": {
                    "value": "expert_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.nn.sigmoid(expert_logits) > 0.5, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_85": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(generator_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=generator_logits, labels=tf.zeros_like(generator_logits))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(generator_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_88": {
                "variable": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(expert_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=expert_logits, labels=tf.ones_like(expert_logits))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(expert_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_91": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[generator_logits, expert_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logit_bernoulli_entropy(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_session_153": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_20": {
                "features": {
                    "value": "-input_tensor",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs, actions_ph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_143": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_80": {
                "x": {
                    "value": "tf.nn.sigmoid(generator_logits) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_81": {
                "x": {
                    "value": "tf.nn.sigmoid(expert_logits) > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_99": {
                "x": {
                    "value": "1 - tf.nn.sigmoid(generator_logits) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_126": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "acs_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_127": {
                "variable": {
                    "value": "actions_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(acs_ph, self.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_31": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([generator_logits, expert_logits], 0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(p_h2, 1, activation_fn=tf.identity)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "x": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_81": {
                "x": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "x": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/logger.py": {
        "tensorflow": {
            "Summary_233": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[summary_val(k, v) for (k, v) in kvs.items() if valid_float_value(v)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Event_234": {
                "variable": {
                    "value": "event",
                    "type": "variable",
                    "possible_values": []
                },
                "wall_time": {
                    "value": "time.time()",
                    "type": "Call",
                    "possible_values": []
                },
                "summary": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.summary_iterator(fname)",
                            "Call"
                        ],
                        [
                            "tf.Summary(value=[summary_val(k, v) for (k, v) in kvs.items() if valid_float_value(v)])",
                            "Call"
                        ]
                    ]
                }
            },
            "summary_iterator_730": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ]
                    ]
                }
            },
            "as_bytes_230": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.abspath(folder), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/ppo1/pposgd_simple.py": {
        "tensorflow": {
            "Graph_101": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_190": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_pi.proba_distribution.kl(self.policy_pi.proba_distribution)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.proba_distribution.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_138": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.policy_pi.proba_distribution.logp(action_ph) - old_pi.proba_distribution.logp(action_ph)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_147": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.policy_pi.value_flat - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "oldpi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_152": {
                "name": {
                    "value": "entropy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pol_entpen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.entcoeff * meanent",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_153": {
                "name": {
                    "value": "policy_gradient_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pol_surr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_mean(tf.minimum(surr1, surr2))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "scalar_154": {
                "name": {
                    "value": "value_function_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(self.policy_pi.value_flat - ret))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_155": {
                "name": {
                    "value": "approximate_kullback-leibler",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(kloldnew)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_156": {
                "name": {
                    "value": "clip_factor",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "clip_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_param * lrmult",
                            "BinOp"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_157": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pol_surr + pol_entpen + vf_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "Adam_mpi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_169": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_170": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.optim_stepsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_171": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(atarg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_172": {
                "name": {
                    "value": "clip_range",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.clip_param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_143": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.policy_pi.proba_distribution.logp(action_ph) - old_pi.proba_distribution.logp(action_ph))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "input_tensor": {
                    "value": "tf.minimum(surr1, surr2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_147": {
                "x": {
                    "value": "self.policy_pi.value_flat - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "input_tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_170": {
                "input_tensor": {
                    "value": "self.optim_stepsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "input_tensor": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ],
                        [
                            "(atarg - atarg.mean()) / atarg.std()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_172": {
                "input_tensor": {
                    "value": "self.clip_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_175": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_176": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.optim_stepsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_177": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ],
                        [
                            "(atarg - atarg.mean()) / atarg.std()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_178": {
                "name": {
                    "value": "clip_range",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.clip_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_146": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_180": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.obs_ph",
                            "Attribute"
                        ]
                    ]
                }
            },
            "histogram_182": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.obs_ph",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_162": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RunOptions_286": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_287": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/ppo2/ppo2.py": {
        "tensorflow": {
            "Graph_117": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_206": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_242": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_285": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_286": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advs_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_142": {
                "variable": {
                    "value": "self.old_neglog_pac_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_neglog_pac_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "self.old_vpred_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_vpred_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "self.clip_range_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "clip_range_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "variable": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "train_model.proba_distribution.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_176": {
                "variable": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred - self.rewards_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_177": {
                "variable": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vpred_clipped - self.rewards_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_180": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.old_neglog_pac_ph - neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "self.pg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(pg_losses, pg_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "self.clipfrac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.greater(tf.abs(ratio - 1.0), self.clip_range_ph), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_202": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pg_loss - self.entropy * self.ent_coef + self.vf_loss * self.vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_240": {
                "session": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "train_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "custom_getter": {
                    "value": "tf_util.outer_scope_getter('train_model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_190": {
                "name": {
                    "value": "entropy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_191": {
                "name": {
                    "value": "policy_gradient_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pg_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_192": {
                "name": {
                    "value": "value_function_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vf_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_193": {
                "name": {
                    "value": "approximate_kullback-leibler",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.approxkl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_194": {
                "name": {
                    "value": "clip_factor",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.clipfrac",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_195": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pg_loss - self.entropy * self.ent_coef + self.vf_loss * self.vf_coef",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_198": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_204": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, self.params)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, self.params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_212": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.rewards_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_213": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_214": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.advs_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_215": {
                "name": {
                    "value": "clip_range",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.clip_range_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_219": {
                "name": {
                    "value": "old_neglog_action_probability",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.old_neglog_pac_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_220": {
                "name": {
                    "value": "old_value_pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.old_vpred_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "self.clip_range_vf_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "clip_range_vf_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_178": {
                "input_tensor": {
                    "value": "tf.maximum(vf_losses1, vf_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_182": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.old_neglog_pac_ph - neglogpac)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - self.clip_range_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + self.clip_range_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_184": {
                "x": {
                    "value": "pg_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.advs_ph * ratio",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pg_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.advs_ph * tf.clip_by_value(ratio, 1.0 - self.clip_range_ph, 1.0 + self.clip_range_ph)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_185": {
                "input_tensor": {
                    "value": "tf.square(neglogpac - self.old_neglog_pac_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_186": {
                "x": {
                    "value": "tf.greater(tf.abs(ratio - 1.0), self.clip_range_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "input_tensor": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_213": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_214": {
                "input_tensor": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_215": {
                "input_tensor": {
                    "value": "self.clip_range_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_217": {
                "name": {
                    "value": "clip_range_vf",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.clip_range_vf_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_219": {
                "input_tensor": {
                    "value": "self.old_neglog_pac_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_220": {
                "input_tensor": {
                    "value": "self.old_vpred_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_223": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_224": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_225": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.advs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_226": {
                "name": {
                    "value": "clip_range",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.clip_range_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_227": {
                "name": {
                    "value": "old_neglog_action_probability",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.old_neglog_pac_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_228": {
                "name": {
                    "value": "old_value_pred",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.old_vpred_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_173": {
                "t": {
                    "value": "train_model.value_flat - self.old_vpred_ph",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.clip_range_vf_ph",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clip_range_vf_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_178": {
                "x": {
                    "value": "vf_losses1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpred - self.rewards_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vf_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(vpred_clipped - self.rewards_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_185": {
                "x": {
                    "value": "neglogpac - self.old_neglog_pac_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_186": {
                "x": {
                    "value": "tf.abs(ratio - 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.clip_range_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "input_tensor": {
                    "value": "self.clip_range_vf_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_230": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_model.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_232": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_model.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_186": {
                "x": {
                    "value": "ratio - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_201": {
                "name": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/sac/policies.py": {
        "tensorflow": {
            "cast_39": {
                "variable": {
                    "value": "clip_up",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_ > upper",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "clip_low",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_ < lower",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "deterministic_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_ + tf.random_normal(tf.shape(mu_)) * std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_25": {
                "input_tensor": {
                    "value": "pre_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * (((input_ - mu_) / (tf.exp(log_std) + EPS)) ** 2 + 2 * log_std + np.log(2 * np.pi))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "log_std + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.log(1 - policy ** 2 + EPS)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_212": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pi_h, self.ac_space.shape[0], activation=None)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(log_std, LOG_STD_MIN, LOG_STD_MAX)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "LOG_STD_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "LOG_STD_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "exp_214": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pi_h, self.ac_space.shape[0], activation=None)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(log_std, LOG_STD_MIN, LOG_STD_MAX)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_41": {
                "input": {
                    "value": "(upper - input_) * clip_up + (lower - input_) * clip_low",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_63": {
                "x": {
                    "value": "1 - policy ** 2 + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_198": {
                "variable": {
                    "value": "self.act_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "mlp(pi_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.ac_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_201": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "mlp(pi_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.ac_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_194": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_236": {
                "variable": {
                    "value": "critics_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_247": {
                "variable": {
                    "value": "qf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[critics_h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_242": {
                "variable": {
                    "value": "value_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "vf_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(critics_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_252": {
                "variable": {
                    "value": "qf1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_256": {
                "variable": {
                    "value": "qf2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_216": {
                "input": {
                    "value": "mu_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "qf2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_24": {
                "x": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pi_h, self.ac_space.shape[0], activation=None)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(log_std, LOG_STD_MIN, LOG_STD_MAX)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/sac/sac.py": {
        "tensorflow": {
            "Graph_135": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_315": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.actions_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "variable": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.policy_tf.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_214": {
                "variable": {
                    "value": "min_qf_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qf1_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "qf2_pi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_217": {
                "variable": {
                    "value": "q_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma * self.value_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_237": {
                "variable": {
                    "value": "policy_kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.ent_coef * logp_pi - qf1_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_248": {
                "variable": {
                    "value": "v_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_qf_pi - self.ent_coef * logp_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_255": {
                "variable": {
                    "value": "policy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_259": {
                "variable": {
                    "value": "value_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "variable": {
                    "value": "self.log_ent_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_ent_coef",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.log(init_value).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_199": {
                "variable": {
                    "value": "self.ent_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_ent_coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_233": {
                "variable": {
                    "value": "entropy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_295": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy_kl_loss",
                            "variable"
                        ]
                    ]
                }
            },
            "scalar_296": {
                "name": {
                    "value": "qf1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_mean((q_backup - qf1) ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_297": {
                "name": {
                    "value": "qf2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_mean((q_backup - qf2) ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_298": {
                "name": {
                    "value": "value_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "value_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_mean((value_fn - v_backup) ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_299": {
                "name": {
                    "value": "entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_304": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_224": {
                "input_tensor": {
                    "value": "(q_backup - qf1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_225": {
                "input_tensor": {
                    "value": "(q_backup - qf2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_249": {
                "input_tensor": {
                    "value": "(value_fn - v_backup) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_267": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.tau) * target + self.tau * source",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_272": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_278": {
                "control_inputs": {
                    "value": "[policy_train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_301": {
                "name": {
                    "value": "ent_coef_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ent_coef_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_mean(self.log_ent_coef * tf.stop_gradient(logp_pi + self.target_entropy))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "scalar_302": {
                "name": {
                    "value": "ent_coef",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ent_coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_304": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_231": {
                "input_tensor": {
                    "value": "self.log_ent_coef * tf.stop_gradient(logp_pi + self.target_entropy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_289": {
                "control_inputs": {
                    "value": "[train_values_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_232": {
                "input": {
                    "value": "logp_pi + self.target_entropy",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/td3/policies.py": {
        "tensorflow": {
            "stack_365": {
                "variable": {
                    "value": "self.qfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.qfs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_388": {
                "variable": {
                    "value": "self.qfs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.qfs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_413": {
                "variable": {
                    "value": "qfs_set",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "qfs_set[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_variable_519": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "curl_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(latent_dim, latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_529": {
                "variable": {
                    "value": "Wz",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(z_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_530": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z_a",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Wz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.W, tf.transpose(z_pos))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_542": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(z_a, Wz)",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_max(logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.compute_logits(z_anchor, z_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_135": {
                "variable": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "mlp(pi_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ],
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "mlp(pi_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.ac_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "qf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[critics_h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_177": {
                "variable": {
                    "value": "qf_h_duel",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[critics_h_duel, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(output, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([output, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "self.activ_fn(output)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(output, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([output, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "self.activ_fn(output)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_267": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(output, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([output, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "self.activ_fn(output)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(output, layer_size, name='fc' + str(i))",
                            "Call"
                        ],
                        [
                            "tf.concat([output, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(output, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "self.activ_fn(output)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'fc' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_287": {
                "variable": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "mlp(pi_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ],
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "mlp(pi_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.ac_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_301": {
                "variable": {
                    "value": "qf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[critics_h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_328": {
                "variable": {
                    "value": "qf_h_duel",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[critics_h_duel, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_356": {
                "variable": {
                    "value": "qf_h_many",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[critics_h_many, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_378": {
                "variable": {
                    "value": "qf_h_many",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[critics_h_many, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_402": {
                "variable": {
                    "value": "qf_h_many",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[critics_h_many, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_537": {
                "a": {
                    "value": "z_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_545": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=self.labels, logits=logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_550": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight * losses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_131": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_147": {
                "variable": {
                    "value": "critics_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_155": {
                "variable": {
                    "value": "qf1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_159": {
                "variable": {
                    "value": "qf2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_174": {
                "variable": {
                    "value": "critics_h_duel",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_182": {
                "variable": {
                    "value": "qf1_duel",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf1_h_duel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h_duel, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_duel, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_187": {
                "variable": {
                    "value": "qf2_duel",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf2_h_duel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h_duel, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_duel, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_252": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_269": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_283": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_294": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_298": {
                "variable": {
                    "value": "critics_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_306": {
                "variable": {
                    "value": "qf1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_310": {
                "variable": {
                    "value": "qf2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_325": {
                "variable": {
                    "value": "critics_h_duel",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_333": {
                "variable": {
                    "value": "qf1_duel",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf1_h_duel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h_duel, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_duel, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_338": {
                "variable": {
                    "value": "qf2_duel",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf2_h_duel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp(qf_h_duel, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_duel, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_350": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_354": {
                "variable": {
                    "value": "critics_h_many",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_376": {
                "variable": {
                    "value": "critics_h_many",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_396": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'qvalues_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'pi'",
                            "Method Argument"
                        ],
                        [
                            "'values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'duel_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ],
                        [
                            "'many_values_fn'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_400": {
                "variable": {
                    "value": "critics_h_many",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_529": {
                "a": {
                    "value": "z_pos",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_533": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(z_a, Wz)",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_max(logits, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.compute_logits(z_anchor, z_pos)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_537": {
                "a": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "qf2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "qf2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "qf2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "qf1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_336": {
                "name_or_scope": {
                    "value": "qf2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_363": {
                "variable": {
                    "value": "qf_many",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'qf_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_386": {
                "variable": {
                    "value": "qf_many",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'qf_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_409": {
                "variable": {
                    "value": "qf_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf_h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ],
                        [
                            "self.mlp_td3(qf_h_many, action)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'qf_{}_repr'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_411": {
                "variable": {
                    "value": "qf_many",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "qf_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(qf_h2, latent_dim, name='qf_{}_repr'.format(i))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'qf_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_360": {
                "name_or_scope": {
                    "value": "'qf_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_383": {
                "name_or_scope": {
                    "value": "'qf_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_407": {
                "name_or_scope": {
                    "value": "'qf_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/td3/td3.py": {
        "tensorflow": {
            "Graph_127": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_244": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.actions_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_168": {
                "variable": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(target_policy_out), stddev=self.target_policy_noise)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(target_noise, -self.target_noise_clip, self.target_noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.target_noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.target_noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_170": {
                "variable": {
                    "value": "noisy_target_action",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_policy_out + target_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_177": {
                "variable": {
                    "value": "min_qf_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qf1_target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "qf2_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_180": {
                "variable": {
                    "value": "q_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_197": {
                "variable": {
                    "value": "policy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_203": {
                "variable": {
                    "value": "qvalues_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_230": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "name": {
                    "value": "qf1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((q_backup - qf1) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_232": {
                "name": {
                    "value": "qf2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((q_backup - qf2) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_233": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_167": {
                "input": {
                    "value": "target_policy_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_policy_tf.make_actor(self.processed_next_obs_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_192": {
                "input_tensor": {
                    "value": "qf1_pi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_212": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.tau) * target + self.tau * source",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_218": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_233": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/td3/td3_doubletwin.py": {
        "tensorflow": {
            "Graph_127": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_296": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.actions_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_173": {
                "variable": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(target_policy_out), stddev=self.target_policy_noise)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(target_noise, -self.target_noise_clip, self.target_noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.target_noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.target_noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_175": {
                "variable": {
                    "value": "noisy_target_action",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_policy_out + target_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_186": {
                "variable": {
                    "value": "min_qf_target_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qf1_a_target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "qf1_b_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_187": {
                "variable": {
                    "value": "min_qf_target_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qf2_a_target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "qf2_b_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_190": {
                "variable": {
                    "value": "q_backup_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_194": {
                "variable": {
                    "value": "q_backup_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_198": {
                "variable": {
                    "value": "q_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "q_backup_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target_1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_backup_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_201": {
                "variable": {
                    "value": "qfs_loss_1_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.leaky_relu(qf1_a - q_backup, alpha=alpha) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_203": {
                "variable": {
                    "value": "qfs_loss_1_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.leaky_relu(qf1_b - q_backup, alpha=alpha) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_205": {
                "variable": {
                    "value": "qfs_loss_2_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.leaky_relu(qf2_a - q_backup, alpha=alpha) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_207": {
                "variable": {
                    "value": "qfs_loss_2_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.leaky_relu(qf2_b - q_backup, alpha=alpha) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_209": {
                "variable": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "qfs_loss_1_a + qfs_loss_1_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_210": {
                "variable": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "qfs_loss_2_a + qfs_loss_2_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_220": {
                "variable": {
                    "value": "policy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_223": {
                "variable": {
                    "value": "policy_grad_norm_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([tf.linalg.norm(grad) for (grad, var) in gvs], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_226": {
                "variable": {
                    "value": "policy_grad_norm_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([tf.linalg.norm(grad) for (grad, var) in gvs], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_240": {
                "variable": {
                    "value": "qvalues_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_245": {
                "variable": {
                    "value": "grad_norm_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([tf.linalg.norm(grad) for (grad, var) in gvs], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_247": {
                "variable": {
                    "value": "grad_norm_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack([tf.linalg.norm(grad) for (grad, var) in gvs], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_280": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_281": {
                "name": {
                    "value": "qf1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(qfs_loss_1_a + qfs_loss_1_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_282": {
                "name": {
                    "value": "qf2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(qfs_loss_2_a + qfs_loss_2_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_283": {
                "name": {
                    "value": "grad_norm_mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_norm_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.stack([tf.linalg.norm(grad) for (grad, var) in gvs], axis=0), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_284": {
                "name": {
                    "value": "grad_norm_max",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_norm_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.stack([tf.linalg.norm(grad) for (grad, var) in gvs], axis=0), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_285": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_172": {
                "input": {
                    "value": "target_policy_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_policy_tf.make_actor(self.processed_next_obs_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_215": {
                "input_tensor": {
                    "value": "tf.stack([qf1_a_pi, qf1_b_pi, qf2_a_pi, qf2_b_pi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_224": {
                "values": {
                    "value": "[tf.linalg.norm(grad) for (grad, var) in gvs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_226": {
                "values": {
                    "value": "[tf.linalg.norm(grad) for (grad, var) in gvs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_245": {
                "values": {
                    "value": "[tf.linalg.norm(grad) for (grad, var) in gvs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_247": {
                "values": {
                    "value": "[tf.linalg.norm(grad) for (grad, var) in gvs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_262": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.tau) * target + self.tau * source",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_268": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_202": {
                "features": {
                    "value": "qf1_a - q_backup",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "leaky_relu_204": {
                "features": {
                    "value": "qf1_b - q_backup",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "leaky_relu_206": {
                "features": {
                    "value": "qf2_a - q_backup",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "leaky_relu_208": {
                "features": {
                    "value": "qf2_b - q_backup",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "stack_215": {
                "values": {
                    "value": "[qf1_a_pi, qf1_b_pi, qf2_a_pi, qf2_b_pi]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_231": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_251": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_224": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_226": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_245": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_247": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/td3/td3_mem_backprop.py": {
        "tensorflow": {
            "Graph_171": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_313": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_192": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_194": {
                "variable": {
                    "value": "self.actions_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_196": {
                "variable": {
                    "value": "self.qvalues_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "qvalues",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_198": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_232": {
                "variable": {
                    "value": "q_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "qfs_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.leaky_relu(-self.qvalues_ph + qfs - self.q_base, alpha=alpha) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "target_buffer_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(self.qvalues_ph - q_backup) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_255": {
                "variable": {
                    "value": "policy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_261": {
                "variable": {
                    "value": "qvalues_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_298": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_299": {
                "name": {
                    "value": "qfs_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qfs_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.leaky_relu(-self.qvalues_ph + qfs - self.q_base, alpha=alpha) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_300": {
                "name": {
                    "value": "target_buffer_diff",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "target_buffer_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((self.qvalues_ph - q_backup) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_302": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_228": {
                "input_tensor": {
                    "value": "qfs_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_policy_tf.make_many_critics(self.processed_next_obs_ph, target_policy_out, scope='buffer_values_fn', reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_248": {
                "input_tensor": {
                    "value": "self.qfs_pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_275": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.tau) ** self.gradient_steps * target + (1 - (1 - self.tau) ** self.gradient_steps) * source",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_286": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_302": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_242": {
                "features": {
                    "value": "-self.qvalues_ph + qfs - self.q_base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/td3/td3_mem_gem.py": {
        "tensorflow": {
            "Graph_91": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_264": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "self.actions_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "self.qvalues_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.num_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "qvalues",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_139": {
                "variable": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(target_policy_out), stddev=self.target_policy_noise)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(target_noise, -self.target_noise_clip, self.target_noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.target_noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.target_noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_141": {
                "variable": {
                    "value": "noisy_target_action",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_policy_out + target_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_163": {
                "variable": {
                    "value": "q_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_203": {
                "variable": {
                    "value": "policy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_209": {
                "variable": {
                    "value": "qvalues_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_238": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "qvalues_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qfs_loss",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "qvalues_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.get_trainable_vars('model/values_fn/') + tf_util.get_trainable_vars('model/buffer_values_fn/')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_norm_239": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(qvalues_losses, qvalues_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_133": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_tf.make_many_critics(self.processed_obs_ph, self.actions_ph, scope='buffer_values_fn', num_q=self.num_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, 2, self.num_q // 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, 0, :, 0], qfs[:, 1, :, 1]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, i, i] for i in range(self.num_q)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.num_q, self.batch_size, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_180": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_tf.make_many_critics(self.processed_obs_ph, self.actions_ph, scope='buffer_values_fn', num_q=self.num_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, 2, self.num_q // 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, 0, :, 0], qfs[:, 1, :, 1]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, i, i] for i in range(self.num_q)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_tf.make_many_critics(self.processed_obs_ph, self.actions_ph, scope='buffer_values_fn', num_q=self.num_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, 2, self.num_q // 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, 0, :, 0], qfs[:, 1, :, 1]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, i, i] for i in range(self.num_q)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, 2, self.num_q // 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[qfs[:, 0, :, 0], qfs[:, 1, :, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_tf.make_many_critics(self.processed_obs_ph, self.actions_ph, scope='buffer_values_fn', num_q=self.num_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, 2, self.num_q // 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, 0, :, 0], qfs[:, 1, :, 1]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, i, i] for i in range(self.num_q)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.num_q)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "scalar_251": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_252": {
                "name": {
                    "value": "qfs_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qfs_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.leaky_relu(sign * diff, alpha=alpha) ** 2) / alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_253": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_138": {
                "input": {
                    "value": "target_policy_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_policy_tf.make_actor(self.processed_next_obs_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_159": {
                "input_tensor": {
                    "value": "qfs_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_policy_tf.make_many_critics(self.processed_next_obs_ph, noisy_target_action, scope='buffer_values_fn', num_q=self.num_q, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_tf.make_many_critics(self.processed_obs_ph, self.actions_ph, scope='buffer_values_fn', num_q=self.num_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, 2, self.num_q // 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, 0, :, 0], qfs[:, 1, :, 1]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, i, i] for i in range(self.num_q)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.num_q, self.batch_size, self.num_q)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_186": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_tf.make_many_critics(self.processed_obs_ph, self.actions_ph, scope='buffer_values_fn', num_q=self.num_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, 2, self.num_q // 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, 0, :, 0], qfs[:, 1, :, 1]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, i, i] for i in range(self.num_q)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[qfs[:, i, i] for i in range(self.num_q)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_tf.make_many_critics(self.processed_obs_ph, self.actions_ph, scope='buffer_values_fn', num_q=self.num_q)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, 2, self.num_q // 2, 2))",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, 0, :, 0], qfs[:, 1, :, 1]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.num_q, self.batch_size, self.num_q))",
                            "Call"
                        ],
                        [
                            "tf.transpose(qfs, [1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.stack([qfs[:, i, i] for i in range(self.num_q)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qfs, (self.batch_size, self.num_q))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.num_q)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_192": {
                "input_tensor": {
                    "value": "tf.nn.leaky_relu(sign * diff, alpha=alpha) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_196": {
                "input_tensor": {
                    "value": "self.qfs_pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_223": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.tau) ** (self.gradient_steps * 1) * target + (1 - (1 - self.tau) ** (self.gradient_steps * 1)) * source",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_234": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_253": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_193": {
                "features": {
                    "value": "sign * diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "1.0 / alpha",
                            "BinOp"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/td3/td3_n_step.py": {
        "tensorflow": {
            "Graph_128": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_245": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.actions_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_169": {
                "variable": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(target_policy_out), stddev=self.target_policy_noise)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(target_noise, -self.target_noise_clip, self.target_noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.target_noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.target_noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_171": {
                "variable": {
                    "value": "noisy_target_action",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_policy_out + target_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_178": {
                "variable": {
                    "value": "min_qf_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qf1_target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "qf2_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_181": {
                "variable": {
                    "value": "q_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma ** self.num_step * min_qf_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "variable": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_198": {
                "variable": {
                    "value": "policy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_204": {
                "variable": {
                    "value": "qvalues_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_232": {
                "name": {
                    "value": "qf1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((q_backup - qf1) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_233": {
                "name": {
                    "value": "qf2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((q_backup - qf2) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_234": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_168": {
                "input": {
                    "value": "target_policy_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_policy_tf.make_actor(self.processed_next_obs_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "qf1_pi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_213": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.tau) * target + self.tau * source",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_219": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/td3/td3_redq.py": {
        "tensorflow": {
            "expand_dims_136": {
                "variable": {
                    "value": "uniform_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros(tf.shape(inputs)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_138": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "uniform_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.zeros(tf.shape(inputs)[0]), 0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(uniform_log_prob, n_samples)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ind, 0, name='random_choice_ind')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "random_choice_ind",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_141": {
                "params": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(uniform_log_prob, n_samples)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ind, 0, name='random_choice_ind')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "random_choice",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_145": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "tf.shape(inputs)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "merge_all_272": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.actions_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_187": {
                "variable": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(target_policy_out), stddev=self.target_policy_noise)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(target_noise, -self.target_noise_clip, self.target_noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.target_noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.target_noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_189": {
                "variable": {
                    "value": "noisy_target_action",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_policy_out + target_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "stack_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[qf1_target, qf2_target, qf3_target, qf4_target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_min_203": {
                "variable": {
                    "value": "min_qf_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "random_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._random_choice(stack_targets, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_205": {
                "variable": {
                    "value": "q_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_211": {
                "variable": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_213": {
                "variable": {
                    "value": "qf3_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf3) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_214": {
                "variable": {
                    "value": "qf4_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_224": {
                "variable": {
                    "value": "policy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_230": {
                "variable": {
                    "value": "qvalues_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_136": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_258": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_259": {
                "name": {
                    "value": "qf1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((q_backup - qf1) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_260": {
                "name": {
                    "value": "qf2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((q_backup - qf2) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_261": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_186": {
                "input": {
                    "value": "target_policy_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_policy_tf.make_actor(self.processed_next_obs_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_219": {
                "input_tensor": {
                    "value": "qf1_pi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_240": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.tau) * target + self.tau * source",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_246": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_261": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/td3/td3_sil.py": {
        "tensorflow": {
            "Graph_129": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_251": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.terminals_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.rewards_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.actions_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_170": {
                "variable": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(target_policy_out), stddev=self.target_policy_noise)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(target_noise, -self.target_noise_clip, self.target_noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.target_noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.target_noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_172": {
                "variable": {
                    "value": "noisy_target_action",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "target_policy_out + target_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_179": {
                "variable": {
                    "value": "min_qf_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qf1_target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "qf2_target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_182": {
                "variable": {
                    "value": "q_backup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rewards_ph + (1 - self.terminals_ph) * self.gamma * min_qf_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "variable": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(q_backup - qf2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_199": {
                "variable": {
                    "value": "policy_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_205": {
                "variable": {
                    "value": "qvalues_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_233": {
                "name": {
                    "value": "policy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_234": {
                "name": {
                    "value": "qf1_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf1_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((q_backup - qf1) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_235": {
                "name": {
                    "value": "qf2_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "qf2_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean((q_backup - qf2) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_236": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.learning_rate_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_169": {
                "input": {
                    "value": "target_policy_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_policy_tf.make_actor(self.processed_next_obs_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_194": {
                "input_tensor": {
                    "value": "qf1_pi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assign_215": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - self.tau) * target + self.tau * source",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_221": {
                "ref": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_236": {
                "input_tensor": {
                    "value": "self.learning_rate_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/stable_baselines/trpo_mpi/trpo_mpi.py": {
        "tensorflow": {
            "Graph_126": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_266": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_policy.proba_distribution.kl(self.policy_pi.proba_distribution)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.proba_distribution.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_158": {
                "variable": {
                    "value": "vferr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.policy_pi.value_flat - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_161": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.policy_pi.proba_distribution.logp(action) - old_policy.proba_distribution.logp(action)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ratio * atarg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_178": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if '/vf' not in v.name and '/q/' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_187": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(grad * tangent) for (grad, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "oldpi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_192": {
                "name": {
                    "value": "entropy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(ent)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_193": {
                "name": {
                    "value": "policy_gradient_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "optimgain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "surrgain + entbonus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_194": {
                "name": {
                    "value": "value_function_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "surrgain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(ratio * atarg)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_195": {
                "name": {
                    "value": "approximate_kullback-leibler",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(kloldnew)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_196": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "optimgain + meankl + entbonus + surrgain + meanent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "Adam_mpi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_240": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_241": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.vf_stepsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_242": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(atarg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_243": {
                "name": {
                    "value": "kl_clip_range",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.max_kl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_158": {
                "x": {
                    "value": "self.policy_pi.value_flat - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "input_tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_241": {
                "input_tensor": {
                    "value": "self.vf_stepsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_242": {
                "input_tensor": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ],
                        [
                            "(atarg - atarg.mean()) / (atarg.std() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_243": {
                "input_tensor": {
                    "value": "self.max_kl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_246": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_247": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vf_stepsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_248": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ],
                        [
                            "(atarg - atarg.mean()) / (atarg.std() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_249": {
                "name": {
                    "value": "kl_clip_range",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.max_kl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunOptions_364": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "tensor": {
                    "value": "flat_tangent[start:start + var_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_187": {
                "input_tensor": {
                    "value": "grad * tangent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_251": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.obs_ph",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "histogram_253": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.obs_ph",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "assign_199": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RunMetadata_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/tests/test_a2c_conv.py": {
        "tensorflow": {
            "Graph_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/tests/test_custom_policy.py": {
        "tensorflow": {}
    },
    "gem_mujoco/tests/test_distri.py": {
        "tensorflow": {
            "get_default_session_50": {
                "variable": {
                    "value": "xval",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_50": {
                "variable": {
                    "value": "xval",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "proba_distribution.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "{mval_ph: mval}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/tests/test_math_util.py": {
        "tensorflow": {
            "constant_74": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "gem_mujoco/tests/test_tf_util.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "x_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "y_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "x_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "x2_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "other",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rgb, gray, rgbd)",
                            "Tuple"
                        ],
                        [
                            "(invalid_1, invalid_2)",
                            "Tuple"
                        ],
                        [
                            "(rgb, gray, rgbd)",
                            "Tuple"
                        ],
                        [
                            "(invalid_1, invalid_2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_54": {
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(rgb, gray, rgbd)",
                            "Tuple"
                        ],
                        [
                            "(invalid_1, invalid_2)",
                            "Tuple"
                        ],
                        [
                            "(rgb, gray, rgbd)",
                            "Tuple"
                        ],
                        [
                            "(invalid_1, invalid_2)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    }
}