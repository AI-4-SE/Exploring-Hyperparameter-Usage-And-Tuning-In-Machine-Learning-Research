{
    "checkpoint.py": {
        "tensorflow": {
            "GFile_22": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_33": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': state_dict}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, model_name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "tensor_value",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_13": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "net.py": {
        "torch": {
            "zeros_273": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_24": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_53": {
                "variable": {
                    "value": "reflection_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left, right, top, bot]",
                            "List"
                        ],
                        [
                            "int(np.floor(kernel_size / 2))",
                            "Call"
                        ],
                        [
                            "int(np.floor(kernel_size / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.denseblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*denseblock",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_125": {
                "variable": {
                    "value": "self.reflection_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left, right, top, bot]",
                            "List"
                        ],
                        [
                            "int(np.floor(kernel_size / 2))",
                            "Call"
                        ],
                        [
                            "int(np.floor(kernel_size / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_127": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_144": {
                "variable": {
                    "value": "self.reflection_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[left, right, top, bot]",
                            "List"
                        ],
                        [
                            "int(np.floor(kernel_size / 2))",
                            "Call"
                        ],
                        [
                            "int(np.floor(kernel_size / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_147": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, out], 1)",
                            "Call"
                        ],
                        [
                            "self.denseblock(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_cvi, x_cir], 1)",
                            "Call"
                        ],
                        [
                            "self.bottelblock(out)",
                            "Call"
                        ],
                        [
                            "a_init + out",
                            "BinOp"
                        ],
                        [
                            "self.conv_down(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.hight_block(out)",
                            "Call"
                        ],
                        [
                            "self.width_block(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv_up(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.axial_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "f_ConvLayer(2 * channels, channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.conv_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "f_ConvLayer(channels, channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.bottelblock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "a_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.axial_attn(x_ir), self.axial_attn(x_vi)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_cvi, x_cir]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_224": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "en_ir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "svd_275": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor[0, i, :, :] + EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_276": {
                "variable": {
                    "value": "s_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_320": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_321": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_408": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_409": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_488": {
                "variable": {
                    "value": "self.bn_qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_489": {
                "variable": {
                    "value": "self.bn_similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "groups * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_491": {
                "variable": {
                    "value": "self.bn_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_494": {
                "variable": {
                    "value": "self.relative",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.group_planes * 2, kernel_size * 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_495": {
                "variable": {
                    "value": "query_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_495": {
                "variable": {
                    "value": "query_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_496": {
                "variable": {
                    "value": "key_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ],
                        [
                            "56",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_496": {
                "variable": {
                    "value": "key_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_515": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qkv.reshape(N * W, self.groups, self.group_planes * 2, H)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[self.group_planes // 2, self.group_planes // 2, self.group_planes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_518": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relative",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.flatten_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_519": {
                "variable": {
                    "value": "(q_embedding, k_embedding, v_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(self.relative, 1, self.flatten_index).view(self.group_planes * 2, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.group_planes // 2, self.group_planes // 2, self.group_planes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_522": {
                "variable": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci,cij->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_523": {
                "variable": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci,cij->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_523": {
                "variable": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_525": {
                "variable": {
                    "value": "qk",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgci, bgcj->bgij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "stacked_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[qk, qr, kr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_531": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stacked_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([qk, qr, kr], dim=1)",
                            "Call"
                        ],
                        [
                            "self.bn_similarity(stacked_similarity).view(N * W, 3, self.groups, H, H).sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_532": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgij,bgcj->bgci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(stacked_similarity, dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_533": {
                "variable": {
                    "value": "sve",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bgij,cij->bgci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(stacked_similarity, dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_534": {
                "variable": {
                    "value": "stacked_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sv, sve]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_568": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense_conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, out], 1)",
                            "Call"
                        ],
                        [
                            "self.denseblock(x)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.reflection_pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out, inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_cvi, x_cir], 1)",
                            "Call"
                        ],
                        [
                            "self.bottelblock(out)",
                            "Call"
                        ],
                        [
                            "a_init + out",
                            "BinOp"
                        ],
                        [
                            "self.conv_down(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.hight_block(out)",
                            "Call"
                        ],
                        [
                            "self.width_block(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv_up(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_500": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_235": {
                "input": {
                    "value": "spatial2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spatial_attention(en_vi, spatial_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_236": {
                "input": {
                    "value": "spatial2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spatial_attention(en_vi, spatial_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_359": {
                "tensors": {
                    "value": "[f_en[0], self.up(f_en[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "[f_en[1], self.up(f_en[2])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_362": {
                "tensors": {
                    "value": "[f_en[0], x1_1, self.up(x2_1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_364": {
                "tensors": {
                    "value": "[f_en[2], self.up(f_en[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "tensors": {
                    "value": "[f_en[1], x2_1, self.up(x3_1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_366": {
                "tensors": {
                    "value": "[f_en[0], x1_1, x1_2, self.up(x2_2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_379": {
                "tensors": {
                    "value": "[f_en[0], self.up_eval(f_en[0], f_en[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_381": {
                "tensors": {
                    "value": "[f_en[1], self.up_eval(f_en[1], f_en[2])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_382": {
                "tensors": {
                    "value": "[f_en[0], x1_1, self.up_eval(f_en[0], x2_1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_384": {
                "tensors": {
                    "value": "[f_en[2], self.up_eval(f_en[2], f_en[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_385": {
                "tensors": {
                    "value": "[f_en[1], x2_1, self.up_eval(f_en[1], x3_1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "tensors": {
                    "value": "[f_en[0], x1_1, x1_2, self.up_eval(f_en[0], x2_2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_431": {
                "tensors": {
                    "value": "[f_en[0], self.up(f_en[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_433": {
                "tensors": {
                    "value": "[f_en[1], self.up(f_en[2])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_434": {
                "tensors": {
                    "value": "[f_en[0], x1_1, self.up(x2_1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_436": {
                "tensors": {
                    "value": "[f_en[2], self.up(f_en[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_437": {
                "tensors": {
                    "value": "[f_en[1], x2_1, self.up(x3_1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_438": {
                "tensors": {
                    "value": "[f_en[0], x1_1, x1_2, self.up(x2_2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_451": {
                "tensors": {
                    "value": "[f_en[0], self.up_eval(f_en[0], f_en[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_453": {
                "tensors": {
                    "value": "[f_en[1], self.up_eval(f_en[1], f_en[2])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_454": {
                "tensors": {
                    "value": "[f_en[0], x1_1, self.up_eval(f_en[0], x2_1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_456": {
                "tensors": {
                    "value": "[f_en[2], self.up_eval(f_en[2], f_en[3])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "tensors": {
                    "value": "[f_en[1], x2_1, self.up_eval(f_en[1], x3_1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_459": {
                "tensors": {
                    "value": "[f_en[0], x1_1, x1_2, self.up_eval(f_en[0], x2_2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_494": {
                "*size": {
                    "value": "self.group_planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "kernel_size * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_msssim/__init__.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_42": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_57": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1 / v2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "mssim",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mssim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mssim)",
                            "Call"
                        ],
                        [
                            "(mssim + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_86": {
                "variable": {
                    "value": "mcs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mcs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mcs)",
                            "Call"
                        ],
                        [
                            "(mcs + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "prod_96": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pow1[:-1] * pow2[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_83": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img2, (2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_49": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_50": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(real_size, channel=channel).to(img1.device)",
                            "Call"
                        ],
                        [
                            "self.window",
                            "Attribute"
                        ],
                        [
                            "create_window(self.window_size, channel).to(img1.device).type(img1.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_22": {
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_27": {
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(img1, (2, 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_21pairs_axial.py": {
        "torch": {
            "load_21": {
                "f": {
                    "value": "path_auto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.resume_nestfuse",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_24": {
                "f": {
                    "value": "models/train/fusionnet/6.0/fusion_axial/fusion_axial.model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_fusionnet_axial.py": {
        "torch": {
            "Adam_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "fusion_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_75": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_106": {
                "variable": {
                    "value": "sobel_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "fusion_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(temp_path_model_w, save_model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_62": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.resume_nestfuse",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_73": {
                "f": {
                    "value": "args.resume_fusion_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_147": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "(output - torch.min(output)) / (torch.max(output) - torch.min(output) + EPSILON)",
                            "BinOp"
                        ],
                        [
                            "output * 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_147": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "(output - torch.min(output)) / (torch.max(output) - torch.min(output) + EPSILON)",
                            "BinOp"
                        ],
                        [
                            "output * 255",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "ones_159": {
                "variable": {
                    "value": "ones_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "img_lists[0][0].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_211": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_img_parts(image, h, w)",
                            "Call"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "img_f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "img_lists[0][0].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "img_lists[0][0].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_img_parts(image, h, w)",
                            "Call"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, 0:h_cen + 3, 0:w_cen + 3]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(img1, [1, img1.shape[0], img1.shape[1], img1.shape[2]])",
                            "Call"
                        ],
                        [
                            "img_lists[0][i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, 0:h_cen + 3, w_cen - 2:w]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(img2, [1, img2.shape[0], img2.shape[1], img2.shape[2]])",
                            "Call"
                        ],
                        [
                            "img_lists[1][i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_150": {
                "ndarray": {
                    "value": "img3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, h_cen - 2:h, 0:w_cen + 3]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(img3, [1, img3.shape[0], img3.shape[1], img3.shape[2]])",
                            "Call"
                        ],
                        [
                            "img_lists[2][i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "img4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, h_cen - 2:h, w_cen - 2:w]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(img4, [1, img4.shape[0], img4.shape[1], img4.shape[2]])",
                            "Call"
                        ],
                        [
                            "img_lists[3][i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}