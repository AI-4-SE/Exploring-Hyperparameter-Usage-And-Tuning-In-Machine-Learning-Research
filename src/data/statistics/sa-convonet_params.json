{
    "src/utils/icp.py": {
        "sklearn": {
            "NearestNeighbors_63": {
                "variable": {
                    "value": "neigh",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_meshes.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.Shapes3dDataset(dataset_folder, fields, cfg['data']['test_split'], categories=cfg['data']['classes'], cfg=cfg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval_meshes_optim.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.Shapes3dDataset(dataset_folder, fields, cfg['data']['test_split'], categories=cfg['data']['classes'], cfg=cfg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get_dataset('test', cfg, return_idx=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_optim_largescene.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get_dataset('test', cfg, return_idx=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_155": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, cfg['test']['model_file'])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_203": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_206": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "crop_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.utils.data.Subset(dataset, indices=[scene_index])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Subset_218": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get_dataset('test', cfg, return_idx=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[scene_index]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "[d[the_key][_key] for d in crop_data_lst]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generate_optim_object.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get_dataset('test', cfg, return_idx=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_155": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, cfg['test']['model_file'])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_200": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_203": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "generate_optim_scene.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get_dataset('test', cfg, return_idx=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_155": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, cfg['test']['model_file'])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_200": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr * lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/dataset_matterport/build_dataset.py": {
        "torch": {}
    },
    "scripts/dataset_scannet/SensorData.py": {
        "torch": {}
    },
    "setup.py": {
        "torch": {}
    },
    "src/checkpoints.py": {
        "torch": {
            "save_38": {
                "obj": {
                    "value": "outdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs",
                            "Name"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_64": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/common.py": {
        "torch": {
            "gather_105": {
                "variable": {
                    "value": "points_12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points2.view(batch_size, 1, T, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_nn_12_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_nn_12.view(batch_size, -1, 1).expand_as(points1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_109": {
                "variable": {
                    "value": "points_21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points1.view(batch_size, T, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_nn_21_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx_nn_21.view(batch_size, -1, 1).expand_as(points2)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_155": {
                "variable": {
                    "value": "pxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_156": {
                "variable": {
                    "value": "pys",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_157": {
                "variable": {
                    "value": "pzs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bb_min[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "bb_max[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pxs, pys, pzs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "Rt_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_new, t_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remainder_414": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([pxs, pys, pzs], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.remainder(p, self.s) / self.s",
                            "BinOp"
                        ],
                        [
                            "self.pe(p)",
                            "Call"
                        ],
                        [
                            "2.0 * p - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat(out, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_438": {
                "input": {
                    "value": "freq * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_439": {
                "input": {
                    "value": "freq * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/conv_onet/config.py": {
        "torch": {
            "Embedding_69": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['model']['c_dim']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/conv_onet/generation.py": {
        "torch": {
            "split_330": {
                "variable": {
                    "value": "p_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.points_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "occ_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "occ_hats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_436": {
                "variable": {
                    "value": "vertices_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices / np.array([n_x - 1, n_y - 1, n_z - 1])",
                            "BinOp"
                        ],
                        [
                            "vertices * mc_unit + bb_min",
                            "BinOp"
                        ],
                        [
                            "box_size * (vertices - 0.5)",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(vertices)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.points_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_473": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v0.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_479": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_492": {
                "variable": {
                    "value": "face_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "face_v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertex[:, 1, :] - face_vertex[:, 0, :]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "face_v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face_vertex[:, 2, :] - face_vertex[:, 1, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_495": {
                "variable": {
                    "value": "face_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.decode(face_point.unsqueeze(0), c).logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mgrid[bb_min[0]:bb_max[0]:t[0], bb_min[1]:bb_max[1]:t[1], bb_min[2]:bb_max[2]:t[2]].reshape(3, -1).T",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(pp).to(device)",
                            "Call"
                        ],
                        [
                            "points / mesh_extractor.resolution",
                            "BinOp"
                        ],
                        [
                            "pp * (bb_max - bb_min) + bb_min",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(pp).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mgrid[bb_min[0]:bb_max[0]:t[0], bb_min[1]:bb_max[1]:t[1], bb_min[2]:bb_max[2]:t[2]].reshape(3, -1).T",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(pp).to(device)",
                            "Call"
                        ],
                        [
                            "points / mesh_extractor.resolution",
                            "BinOp"
                        ],
                        [
                            "pp * (bb_max - bb_min) + bb_min",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(pp).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_447": {
                "input": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-vi.grad",
                            "UnaryOp"
                        ],
                        [
                            "ni / torch.norm(ni, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "ni.squeeze(0).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_76": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_161": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_498": {
                "outputs": {
                    "value": "[face_value.sum()]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[face_point]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/conv_onet/models/__init__.py": {
        "torch": {
            "Bernoulli_76": {
                "variable": {
                    "value": "p_r",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(p, c, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_63": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/conv_onet/models/decoder.py": {
        "torch": {
            "Linear_34": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_55": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_63": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_217": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.fc_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grid_sample_152": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_156": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c + self.sample_feature(p_n['yz'], c_plane['yz'])",
                            "BinOp"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(c, vgrid, padding_mode='border', align_corners=True, mode=self.sample_mode).squeeze(-1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "c.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.sample_point_feature(p, pp, fea)",
                            "Call"
                        ],
                        [
                            "torch.cat(c_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * p_nor - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * xy - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.sample_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(c_dim, hidden_size) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_257": {
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.float()",
                            "Call"
                        ],
                        [
                            "p['p']",
                            "Subscript"
                        ],
                        [
                            "p.float()",
                            "Call"
                        ],
                        [
                            "self.map2local(p)",
                            "Call"
                        ],
                        [
                            "p.float()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_226": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_211": {
                "in_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/conv_onet/training.py": {
        "torch": {
            "binary_cross_entropy_with_logits_139": {
                "variable": {
                    "value": "loss_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decode(p, c, **kwargs).logits",
                            "Attribute"
                        ],
                        [
                            "self.model.decode(batch_p, c, **kwargs).logits",
                            "Attribute"
                        ],
                        [
                            "logits.abs()",
                            "Call"
                        ],
                        [
                            "self.model.decode(p, c).logits",
                            "Attribute"
                        ],
                        [
                            "logits.abs()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('points.occ').to(device)",
                            "Call"
                        ],
                        [
                            "data.get('points.occ').to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.ones((1, npoints1), dtype=torch.float32) * 0.5, torch.ones((1, npoints2), dtype=torch.float32)], dim=1)",
                            "Call"
                        ],
                        [
                            "data.get('points.occ').to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "batch_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_p, dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "batch_occ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_occ, dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_202": {
                "variable": {
                    "value": "loss_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decode(p, c, **kwargs).logits",
                            "Attribute"
                        ],
                        [
                            "self.model.decode(batch_p, c, **kwargs).logits",
                            "Attribute"
                        ],
                        [
                            "logits.abs()",
                            "Call"
                        ],
                        [
                            "self.model.decode(p, c).logits",
                            "Attribute"
                        ],
                        [
                            "logits.abs()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch_occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_occ, dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_248": {
                "variable": {
                    "value": "loss_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.decode(p, c, **kwargs).logits",
                            "Attribute"
                        ],
                        [
                            "self.model.decode(batch_p, c, **kwargs).logits",
                            "Attribute"
                        ],
                        [
                            "logits.abs()",
                            "Call"
                        ],
                        [
                            "self.model.decode(p, c).logits",
                            "Attribute"
                        ],
                        [
                            "logits.abs()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.get('points.occ').to(device)",
                            "Call"
                        ],
                        [
                            "data.get('points.occ').to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.ones((1, npoints1), dtype=torch.float32) * 0.5, torch.ones((1, npoints2), dtype=torch.float32)], dim=1)",
                            "Call"
                        ],
                        [
                            "data.get('points.occ').to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "batch_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "inputs_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma * np.random.normal(0, 1.0, size=inputs.cpu().numpy().shape)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(inputs_noise).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "inputs + inputs_noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_189": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[:, index1, :], inputs_noise[:, index2, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones((1, npoints1), dtype=torch.float32) * 0.5, torch.ones((1, npoints2), dtype=torch.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_69": {
                "*size": {
                    "value": "points.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_125": {
                "*size": {
                    "value": "p.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_190": {
                "*size": {
                    "value": "(1, npoints1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_232": {
                "*size": {
                    "value": "p.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/data/core.py": {
        "torch": {}
    },
    "src/encoder/pointnet.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(2 * hidden_dim, hidden_dim) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_191": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResnetBlockFC(2 * hidden_dim, hidden_dim) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.fc_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_196": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.fc_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[net, pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/encoder/pointnetpp.py": {
        "torch": {
            "arange_183": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "centroids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_200": {
                "variable": {
                    "value": "farthest",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_201": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_225": {
                "variable": {
                    "value": "group_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_293": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.mlp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.mlp_bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_164": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_205": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz_norm, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, points.view(B, 1, N, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dists + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_91": {
                "variable": {
                    "value": "interpolated_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_points(points2, idx) * weight.view(B, N, 3, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points1, interpolated_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_102": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(new_points))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[batch_indices, idx, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([grouped_xyz_norm, grouped_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz_norm",
                            "Name"
                        ],
                        [
                            "torch.cat([grouped_xyz, points.view(B, 1, N, -1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "Name"
                        ],
                        [
                            "new_points.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([points1, interpolated_points], dim=-1)",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "Name"
                        ],
                        [
                            "new_points.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(bn(conv(new_points)))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_208": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv1d_60": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "src/encoder/unet.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "self.down_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.down_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_27": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "nn.Upsample(mode='bilinear', scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(from_up, from_down)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_36": {
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_255": {
                "input": {
                    "value": "torch.isnan(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_255": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/encoder/unet3d.py": {
        "torch": {
            "Conv3d_16": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "not ('g' in order or 'b' in order)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Conv3d_358": {
                "variable": {
                    "value": "final_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "encoders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_433": {
                "variable": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "decoders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv3d_437": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "f_maps[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_174": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_319": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_330": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 1, reso, reso, reso))",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(x)",
                            "Call"
                        ],
                        [
                            "self.pooling(x)",
                            "Call"
                        ],
                        [
                            "self.basic_module(x)",
                            "Call"
                        ],
                        [
                            "self.upsampling(encoder_features=encoder_features, x=x)",
                            "Call"
                        ],
                        [
                            "self.joining(encoder_features, x)",
                            "Call"
                        ],
                        [
                            "self.basic_module(x)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(encoder_features, x)",
                            "Call"
                        ],
                        [
                            "self.final_conv(x)",
                            "Call"
                        ],
                        [
                            "self.final_activation(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ],
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ELU_176": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_222": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool3d_224": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "(encoder_features, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_442": {
                "variable": {
                    "value": "self.final_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_444": {
                "variable": {
                    "value": "self.final_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_544": {
                "input": {
                    "value": "torch.isnan(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ELU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_66": {
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm3d_70": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_72": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isnan_544": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.non_linearity(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/encoder/voxels.py": {
        "torch": {
            "linspace_94": {
                "variable": {
                    "value": "coord1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_95": {
                "variable": {
                    "value": "coord2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_96": {
                "variable": {
                    "value": "coord3",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coord1, coord2, coord3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_133": {
                "variable": {
                    "value": "self.conv_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_135": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_136": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_137": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_138": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 2 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_34": {
                "variable": {
                    "value": "self.conv_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "variable": {
                    "value": "self.conv_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/layers.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(size_in, size_out)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_in",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get_dataset('train', cfg)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['training']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg['training']['n_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config.load_config(args.config, 'configs/default.yaml')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data.collate_remove_none",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "data.worker_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get_dataset('val', cfg, return_idx=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg['training']['n_workers_val']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config.load_config(args.config, 'configs/default.yaml')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data.collate_remove_none",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "data.worker_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "vis_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get_dataset('val', cfg, return_idx=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "data.collate_remove_none",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "data.worker_init_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}