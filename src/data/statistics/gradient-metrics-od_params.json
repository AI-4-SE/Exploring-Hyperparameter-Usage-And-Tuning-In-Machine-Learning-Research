{
    "uncertainty_aggregation/configs/models_config.py": {
        "sklearn": {}
    },
    "faster-rcnn-torch/src/access.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "default_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "{'epoch': epoch, 'batch': batch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_file_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "faster-rcnn-torch/src/model.py": {
        "torch": {}
    },
    "retinanet-torch/src/access.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "default_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "{'epoch': epoch, 'batch': batch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_file_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/production/get_forwards.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "model(imgs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/production/get_gradient_metrics.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "raw_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[detection[i][0].view(1, -1, self.cfg.num_attrib) for i in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[detection[i][1] for i in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_113": {
                "variable": {
                    "value": "pgt_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pgt[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "pgt_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_114": {
                "variable": {
                    "value": "pgt[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pgt_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(pgt[..., 5:], dim=2).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.cfg.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_121": {
                "variable": {
                    "value": "loc_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bce(raw_pred[:, :, :2], pgt_t[:, :, :2], reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "loc_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mse(raw_pred[:, :, 2:4], pgt_t[:, :, 2:4], reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_127": {
                "variable": {
                    "value": "conf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_bce[candidate_ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "prob_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bce(raw_pred[:, :, 5:], pgt_t[:, :, 5:].float(), reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_130": {
                "variable": {
                    "value": "prob_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_bce[candidate_ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc_loss, conf_loss, prob_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_176": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_177": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_180": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "std_181": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_136": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(self.weight_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "loc_bce[candidate_ids] + loc_mse[candidate_ids]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_117": {
                "input": {
                    "value": "output[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/production/mc_inference.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "det",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.model(imgs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/access.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(img_dir, img_size=img_size)",
                            "Call"
                        ],
                        [
                            "CocoDetectionBoundingBox(img_dir, annot_dir, img_size=img_size, transform=_transform)",
                            "Call"
                        ],
                        [
                            "VocDetectionBoundingBox(img_dir, year=annot_dir, img_size=img_size, transform=_transform)",
                            "Call"
                        ],
                        [
                            "KittiDetectionBoundingBox(img_dir, annot_dir, img_size=img_size, transform=_transform)",
                            "Call"
                        ],
                        [
                            "CaltechPedDataset(img_dir, img_size, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "_collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "collate_img_label_fn",
                            "variable"
                        ],
                        [
                            "collate_img_label_fn",
                            "variable"
                        ],
                        [
                            "collate_img_label_fn",
                            "variable"
                        ],
                        [
                            "collate_img_label_fn",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(img_dir, img_size=img_size)",
                            "Call"
                        ],
                        [
                            "CocoDetectionBoundingBox(img_dir, annot_dir, img_size=img_size, transform=_transform)",
                            "Call"
                        ],
                        [
                            "VocDetectionBoundingBox(img_dir, year=annot_dir, img_size=img_size, transform=_transform)",
                            "Call"
                        ],
                        [
                            "KittiDetectionBoundingBox(img_dir, annot_dir, img_size=img_size, transform=_transform)",
                            "Call"
                        ],
                        [
                            "CaltechPedDataset(img_dir, img_size, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_cpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "{'epoch': epoch, 'batch': batch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_file_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "default_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/datasets/caltech.py": {
        "torch": {
            "tensor_105": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target['pos']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bbox, torch.tensor([1.0, 1.0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, NUM_ATTRIB)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/datasets/coco.py": {
        "torch": {
            "from_numpy_100": {
                "ndarray": {
                    "value": "np.eye(num_classes, dtype=dtype)[category_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target['bbox']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bbox, conf, one_hot_label)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, NUM_ATTRIB)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/datasets/image.py": {
        "torch": {}
    },
    "yolov3-torch/src/datasets/kitti.py": {
        "torch": {
            "tensor_50": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[xmin, ymin, xmax - xmin, ymax - ymin]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.eye(8, dtype='uint8')[category_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox, conf, one_hot]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_ls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 13)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/datasets/pascal_voc.py": {
        "torch": {
            "from_numpy_55": {
                "ndarray": {
                    "value": "np.eye(20, dtype=np.float)[category_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[xmin, ymin, xmax - xmin, ymax - ymin]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bbox, conf, one_hot]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 25)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/datasets/transforms.py": {
        "torch": {
            "from_numpy_342": {
                "variable": {
                    "value": "label[..., :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xywh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.matrix(label[..., :4].numpy())",
                            "Call"
                        ],
                        [
                            "np.concatenate((x1, y1, x2 - x1, y2 - y1), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_113": {
                "variable": {
                    "value": "label[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "label[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_114": {
                "variable": {
                    "value": "label[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "label[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "label[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "label[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "variable": {
                    "value": "label[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "label[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/datasets/utils.py": {
        "torch": {
            "stack_47": {
                "variable": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_48": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_with_tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "length_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "zero_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_num_obj - num_obj, label.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "label_with_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, zero_tail)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/evaluation_experiment.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/evaluation_experiment_better.py": {
        "torch": {
            "device_487": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "model(imgs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_541": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/inference.py": {
        "torch": {
            "argmax_39": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classes_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_raw[..., 5:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes, scores.view((-1, 1)), classes.view((-1, 1)).float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_81": {
                "variable": {
                    "value": "conf_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ge(scores, conf_thres)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "conf_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_95": {
                "variable": {
                    "value": "(scores_one_class, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_one_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.index_select(dim=0, index=member_idx_tensor)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_104": {
                "variable": {
                    "value": "under_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ious <= nms_thres",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "under_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_162": {
                "input": {
                    "value": "right1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 + w1",
                            "BinOp"
                        ],
                        [
                            "x1 + w1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_162": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 - w1 / 2",
                            "BinOp"
                        ],
                        [
                            "x1 - w1 / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_163": {
                "input": {
                    "value": "bottom1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1 + h1",
                            "BinOp"
                        ],
                        [
                            "y1 + h1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_163": {
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1 - h1 / 2",
                            "BinOp"
                        ],
                        [
                            "y1 - h1 / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_189": {
                "input": {
                    "value": "right1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 + w1",
                            "BinOp"
                        ],
                        [
                            "x1 + w1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_189": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 - w1 / 2",
                            "BinOp"
                        ],
                        [
                            "x1 - w1 / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_190": {
                "input": {
                    "value": "bottom1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1 + h1",
                            "BinOp"
                        ],
                        [
                            "y1 + h1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_190": {
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1 - h1 / 2",
                            "BinOp"
                        ],
                        [
                            "y1 - h1 / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ge_81": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_raw[..., 4]",
                            "Subscript"
                        ],
                        [
                            "scores.index_select(0, conf_index)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "conf_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_139": {
                "input": {
                    "value": "class_one_hot",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/main.py": {
        "torch": {
            "tensor_186": {
                "variable": {
                    "value": "_detection_time_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "_detection_time_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_187": {
                "variable": {
                    "value": "avg_time",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_detection_time_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(_detection_time_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_188": {
                "variable": {
                    "value": "time_std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_detection_time_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(_detection_time_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_196": {
                "variable": {
                    "value": "num_devs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_390": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda par: par.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=range(num_devs))",
                            "Call"
                        ],
                        [
                            "load_yolov3_model(opt.weight_path, dev, ckpt=opt.from_ckpt)",
                            "Call"
                        ],
                        [
                            "load_yolov3_model(opt.weight_path, dev, ckpt=opt.from_ckpt, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(num_devs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "cumul_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/model.py": {
        "torch": {
            "Sequential_90": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "lrelu_neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[ANCHORS[i] for i in idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_126": {
                "variable": {
                    "value": "grid_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_center_pred, y_center_pred, w_pred, h_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "conf_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_raw[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_140": {
                "variable": {
                    "value": "cls_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_raw[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bbox_pred, conf_pred, cls_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg.last_layer_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_183": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv3(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv4(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv6(self.branch)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(tmp, training=True, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "self.conv7(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.cr_block1(tmp)",
                            "Call"
                        ],
                        [
                            "self.cr_block2(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv1(branch1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tmp, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((tmp, x2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv2(branch2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tmp, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((tmp, x3), 1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_234": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv3(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv4(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv6(self.branch)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(tmp, training=True, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "self.conv7(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.cr_block1(tmp)",
                            "Call"
                        ],
                        [
                            "self.cr_block2(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv1(branch1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tmp, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((tmp, x2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv2(branch2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tmp, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((tmp, x3), 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tmp, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_239": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv3(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv4(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv6(self.branch)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(tmp, training=True, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "self.conv7(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.cr_block1(tmp)",
                            "Call"
                        ],
                        [
                            "self.cr_block2(tmp)",
                            "Call"
                        ],
                        [
                            "self.conv1(branch1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tmp, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((tmp, x2), 1)",
                            "Call"
                        ],
                        [
                            "self.conv2(branch2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(tmp, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((tmp, x3), 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tmp, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_135": {
                "input": {
                    "value": "prediction_raw[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_136": {
                "input": {
                    "value": "prediction_raw[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "input": {
                    "value": "prediction_raw[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "input": {
                    "value": "prediction_raw[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/training.py": {
        "torch": {
            "device_count_67": {
                "variable": {
                    "value": "num_devs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda par: par.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(num_devs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "cumul_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "losses[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "detect_anomaly_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/training_experiment.py": {
        "torch": {
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda par: par.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_count_169": {
                "variable": {
                    "value": "num_devs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LambdaLR_62": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda par: par.requires_grad, model.parameters()), lr=learning_rate, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "cumul_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_171": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_yolov3_model(det_s['weight_path'], dev, det_s['from_ckpt'], mode='train', num_classes=det_s['num_classes'], transfer=det_s['reset_head'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(num_devs))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(num_devs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_116": {
                "tensors": {
                    "value": "losses[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "detect_anomaly_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "yolov3-torch/src/training_old.py": {
        "torch": {
            "zeros_65": {
                "variable": {
                    "value": "tgt_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred_conf_logit.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_conf_logit.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "noobj_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_conf_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[..., 4]",
                            "Subscript"
                        ],
                        [
                            "pred_conf_logit - (1 - mask_noobj) * 10000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "tgt_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(pred_conf_logit.size(), device=pred_conf_logit.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_77": {
                "variable": {
                    "value": "coord_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_obj[..., :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tgt_t_1d[..., :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "tgt_one",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred_conf_obj_logit.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_conf_obj_logit.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_83": {
                "variable": {
                    "value": "obj_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_conf_obj_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds_obj[..., 4]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "tgt_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(pred_conf_obj_logit.size(), device=pred_conf_obj_logit.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_86": {
                "variable": {
                    "value": "class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_obj[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tgt_t_1d[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_107": {
                "variable": {
                    "value": "(max_ious, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_batch(pred[..., :4], target[..., :4], center=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_108": {
                "variable": {
                    "value": "noobj_indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "max_ious > IGNORE_THRESH",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(max_ious)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(max_ious)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "filter_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask_noobj.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "mask_noobj.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "wh_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ANCHORS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "xy_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_anchor, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "tgt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "bbox_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xy_anchor, wh_anchor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_148": {
                "variable": {
                    "value": "(_, idx_anchor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou_anchor_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_batch(bbox_anchor, tgt[..., :4], zero_center=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_167": {
                "variable": {
                    "value": "t_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_x / (1.0 - t_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_169": {
                "variable": {
                    "value": "t_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_y / (1.0 - t_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_174": {
                "variable": {
                    "value": "w_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh_anchor[..., 0]",
                            "Subscript"
                        ],
                        [
                            "torch.index_select(w_anchor, 0, idx_anchor.view(-1)).view(idx_anchor.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_anchor.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_175": {
                "variable": {
                    "value": "h_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh_anchor[..., 1]",
                            "Subscript"
                        ],
                        [
                            "torch.index_select(h_anchor, 0, idx_anchor.view(-1)).view(idx_anchor.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_anchor.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_176": {
                "variable": {
                    "value": "t_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(tgt[..., 2] / w_anchor).clamp(min=EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_177": {
                "variable": {
                    "value": "t_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(tgt[..., 3] / h_anchor).clamp(min=EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "idx_obj_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx_obj_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(idx_obj_1d)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "tgt_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tgt_t_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tgt_t_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_240": {
                "variable": {
                    "value": "w_intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes1[..., 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_240": {
                "variable": {
                    "value": "w_intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_241": {
                "variable": {
                    "value": "h_intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bboxes1[..., 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_241": {
                "variable": {
                    "value": "h_intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "input": {
                    "value": "max_ious",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_108": {
                "input": {
                    "value": "max_ious",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_256": {
                "input": {
                    "value": "right1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x1 + w1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_256": {
                "input": {
                    "value": "left1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_257": {
                "input": {
                    "value": "top1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y1 + h1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_257": {
                "input": {
                    "value": "bottom1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y1.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "yolov3-torch/src/utils.py": {
        "torch": {}
    },
    "yolov3-torch/src/yolov3_loss.py": {
        "torch": {
            "cat_37": {
                "variable": {
                    "value": "raw_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[detection[i][0].view(n_batch, -1, n_attributes) for i in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "loc_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bce(raw_pred[:, :, :2], tgt_t[:, :, :2], reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "loc_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mse(raw_pred[:, :, 2:4], tgt_t[:, :, 2:4], reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "conf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_bce[pos_mask | neg_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "prob_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bce(raw_pred[:, :, 5:], tgt_t[:, :, 5:].float(), reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "prob_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_bce[pos_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "wh_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ANCHORS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_132": {
                "variable": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[n_batch, n_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_134": {
                "variable": {
                    "value": "(max_gt_iou, argmax_gt_iou)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_batch(anchors, tgt[..., :4], center=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_146": {
                "variable": {
                    "value": "(max_anc_iou, argmax_anc_iou)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_batch(anchors, tgt[..., :4], center=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_147": {
                "variable": {
                    "value": "(max_gt_iou, argmax_gt_iou)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_batch(anchors, tgt[..., :4], center=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "tgt_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_batch, assignment.size(1), n_attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tgt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_74": {
                "variable": {
                    "value": "grid_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "grid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_size // s",
                            "BinOp"
                        ],
                        [
                            "img_size // s",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "wh_anchor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "bbox_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_anchor, y_anchor, w_anchor, h_anchor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "resp_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tgt.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_114": {
                "tensors": {
                    "value": "resp_grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "loc_bce[pos_mask] + loc_mse[pos_mask]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_189": {
                "variable": {
                    "value": "n_assigns",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_placement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assignment[b, :] == j + 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "log_195": {
                "variable": {
                    "value": "t_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(tgt[b, j, 2] / anchors[b, pred_placement, 2]).clamp(min=EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_196": {
                "variable": {
                    "value": "t_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(tgt[b, j, 3] / anchors[b, pred_placement, 3]).clamp(min=EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "tgt_t[b, pred_placement, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_x, t_y, t_w, t_h, tgt[b, j, 4:].view(1, -1).repeat(n_assigns, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "tgt_t[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_85": {
                "size": {
                    "value": "[n_scale_anchors]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[8, 16, 32]",
                            "List"
                        ],
                        [
                            "[8, 16, 32]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}