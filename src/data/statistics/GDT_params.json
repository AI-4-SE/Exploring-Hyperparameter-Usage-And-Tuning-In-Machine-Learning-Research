{
    "datasets/AVideoDataset.py": {
        "torch": {
            "cat_440": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(V, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/GDTPretrainDataset.py": {
        "torch": {
            "cat_356": {
                "tensors": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "data": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.45, 0.45, 0.45]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_385": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_386": {
                "data": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.225, 0.225, 0.225]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_386": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/HT100MDataset.py": {
        "torch": {
            "from_numpy_166": {
                "variable": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frombuffer(out, np.uint8).reshape([-1, self.size, self.size, 3])",
                            "Call"
                        ],
                        [
                            "th.from_numpy(video)",
                            "Call"
                        ],
                        [
                            "video.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "th.cat((video, zeros), axis=1)",
                            "Call"
                        ],
                        [
                            "video.float()",
                            "Call"
                        ],
                        [
                            "video / 255.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_video_ffmpeg(video_path, start, end)",
                            "Call"
                        ],
                        [
                            "th.cat(video_list, dim=0)",
                            "Call"
                        ],
                        [
                            "video_list[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, self.num_frames - video.shape[1], self.size, self.size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(video, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size - len(tensor)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_candidates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "video_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[video_list[i] for i in [0, 2, 1, 3]]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "text_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[text_list[i] for i in [0, 2, 1, 3]]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "*size": {
                    "value": "self.max_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "(tensor, zero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/audio_utils.py": {
        "torch": {
            "as_tensor_78": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logfbank(wav, sample_rate, winlen=0.02, winstep=0.01, nfilt=40, nfft=1024)",
                            "Call"
                        ],
                        [
                            "logfbank(wav, sample_rate, winlen=0.02, winstep=0.01, nfilt=257, nfft=1024)",
                            "Call"
                        ],
                        [
                            "spec.astype('float32')",
                            "Call"
                        ],
                        [
                            "spec.T",
                            "Attribute"
                        ],
                        [
                            "np.expand_dims(spec, axis=0)",
                            "Call"
                        ],
                        [
                            "spec0",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(spec)",
                            "Call"
                        ],
                        [
                            "(spec - 1.93) / 17.89",
                            "BinOp"
                        ],
                        [
                            "spec_augment(mel_spectrogram=spec, time_warping_para=1, frequency_mask_num=aug_audio[0], time_mask_num=aug_audio[1], frequency_masking_para=aug_audio[2], time_masking_para=aug_audio[3])",
                            "Call"
                        ],
                        [
                            "get_spec(wav, fr_sec, num_sec=num_sec, sample_rate=sample_rate, aug_audio=aug_audio, aud_spec_type=aud_spec_type, use_volume_jittering=use_volume_jittering, use_temporal_jittering=use_temporal_jittering, z_normalize=z_normalize)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/decoder.py": {
        "torch": {
            "linspace_31": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.uniform(0, delta)",
                            "Call"
                        ],
                        [
                            "int(delta * clip_idx / num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames_length, sampling_rate * num_frames / target_fps * fps, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames.shape[0], num_frames * sampling_rate * fps / target_fps, clip_idx if decode_all_video else 0, num_clips if decode_all_video else 1)",
                            "Call"
                        ],
                        [
                            "start_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "end_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_idx + clip_size - 1",
                            "BinOp"
                        ],
                        [
                            "get_start_end_idx(frames_length, sampling_rate * num_frames / target_fps * fps, clip_idx, num_clips)",
                            "Call"
                        ],
                        [
                            "get_start_end_idx(frames.shape[0], num_frames * sampling_rate * fps / target_fps, clip_idx if decode_all_video else 0, num_clips if decode_all_video else 1)",
                            "Call"
                        ],
                        [
                            "end_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_32": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "frames.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_33": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(frames, 0, index)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[frame.to_rgb().to_ndarray() for frame in video_frames]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(np.stack(frames))",
                            "Call"
                        ],
                        [
                            "pyav_decode(vid_path, container, sampling_rate, num_frames, clip_idx, num_clips, target_fps, aug_audio=aug_audio, decode_audio=decode_audio, num_sec=num_sec, aud_sample_rate=aud_sample_rate, aud_spec_type=aud_spec_type, use_volume_jittering=use_volume_jittering, use_temporal_jittering=use_temporal_jittering, z_normalize=z_normalize)",
                            "Call"
                        ],
                        [
                            "torchvision_decode(container, sampling_rate, num_frames, clip_idx, video_meta, num_clips, target_fps, ('visual',), max_spatial_scale)",
                            "Call"
                        ],
                        [
                            "temporal_sampling(frames, start_idx, end_idx, num_frames)",
                            "Call"
                        ],
                        [
                            "frames",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start_idx, end_idx, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.clamp(index, 0, frames.shape[0] - 1).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "video_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.frombuffer(video_handle, dtype=np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_265": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.stack(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/sparse_image_warp_pytorch.py": {
        "torch": {
            "tensor_99": {
                "variable": {
                    "value": "flattened_grid_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flatten_grid_locations(grid_locations, image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_161": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "matrix_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "left_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(matrix_a, torch.transpose(matrix_b, 2, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "right_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(matrix_b, lhs_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left_block, right_block)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "rhs_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, d + 1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, rhs_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "solve_181": {
                "variable": {
                    "value": "(X, LU)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((f, rhs_zeros), 1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((left_block, right_block), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_198": {
                "variable": {
                    "value": "x_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_199": {
                "variable": {
                    "value": "y_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(y, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "x_y_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y.squeeze(0).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "EPSILON",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_256": {
                "variable": {
                    "value": "rbf_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_pairwise_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phi(pairwise_dists, order)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_interpolation(train_points, train_values, order, regularization_weight)",
                            "Call"
                        ],
                        [
                            "X[:, :n, :]",
                            "Subscript"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_260": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "query_points_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query_points, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_265": {
                "variable": {
                    "value": "linear_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((query_points, ones), 2).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_interpolation(train_points, train_values, order, regularization_weight)",
                            "Call"
                        ],
                        [
                            "X[:, n:, :]",
                            "Subscript"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_300": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(width)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "stacked_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_308": {
                "variable": {
                    "value": "query_points_flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points_on_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_grid - flow",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height * width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_313": {
                "variable": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "torch.reshape(interpolated, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_386": {
                "variable": {
                    "value": "flattened_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * height * width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_388": {
                "variable": {
                    "value": "batch_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(batch_size) * height * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "input": {
                    "value": "flattened_flows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_spline(dest_control_point_locations, control_point_flows, flattened_grid_locations, interpolation_order, regularization_weight)",
                            "Call"
                        ],
                        [
                            "flattened_flows",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, image_height, image_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_222": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_223": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "max_floor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "size_in_indexing_dimension - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_366": {
                "variable": {
                    "value": "min_floor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_367": {
                "variable": {
                    "value": "maxx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_floor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, dtype=query_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_368": {
                "variable": {
                    "value": "floor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(min_floor, torch.floor(queries))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "queries - floor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "min_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_378": {
                "variable": {
                    "value": "max_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "min_379": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(min_alpha, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_383": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(queries - floor, dtype=grid_type)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(min_alpha, alpha), max_alpha)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(alpha, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_397": {
                "variable": {
                    "value": "gathered_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened_grid.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "linear_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_offsets + y_coords * width + x_coords",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[[[y, point_to_warp + dist_to_warp]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_171": {
                "*size": {
                    "value": "(b, num_b_cols, num_b_cols)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_198": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_199": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_rows // 2",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_rows // 2",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_301": {
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_398": {
                "input": {
                    "value": "gathered_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(flattened_grid.t(), 1, linear_coordinates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_queries, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "input": {
                    "value": "matrix_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c, ones), 2).float()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_367": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unstacked_query_points[dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_379": {
                "input": {
                    "value": "min_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, dtype=grid_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_226": {
                "input": {
                    "value": "torch.max(r, EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_230": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_233": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_389": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_226": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_228": {
                "input": {
                    "value": "torch.max(r, EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_234": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5 * order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_228": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_228": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_231": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_231": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5 * order",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/spec_augment_pytorch.py": {
        "torch": {
            "tensor_65": {
                "variable": {
                    "value": "src_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[y, point_to_warp]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "dest_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[y, point_to_warp + dist_to_warp]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/video_transforms.py": {
        "torch": {
            "as_tensor_18": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(mean).reshape(shape)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-1,) + (1,) * (vid.dim() - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "as_tensor_19": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(std).reshape(shape)",
                            "Call"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-1,) + (1,) * (vid.dim() - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_114": {
                "variable": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip[..., i:i + h, j:j + w]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(clip, size=size, mode=interpolation_mode, align_corners=False)",
                            "Call"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ],
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(size, size)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "int(round(np.random.uniform(min_size, max_size)))",
                            "Call"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "interpolation_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_348": {
                "variable": {
                    "value": "img_gray",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "brightness_jitter(img_brightness, images)",
                            "Call"
                        ],
                        [
                            "contrast_jitter(img_contrast, images)",
                            "Call"
                        ],
                        [
                            "saturation_jitter(img_saturation, images)",
                            "Call"
                        ],
                        [
                            "blend(images, img_bright, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_407": {
                "variable": {
                    "value": "img_bright",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "images.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_427": {
                "variable": {
                    "value": "img_gray[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "img_gray",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(images)",
                            "Call"
                        ],
                        [
                            "grayscale(images)",
                            "Call"
                        ],
                        [
                            "grayscale(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_474": {
                "variable": {
                    "value": "out_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "brightness_jitter(img_brightness, images)",
                            "Call"
                        ],
                        [
                            "contrast_jitter(img_contrast, images)",
                            "Call"
                        ],
                        [
                            "saturation_jitter(img_saturation, images)",
                            "Call"
                        ],
                        [
                            "blend(images, img_bright, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_498": {
                "variable": {
                    "value": "out_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "brightness_jitter(img_brightness, images)",
                            "Call"
                        ],
                        [
                            "contrast_jitter(img_contrast, images)",
                            "Call"
                        ],
                        [
                            "saturation_jitter(img_saturation, images)",
                            "Call"
                        ],
                        [
                            "blend(images, img_bright, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_30": {
                "input": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vid",
                            "Method Argument"
                        ],
                        [
                            "vid",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "(size, size)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "int(round(np.random.uniform(min_size, max_size)))",
                            "Call"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "float(size) / min(vid.shape[-2:])",
                            "BinOp"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "(0.08",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "interpolation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_51": {
                "variable": {
                    "value": "log_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_52": {
                "variable": {
                    "value": "aspect_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty(1).uniform_(log_ratio[0], log_ratio[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_60": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "height - h + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_61": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "width - w + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_157": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.flip(-1)",
                            "Call"
                        ],
                        [
                            "brightness_jitter(img_brightness, images)",
                            "Call"
                        ],
                        [
                            "contrast_jitter(img_contrast, images)",
                            "Call"
                        ],
                        [
                            "saturation_jitter(img_saturation, images)",
                            "Call"
                        ],
                        [
                            "blend(images, img_bright, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "blend(images, img_gray, alpha)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_height, new_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "data": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.45, 0.45, 0.45]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_584": {
                "data": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.225, 0.225, 0.225]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio",
                            "Method Argument"
                        ],
                        [
                            "(3.0 / 4.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "eval_video.py": {
        "torch": {
            "DataParallel_257": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_model(model_type=args.model, vid_base_arch=args.vid_base_arch, aud_base_arch=args.aud_base_arch, pretrained=args.pretrained, norm_feat=False, use_mlp=args.use_mlp, num_classes=256, args=args)",
                            "Call"
                        ],
                        [
                            "load_model_finetune(args, model.video_network.base, pooling_arch=model.video_pooling if args.agg_model else None, num_ftrs=model.encoder_dim, num_classes=NUM_CLASSES[args.dataset], use_dropout=args.use_dropout, use_bn=args.use_bn, use_l2_norm=args.use_l2_norm, dropout=0.9, agg_model=args.agg_model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_338": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVideoDataset(ds_name=args.dataset, root_dir=args.root_dir, mode='train', num_train_clips=args.train_clips_per_video, decode_audio=False, center_crop=False, fold=args.fold, ucf101_annotation_path=args.ucf101_annotation_path, hmdb51_annotation_path=args.hmdb51_annotation_path, args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_346": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVideoDataset(ds_name=args.dataset, root_dir=args.root_dir, mode='test', decode_audio=False, num_spatial_crops=args.num_spatial_crops, num_ensemble_views=args.val_clips_per_video, ucf101_annotation_path=args.ucf101_annotation_path, hmdb51_annotation_path=args.hmdb51_annotation_path, fold=args.fold, args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_356": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.head_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_473": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_553": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_819": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tbx_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'tensorboard')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_393": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'checkpoints', 'checkpoint.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm1d_69": {
                "variable": {
                    "value": "self.final_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ftrs",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ftrs",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "101",
                            "Method Argument"
                        ],
                        [
                            "101",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.final_bn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ftrs",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "101",
                            "Method Argument"
                        ],
                        [
                            "101",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "self.pooling_arch(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_130": {
                "variable": {
                    "value": "self.final_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ftrs",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ftrs",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "101",
                            "Method Argument"
                        ],
                        [
                            "101",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.final_bn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_ftrs",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "101",
                            "Method Argument"
                        ],
                        [
                            "101",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "self.pooling_arch(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_231": {
                "variable": {
                    "value": "ckpt_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_369": {
                "variable": {
                    "value": "scheduler_step",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=args.head_lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(lr) - args.lr_warmup_epochs for lr in args.lr_milestones.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_382": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=args.head_lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(lr) - args.lr_warmup_epochs for lr in args.lr_milestones.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gdt_helper.py": {
        "torch": {
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_90": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nc,mc -> nm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[q.view(N, C), k.view(N, C)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_92": {
                "variable": {
                    "value": "l_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(N, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "noise_batch.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_94": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([l_pos, l_neg], dim=1) / t",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, N, dtype=torch.long).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_74": {
                "variable": {
                    "value": "feat_a_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat_a_neg, feat_vT]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "feat_v_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat_v_neg, feat_aT]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "feat_a_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_a_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([feat_a_neg, feat_vT])",
                            "Call"
                        ],
                        [
                            "feat_vT_col",
                            "variable"
                        ],
                        [
                            "reduce_negatives(feat_a_neg, feat_v_neg, num_negatives)",
                            "Call"
                        ],
                        [
                            "torch.cat(feat_a_neg, dim=0)",
                            "Call"
                        ],
                        [
                            "feat_v_col",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "feat_v_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_v_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([feat_v_neg, feat_aT])",
                            "Call"
                        ],
                        [
                            "feat_aT_col",
                            "variable"
                        ],
                        [
                            "reduce_negatives(feat_a_neg, feat_v_neg, num_negatives)",
                            "Call"
                        ],
                        [
                            "torch.cat(feat_v_neg, dim=0)",
                            "Call"
                        ],
                        [
                            "feat_a_col",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "[l_pos, l_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_96": {
                "input": {
                    "value": "(logits[:, 0] == logits.max(1)[0]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "log_utils.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_gdt.py": {
        "torch": {
            "device_83": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HT100M_Dataset(csv_file='data/howto.csv', video_root=args.root_dir, caption_root=args.ht100m_caption_root, token_to_word_path='data/dict.npy', fps=32 / int(args.sample_rate), num_frames=args.clip_len, size=args.train_crop_size, center_crop=args.center_crop)",
                            "Call"
                        ],
                        [
                            "GDTPretrainDataset(ds_name=args.dataset, root_dir=args.root_dir, mode='train', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(ds)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_69": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tbx_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'tensorboard')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_116": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_117": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GDT(vid_base_arch=args.vid_base_arch, aud_base_arch=args.aud_base_arch, pretrained=False, norm_feat=args.norm_feat, use_mlp=args.use_mlp, num_classes=256)",
                            "Call"
                        ],
                        [
                            "TextVid_GDT(vid_base_arch=args.vid_base_arch, text_base_arch='word2vec', pretrained=False, norm_feat=args.norm_feat, use_mlp=args.use_mlp, num_classes=256)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.apex_opt_level)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_186": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'checkpoints', 'checkpoint.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedSampler_217": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HT100M_Dataset(csv_file='data/howto.csv', video_root=args.root_dir, caption_root=args.ht100m_caption_root, token_to_word_path='data/dict.npy', fps=32 / int(args.sample_rate), num_frames=args.clip_len, size=args.train_crop_size, center_crop=args.center_crop)",
                            "Call"
                        ],
                        [
                            "GDTPretrainDataset(ds_name=args.dataset, root_dir=args.root_dir, mode='train', args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_281": {
                "variable": {
                    "value": "(video, videoR, video2, video2R)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(video, [3, 3, 3, 3], dim=1)",
                            "Call"
                        ],
                        [
                            "video.to(device)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[3, 3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_283": {
                "variable": {
                    "value": "(audio, audioR, audio2, audio2R)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_285": {
                "variable": {
                    "value": "(audio, audioR, audio2, audio2R)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[20, 20, 20, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiStepLR_156": {
                "variable": {
                    "value": "scheduler_step",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.apex_opt_level)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(lr) - args.lr_warmup_epochs for lr in args.lr_milestones.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_163": {
                "variable": {
                    "value": "scheduler_step",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.apex_opt_level)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_173": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.apex_opt_level)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(lr) - args.lr_warmup_epochs for lr in args.lr_milestones.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_180": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=args.apex_opt_level)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main_stica.py": {
        "torch": {
            "DistributedSampler_75": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVideoDataset(ds_name=args.dataset_name, mode='train', root_dir=args.root_dir, decode_audio=True, args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AVideoDataset(ds_name=args.dataset_name, mode='train', root_dir=args.root_dir, decode_audio=True, args=args)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_136": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Stica_TransformerFMCrop(vid_base_arch='r2plus1d_18', aud_base_arch='resnet9', pretrained=False, norm_feat=True, use_mlp=True, num_classes=256, args=args)",
                            "Call"
                        ],
                        [
                            "nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "apex.amp.initialize(model, optimizer, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu_to_work_on], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu_to_work_on]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_203": {
                "variable": {
                    "value": "XE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "v_other",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_v, feat_v_other)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_405": {
                "variable": {
                    "value": "logits_av",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc,mc->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "feat_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_406": {
                "variable": {
                    "value": "labels_av",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(logits_av)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_442": {
                "variable": {
                    "value": "loss_big",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_443": {
                "variable": {
                    "value": "loss_small",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "t_loss_big",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "variable": {
                    "value": "t_loss_small",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SummaryWriter_48": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.dump_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "a_other",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_a, feat_a_other)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_417": {
                "variable": {
                    "value": "logits_va",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bc,mc->bm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "feat_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_418": {
                "variable": {
                    "value": "labels_va",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(logits_va)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "video_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "video[i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "variable": {
                    "value": "loss_av",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_541": {
                "data": {
                    "value": "[xmin, xmax, ymin, ymax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "data": {
                    "value": "[tmin, tmax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.dump_path, 'checkpoint.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv2d_142": {
                "variable": {
                    "value": "model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_367": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.video_pooling(img).squeeze()",
                            "Call"
                        ],
                        [
                            "img.view(-1, self.encoder_dim)",
                            "Call"
                        ],
                        [
                            "self.mlp_v(img)",
                            "Call"
                        ],
                        [
                            "F.normalize(img, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.video_network(img).squeeze()",
                            "Call"
                        ],
                        [
                            "self.video_pooling(img)",
                            "Call"
                        ],
                        [
                            "img.view(-1, self.encoder_dim)",
                            "Call"
                        ],
                        [
                            "self.mlp_v(img)",
                            "Call"
                        ],
                        [
                            "F.normalize(img, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_444": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "word_embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_482": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.block_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.block_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_117": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_119": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(duration, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_164": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, duration)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.words_to_ids(x)",
                            "Call"
                        ],
                        [
                            "self.word_embd(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.words_to_ids(x)",
                            "Call"
                        ],
                        [
                            "self.word_embd(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.mlp_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_270": {
                "variable": {
                    "value": "nce_img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nce_img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_v(img_features)",
                            "Call"
                        ],
                        [
                            "F.normalize(nce_img_features, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_v(img_features)",
                            "Call"
                        ],
                        [
                            "F.normalize(nce_img_features, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_272": {
                "variable": {
                    "value": "nce_aud_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nce_aud_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_a(aud_features)",
                            "Call"
                        ],
                        [
                            "F.normalize(nce_aud_features, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "variable": {
                    "value": "self.video_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool3d((args.transformer_time_dim, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_351": {
                "variable": {
                    "value": "self.video_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_360": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_361": {
                "variable": {
                    "value": "self.mlp_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_dim_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_422": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.video_pooling(img).squeeze()",
                            "Call"
                        ],
                        [
                            "img.view(-1, self.encoder_dim)",
                            "Call"
                        ],
                        [
                            "self.mlp_v(img)",
                            "Call"
                        ],
                        [
                            "F.normalize(img, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.video_network(img).squeeze()",
                            "Call"
                        ],
                        [
                            "self.video_pooling(img)",
                            "Call"
                        ],
                        [
                            "img.view(-1, self.encoder_dim)",
                            "Call"
                        ],
                        [
                            "self.mlp_v(img)",
                            "Call"
                        ],
                        [
                            "F.normalize(img, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_423": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.audio_network(spec).squeeze()",
                            "Call"
                        ],
                        [
                            "spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.mlp_a(spec)",
                            "Call"
                        ],
                        [
                            "F.normalize(spec, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "spec",
                            "Method Argument"
                        ],
                        [
                            "spec",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_443": {
                "variable": {
                    "value": "self.word_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "66250",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "word_embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_455": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size - len(tensor)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_475": {
                "tensors": {
                    "value": "split_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._words_to_token(self._split_text(sent)) for sent in x]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_523": {
                "variable": {
                    "value": "self.mlp_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_537": {
                "variable": {
                    "value": "nce_img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nce_img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_v(img_features)",
                            "Call"
                        ],
                        [
                            "F.normalize(nce_img_features, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.mlp_v(img_features)",
                            "Call"
                        ],
                        [
                            "F.normalize(nce_img_features, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_539": {
                "variable": {
                    "value": "nce_text_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nce_text_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_t(text_features)",
                            "Call"
                        ],
                        [
                            "F.normalize(nce_text_features, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_126": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_128": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(duration, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_456": {
                "tensors": {
                    "value": "(tensor, zero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_471": {
                "*size": {
                    "value": "self.max_words",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_483": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.base(x).squeeze()",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.words_to_ids(x)",
                            "Call"
                        ],
                        [
                            "self.word_embd(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "torch.max(x, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "n_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_91": {
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "n_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_input",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_94": {
                "num_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_97": {
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_345": {
                "output_size": {
                    "value": "(args.transformer_time_dim, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_441": {
                "f": {
                    "value": "word2vec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'datasets/data/word2vec.pth'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/logger.py": {
        "torch": {
            "tensor_122": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/resnet.py": {
        "torch": {
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_154": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_162": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/scheduler.py": {
        "torch": {}
    },
    "src/transformer.py": {
        "torch": {
            "ModuleList_56": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Transformer(hidden_dim=self.hidden_dim, heads=num_head, dropout=dp, qkv_mha=qkv_mha) for i in range(self.num_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_80": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "emb.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "emb.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + attn",
                            "BinOp"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "x + self.ffn(x)",
                            "BinOp"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(-1).to(x.dtype)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_124": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_126": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_133": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attns[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_203": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_209": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_211": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.pos_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(max_step, hidden_dim) for _ in range(num_speed)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_73": {
                "start": {
                    "value": "max_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_70": {
                "num_embeddings": {
                    "value": "max_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/vmz.py": {
        "torch": {
            "Sequential_96": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_builder(inplanes, planes, midplanes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_builder(planes, planes, midplanes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(inplanes, planes, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_builder(planes, planes, midplanes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(planes, planes * self.expansion, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_221": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(512 if not larger_last else 640) * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=ds_stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv3d_52": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "midplanes",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_55": {
                "num_features": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "midplanes",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_57": {
                "in_channels": {
                    "value": "midplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "inplanes * planes * 3 * 3 * 3 // (inplanes * 3 * 3 + 3 * planes)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "midplanes",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_98": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_103": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_133": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_134": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_135": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_140": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_146": {
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_147": {
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_174": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_176": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_185": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_188": {
                "num_features": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_190": {
                "in_channels": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_193": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_253": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "ds_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_builder.get_downsample_stride(stride)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_255": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_243": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckp_paths",
                            "variable"
                        ],
                        [
                            "ckp_paths",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:' + str(torch.distributed.get_rank() % torch.cuda.device_count())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_362": {
                "variable": {
                    "value": "output_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.mean(torch.stack(softmaxes[sms]), 0, keepdim=False) for sms in softmaxes.keys()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_369": {
                "variable": {
                    "value": "output_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels[video_id] for video_id in softmaxes.keys()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(x, device=x.device, dtype=x.dtype) for _ in range(dist.get_world_size())]",
                            "ListComp"
                        ],
                        [
                            "[torch.zeros_like(x, device=x.device, dtype=x.dtype) for _ in range(dist.get_world_size())]",
                            "ListComp"
                        ],
                        [
                            "[out_list[rank] for rank in range(dist.get_world_size()) if rank != dist.get_rank()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(x, device=x.device, dtype=x.dtype) for _ in range(dist.get_world_size())]",
                            "ListComp"
                        ],
                        [
                            "[torch.zeros_like(x, device=x.device, dtype=x.dtype) for _ in range(dist.get_world_size())]",
                            "ListComp"
                        ],
                        [
                            "[out_list[rank] for rank in range(dist.get_world_size()) if rank != dist.get_rank()]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.module.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'epoch': epoch + 1, 'args': args}",
                            "Dict"
                        ],
                        [
                            "torch.load(ckp_path, map_location='cuda:' + str(torch.distributed.get_rank() % torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'checkpoints', 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_287": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "31",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_288": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "31",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_147": {
                "device": {
                    "value": "args.gpu_to_work_on",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_157": {
                "device": {
                    "value": "args.gpu_to_work_on",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_208": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.module.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'epoch': epoch + 1, 'args': args}",
                            "Dict"
                        ],
                        [
                            "torch.load(ckp_path, map_location='cuda:' + str(torch.distributed.get_rank() % torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'model_weights', f'model_{epoch}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.module.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'epoch': epoch + 1, 'args': args}",
                            "Dict"
                        ],
                        [
                            "torch.load(ckp_path, map_location='cuda:' + str(torch.distributed.get_rank() % torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'checkpoints', f'ckpt_{epoch}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_363": {
                "input": {
                    "value": "torch.stack(softmaxes[sms])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_363": {
                "tensors": {
                    "value": "softmaxes[sms]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_count_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}