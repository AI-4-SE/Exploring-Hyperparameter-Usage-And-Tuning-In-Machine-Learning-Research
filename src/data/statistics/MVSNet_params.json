{
    "cnn_wrapper/network.py": {
        "tensorflow": {
            "transpose_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(input_tensor, kernel_size, filters, strides, name, relu=False, dilation_rate=dilation_rate, padding=padding, biased=biased, reuse=self.reuse, separable=separable)",
                            "Call"
                        ],
                        [
                            "self.conv(input_tensor, kernel_size, filters, strides, name, relu=False, dilation_rate=dilation_rate, padding=padding, biased=biased, reuse=reuse, separable=separable)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_228": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(deconv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(deconv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, G, C // G, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_240": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(deconv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [C], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, C, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [C], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_258": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_tensor, center=center, scale=scale, fused=True, training=self.training, trainable=self.trainable, reuse=self.reuse or reuse, epsilon=self.bn_epsilon, gamma_regularizer=None, beta_regularizer=None, name=name)",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_357": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv(input_tensor, kernel_size, filters, strides, name, relu=False, padding=padding, biased=biased, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "self.deconv(input_tensor, kernel_size, filters, strides, name, relu=False, padding=padding, biased=biased, reuse=self.reuse)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_358": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(deconv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_369": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(deconv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, G, C // G, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_370": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(deconv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_383": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [C], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, C, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [C], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_384": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_388": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_tensor, center=center, scale=scale, fused=True, training=self.training, trainable=self.trainable, reuse=self.reuse or reuse, epsilon=self.bn_epsilon, gamma_regularizer=None, beta_regularizer=None, name=name)",
                            "Call"
                        ],
                        [
                            "self.relu(output, name + '/relu')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_479": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "center": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse or reuse",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "self.bn_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "beta_regularizer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_397": {
                "features": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pooling2d_402": {
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_pooling2d_411": {
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_420": {
                "x": {
                    "value": "tf.layers.average_pooling2d(tf.square(input_tensor), pool_size=pool_size, strides=strides, padding=padding, name=name) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "local_response_normalization_429": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=[C])",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_438": {
                "values": {
                    "value": "input_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_442": {
                "inputs": {
                    "value": "input_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_448": {
                "variable": {
                    "value": "flatten_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_451": {
                "inputs": {
                    "value": "flatten_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(input_tensor)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ]
                    ]
                },
                "units": {
                    "value": "num_out",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "biased",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu if relu else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse or reuse",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self.regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "self.regularizer if biased else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_473": {
                "logits": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_496": {
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_504": {
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_508": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_512": {
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_516": {
                "structure": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_520": {
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_241": {
                "x": {
                    "value": "var + self.bn_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "name + '/gn'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_246": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_248": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_250": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_252": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_310": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_371": {
                "x": {
                    "value": "var + self.bn_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "name + '/gn'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_376": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_378": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_380": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_382": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict",
                            "variable"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_193": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "separable_conv2d_195": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_255": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(deconv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, C, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_transpose_312": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_385": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(conv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(deconv, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + self.bn_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, C, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "average_pooling2d_420": {
                "inputs": {
                    "value": "tf.square(input_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv3d_198": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_421": {
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_initializer_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/convgru.py": {
        "tensorflow": {
            "transpose_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_19": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_tensor, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + 1e-05)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_68": {
                "variable": {
                    "value": "self._size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape + [self._filters]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_tensor, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, G, C // G, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_40": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_tensor, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', [C], dtype=tf.float32, initializer=tf.ones_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [C], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_51": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "update_gate * h + (1 - update_gate) * y",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_87": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "self._feature_axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x, h], axis=self._feature_axis)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, reset_gate * h], axis=self._feature_axis)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2 * self._filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "self._kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_92": {
                "variable": {
                    "value": "(reset_gate, update_gate)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, 2 * self._filters, self._kernel, padding='same', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs, self._filters, self._kernel, padding='same', name='output_conv')",
                            "Call"
                        ],
                        [
                            "group_norm(conv, 'output_norm', group_channel=16)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "self._feature_axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "reset_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reset_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_norm(reset_gate, 'reset_norm', group_channel=16)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(reset_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_100": {
                "variable": {
                    "value": "update_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "update_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_norm(update_gate, 'update_norm', group_channel=16)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(update_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_105": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, reset_gate * h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "self._feature_axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x, h], axis=self._feature_axis)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, reset_gate * h], axis=self._feature_axis)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self._kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_41": {
                "x": {
                    "value": "var + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "name + '/gn'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "is_reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "Gates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "Output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_tensor, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [N, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, C, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_initializer_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/homography_warping.py": {
        "tensorflow": {
            "linspace_102": {
                "variable": {
                    "value": "x_linspace",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(width, 'float32') - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[2]",
                            "Subscript"
                        ],
                        [
                            "image_shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linspace_103": {
                "variable": {
                    "value": "y_linspace",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(height, 'float32') - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "meshgrid_104": {
                "variable": {
                    "value": "(x_coordinates, y_coordinates)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.5, tf.cast(width, 'float32') - 0.5, width)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_linspace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.5, tf.cast(height, 'float32') - 0.5, height)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "x_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_coordinates, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "y_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_coordinates, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_107": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_coordinates, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_108": {
                "variable": {
                    "value": "indices_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_coordinates, y_coordinates, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_112": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, num_repeats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(x_coordinates)",
                            "Call"
                        ],
                        [
                            "tf.ones((1, num_repeats), dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.ones((1, num_repeats), dtype='float')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_118": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, num_repeats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(x_coordinates)",
                            "Call"
                        ],
                        [
                            "tf.ones((1, num_repeats), dtype='int32')",
                            "Call"
                        ],
                        [
                            "tf.ones((1, num_repeats), dtype='float')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_124": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_132": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_134": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_136": {
                "variable": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_137": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_138": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, 0, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_139": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x1, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_140": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, 0, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_141": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y1, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_144": {
                "variable": {
                    "value": "indices_a",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y0, x0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "indices_b",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y0, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "indices_c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y1, x0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_147": {
                "variable": {
                    "value": "indices_d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b, y1, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_149": {
                "variable": {
                    "value": "pixel_values_a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b, y0, x0], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_150": {
                "variable": {
                    "value": "pixel_values_b",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b, y0, x1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_151": {
                "variable": {
                    "value": "pixel_values_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b, y1, x0], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_152": {
                "variable": {
                    "value": "pixel_values_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b, y1, x1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_154": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, 0, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x0, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_155": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x1, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_156": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, 0, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y0, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_157": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ],
                        [
                            "tf.cast(y1, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "area_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y1 - y) * (x1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_159": {
                "variable": {
                    "value": "area_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y1 - y) * (x - x0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_160": {
                "variable": {
                    "value": "area_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y - y0) * (x1 - x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_161": {
                "variable": {
                    "value": "area_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y - y0) * (x - x0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_162": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[area_a * pixel_values_a, area_b * pixel_values_b, area_c * pixel_values_c, area_d * pixel_values_d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_209": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_210": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_211": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_212": {
                "variable": {
                    "value": "b0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_213": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_214": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_215": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_216": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_217": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "homo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_238": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_240": {
                "variable": {
                    "value": "homography_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_241": {
                "variable": {
                    "value": "homography_linear_div",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(homography, begin=[0, 8], size=[-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_242": {
                "variable": {
                    "value": "homography_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "homography_linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(homography, begin=[0, 0], size=[-1, 8])",
                            "Call"
                        ],
                        [
                            "tf.div(homography_linear, homography_linear_div)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "homography_linear_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.slice(homography, begin=[0, 8], size=[-1, 1]), [1, 8])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_13": {
                "variable": {
                    "value": "R_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_14": {
                "variable": {
                    "value": "R_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_15": {
                "variable": {
                    "value": "t_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_16": {
                "variable": {
                    "value": "t_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_17": {
                "variable": {
                    "value": "K_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_18": {
                "variable": {
                    "value": "K_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(depth_num, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_26": {
                "variable": {
                    "value": "R_left_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(R_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_27": {
                "variable": {
                    "value": "R_right_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(R_right, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_29": {
                "variable": {
                    "value": "fronto_direction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.squeeze(R_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_33": {
                "variable": {
                    "value": "c_relative",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.matmul(R_right_trans, tf.squeeze(t_right, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "-tf.matmul(R_right_trans, tf.squeeze(t_right, axis=1))",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "c_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.matmul(R_left_trans, tf.squeeze(t_left, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "-tf.matmul(R_left_trans, tf.squeeze(t_left, axis=1))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "temp_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "c_relative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(c_right, c_left)",
                            "Call"
                        ],
                        [
                            "tf.subtract(c_right, c_left)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fronto_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.squeeze(R_left, axis=1), [0, 2, 0], [-1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(tf.squeeze(R_left, axis=1), [0, 2, 0], [-1, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_38": {
                "variable": {
                    "value": "depth_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth, [batch_size, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_40": {
                "variable": {
                    "value": "temp_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(temp_vec, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_43": {
                "variable": {
                    "value": "middle_mat1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.matmul(R_left_trans, K_left_inv), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "middle_mat2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "middle_mat0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(3, batch_shape=[batch_size, num_depth]) - temp_vec / depth_mat",
                            "BinOp"
                        ],
                        [
                            "tf.eye(3, batch_shape=[batch_size, num_depth]) - temp_vec / depth_mat",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "middle_mat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.matmul(R_left_trans, K_left_inv), axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.matmul(R_left_trans, K_left_inv), axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "homographies",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tile(K_right, [1, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matmul(tf.tile(R_right, [1, num_depth, 1, 1]), middle_mat2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_56": {
                "variable": {
                    "value": "R_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_57": {
                "variable": {
                    "value": "R_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_58": {
                "variable": {
                    "value": "t_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_59": {
                "variable": {
                    "value": "t_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_60": {
                "variable": {
                    "value": "K_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "left_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_61": {
                "variable": {
                    "value": "K_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "right_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(depth_num, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "inv_depth_start",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.div(1.0, depth_start)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "inv_depth_end",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.div(1.0, depth_end)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_69": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "inv_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lin_space(inv_depth_start, inv_depth_end, depth_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "R_left_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(R_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "R_right_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(R_right, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_77": {
                "variable": {
                    "value": "fronto_direction",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.squeeze(R_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_81": {
                "variable": {
                    "value": "c_relative",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.matmul(R_right_trans, tf.squeeze(t_right, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "-tf.matmul(R_right_trans, tf.squeeze(t_right, axis=1))",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "c_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.matmul(R_left_trans, tf.squeeze(t_left, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "-tf.matmul(R_left_trans, tf.squeeze(t_left, axis=1))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "temp_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "c_relative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(c_right, c_left)",
                            "Call"
                        ],
                        [
                            "tf.subtract(c_right, c_left)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "fronto_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.squeeze(R_left, axis=1), [0, 2, 0], [-1, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(tf.squeeze(R_left, axis=1), [0, 2, 0], [-1, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_86": {
                "variable": {
                    "value": "depth_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth, [batch_size, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_88": {
                "variable": {
                    "value": "temp_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(temp_vec, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_91": {
                "variable": {
                    "value": "middle_mat1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.matmul(R_left_trans, K_left_inv), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "middle_mat2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "middle_mat0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(3, batch_shape=[batch_size, num_depth]) - temp_vec / depth_mat",
                            "BinOp"
                        ],
                        [
                            "tf.eye(3, batch_shape=[batch_size, num_depth]) - temp_vec / depth_mat",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "middle_mat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.matmul(R_left_trans, K_left_inv), axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.matmul(R_left_trans, K_left_inv), axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "homographies",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.tile(K_right, [1, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matmul(tf.tile(R_right, [1, num_depth, 1, 1]), middle_mat2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_170": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_176": {
                "variable": {
                    "value": "affine_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_177": {
                "variable": {
                    "value": "div_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_181": {
                "variable": {
                    "value": "pixel_grids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_182": {
                "variable": {
                    "value": "pixel_grids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "pixel_grids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pixel_grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 3, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "grids_affine",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "affine_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(homography, [0, 0, 0], [-1, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pixel_grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "grids_div",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "div_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(homography, [0, 2, 0], [-1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pixel_grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pixel_grids(height, width)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pixel_grids, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(pixel_grids, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pixel_grids, (batch_size, 3, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_191": {
                "variable": {
                    "value": "grids_div",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grids_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(div_mat, pixel_grids)",
                            "Call"
                        ],
                        [
                            "grids_div + grids_zero_add",
                            "BinOp"
                        ],
                        [
                            "tf.tile(grids_div, [1, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_192": {
                "variable": {
                    "value": "grids_inv_warped",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grids_affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(affine_mat, pixel_grids)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "grids_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(div_mat, pixel_grids)",
                            "Call"
                        ],
                        [
                            "grids_div + grids_zero_add",
                            "BinOp"
                        ],
                        [
                            "tf.tile(grids_div, [1, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_193": {
                "variable": {
                    "value": "(x_warped, y_warped)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "grids_inv_warped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(grids_affine, grids_div)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "x_warped_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_warped",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "y_warped_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_warped",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "warped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "warped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate(input_image, x_warped_flatten, y_warped_flatten)",
                            "Call"
                        ],
                        [
                            "tf.reshape(warped_image, shape=image_shape, name='warped_feature')",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.transform(input_image, homography_linear, interpolation='BILINEAR')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(input_image)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "warped_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_11": {
                "name": {
                    "value": "get_homographies",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "get_homographies",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_132": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_134": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "warping_by_homography",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_241": {
                "input_": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ],
                        [
                            "tf.stack(homo, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(homography, [-1, 9])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_21": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(depth_num, 'int32'), [])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(depth_num, 'int32'), [])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_24": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_start + tf.cast(tf.range(depth_num), tf.float32) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "tf.div(1.0, inv_depth)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_25": {
                "input": {
                    "value": "K_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_26": {
                "input": {
                    "value": "R_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_27": {
                "input": {
                    "value": "R_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "input": {
                    "value": "R_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "a": {
                    "value": "R_left_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.squeeze(t_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "a": {
                    "value": "R_right_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_right, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(R_right, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.squeeze(t_right, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "R_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "tensor": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_start + tf.cast(tf.range(depth_num), tf.float32) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "tf.div(1.0, inv_depth)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "input": {
                    "value": "temp_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(c_relative, fronto_direction)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(temp_vec, axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(c_relative, fronto_direction)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(temp_vec, axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_42": {
                "num_rows": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[batch_size, num_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_43": {
                "input": {
                    "value": "tf.matmul(R_left_trans, K_left_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_46": {
                "input": {
                    "value": "K_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(right_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "tf.tile(R_right, [1, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "middle_mat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(middle_mat0, middle_mat1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(middle_mat0, middle_mat1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_64": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(depth_num, 'int32'), [])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(depth_num, 'int32'), [])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_66": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "depth_start",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_67": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "depth_end",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_start + tf.cast(tf.range(depth_num), tf.float32) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "tf.div(1.0, inv_depth)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_73": {
                "input": {
                    "value": "K_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "input": {
                    "value": "R_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_75": {
                "input": {
                    "value": "R_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "input": {
                    "value": "R_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "a": {
                    "value": "R_left_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.squeeze(t_left, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "a": {
                    "value": "R_right_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_right, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(R_right, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.squeeze(t_right, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "R_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_start + tf.cast(tf.range(depth_num), tf.float32) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "tf.div(1.0, inv_depth)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "input": {
                    "value": "temp_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(c_relative, fronto_direction)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(temp_vec, axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(c_relative, fronto_direction)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(temp_vec, axis=1), [1, num_depth, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_90": {
                "num_rows": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[batch_size, num_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "tf.matmul(R_left_trans, K_left_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_94": {
                "input": {
                    "value": "K_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(right_cam, [0, 1, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "tf.tile(R_right, [1, num_depth, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "middle_mat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(middle_mat0, middle_mat1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(middle_mat0, middle_mat1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[2]",
                            "Subscript"
                        ],
                        [
                            "image_shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_103": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "image_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_189": {
                "x": {
                    "value": "tf.equal(grids_div, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_22": {
                "x": {
                    "value": "tf.range(depth_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_31": {
                "input": {
                    "value": "t_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_32": {
                "input": {
                    "value": "t_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(right_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "a": {
                    "value": "R_left_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_left_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(tf.squeeze(K_left, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(tf.squeeze(K_left, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_47": {
                "input": {
                    "value": "R_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "input": {
                    "value": "t_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(left_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(left_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "input": {
                    "value": "t_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(right_cam, [0, 0, 0, 3], [-1, 1, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "a": {
                    "value": "R_left_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.squeeze(R_left, axis=1), perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_left_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(tf.squeeze(K_left, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.matrix_inverse(tf.squeeze(K_left, axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_95": {
                "input": {
                    "value": "R_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.slice(right_cam, [0, 0, 0, 0], [-1, 1, 3, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_depth, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_189": {
                "x": {
                    "value": "grids_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(div_mat, pixel_grids)",
                            "Call"
                        ],
                        [
                            "grids_div + grids_zero_add",
                            "BinOp"
                        ],
                        [
                            "tf.tile(grids_div, [1, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/loss.py": {
        "tensorflow": {
            "cast_64": {
                "variable": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(gt_depth_image, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_67": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_depth_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_69": {
                "variable": {
                    "value": "start_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth_start, [shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, shape[1], shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_71": {
                "variable": {
                    "value": "interval_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth_interval, [shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, shape[1], shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_72": {
                "variable": {
                    "value": "gt_index_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt_depth_image - start_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "interval_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(depth_interval, [shape[0], 1, 1, 1]), [1, shape[1], shape[2], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_73": {
                "variable": {
                    "value": "gt_index_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(gt_depth_image, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gt_index_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(gt_depth_image - start_mat, interval_mat)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask_true, gt_index_image)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.round(gt_index_image), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_74": {
                "variable": {
                    "value": "gt_index_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(gt_index_image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_76": {
                "variable": {
                    "value": "gt_index_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "gt_index_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(gt_depth_image - start_mat, interval_mat)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask_true, gt_index_image)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.round(gt_index_image), dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_80": {
                "variable": {
                    "value": "masked_cross_entropy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(gt_depth_image, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cross_entropy_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(gt_index_volume * tf.log(prob_volume), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "masked_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_cross_entropy_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(mask_true, cross_entropy_image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "masked_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_cross_entropy / valid_pixel_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_85": {
                "variable": {
                    "value": "wta_index_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(prob_volume, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_17": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "interval",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(interval, [shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(y_true, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_21": {
                "variable": {
                    "value": "masked_abs_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_true * (y_true - y_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "variable": {
                    "value": "masked_mae",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_abs_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(mask_true * (y_true - y_pred))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_23": {
                "variable": {
                    "value": "masked_mae",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_mae / interval / denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_29": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(y_true, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_32": {
                "variable": {
                    "value": "interval_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(interval, [shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, shape[1], shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_40": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(y_true, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_43": {
                "variable": {
                    "value": "interval_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(interval, [shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, shape[1], shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_16": {
                "name": {
                    "value": "MAE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "less_one_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "less_one_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_true * tf.cast(tf.less_equal(abs_diff_image, 1.0), dtype='float32')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_39": {
                "name": {
                    "value": "less_three_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "less_three_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_true * tf.cast(tf.less_equal(abs_diff_image, 3.0), dtype='float32')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "not_equal_64": {
                "x": {
                    "value": "gt_depth_image",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(gt_depth_image, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "tensor": {
                    "value": "depth_start",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "tensor": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_74": {
                "x": {
                    "value": "gt_index_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div(gt_depth_image - start_mat, interval_mat)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask_true, gt_index_image)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.round(gt_index_image), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "gt_index_volume * tf.log(prob_volume)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "input": {
                    "value": "prob_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_89": {
                "x": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_91": {
                "x": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_93": {
                "x": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "not_equal_19": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(gt_depth_image, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_30": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(gt_depth_image, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_32": {
                "tensor": {
                    "value": "interval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(interval, [shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_33": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_34": {
                "x": {
                    "value": "tf.less_equal(abs_diff_image, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_41": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_42": {
                "input_tensor": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(y_true, 0.0), dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.not_equal(gt_depth_image, 0.0), dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "tensor": {
                    "value": "interval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(interval, [shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_44": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "tf.less_equal(abs_diff_image, 3.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_equal_34": {
                "x": {
                    "value": "abs_diff_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(y_true - y_pred) / interval_image",
                            "BinOp"
                        ],
                        [
                            "tf.abs(y_true - y_pred) / interval_image",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_equal_45": {
                "x": {
                    "value": "abs_diff_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(y_true - y_pred) / interval_image",
                            "BinOp"
                        ],
                        [
                            "tf.abs(y_true - y_pred) / interval_image",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_68": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_78": {
                "x": {
                    "value": "prob_volume",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/model.py": {
        "tensorflow": {
            "shape_30": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_37": {
                "variable": {
                    "value": "b_coordinates",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_38": {
                "variable": {
                    "value": "y_coordinates",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_39": {
                "variable": {
                    "value": "x_coordinates",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_40": {
                "variable": {
                    "value": "(b_coordinates, y_coordinates, x_coordinates)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "b_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size)",
                            "Call"
                        ],
                        [
                            "_repeat_(b_coordinates, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(height)",
                            "Call"
                        ],
                        [
                            "_repeat_(y_coordinates, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "d_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "(depth_map - depth_start) / depth_interval",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_47": {
                "variable": {
                    "value": "d_coordinates_left0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(tf.floor(d_coordinates), 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_48": {
                "variable": {
                    "value": "d_coordinates_left1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "d_coordinates_left0 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_49": {
                "variable": {
                    "value": "d_coordinates1_right0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.cast(tf.ceil(d_coordinates), 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_50": {
                "variable": {
                    "value": "d_coordinates1_right1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "d_coordinates1_right0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "voxel_coordinates_left0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_coordinates, d_coordinates_left0, y_coordinates, x_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "voxel_coordinates_left1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_coordinates, d_coordinates_left1, y_coordinates, x_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "voxel_coordinates_right0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_coordinates, d_coordinates1_right0, y_coordinates, x_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "voxel_coordinates_right1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b_coordinates, d_coordinates1_right1, y_coordinates, x_coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_63": {
                "variable": {
                    "value": "prob_map_left0",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "voxel_coordinates_left0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b_coordinates, d_coordinates_left0, y_coordinates, x_coordinates], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_64": {
                "variable": {
                    "value": "prob_map_left1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "voxel_coordinates_left1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b_coordinates, d_coordinates_left1, y_coordinates, x_coordinates], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_65": {
                "variable": {
                    "value": "prob_map_right0",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "voxel_coordinates_right0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b_coordinates, d_coordinates1_right0, y_coordinates, x_coordinates], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_66": {
                "variable": {
                    "value": "prob_map_right1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "voxel_coordinates_right1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([b_coordinates, d_coordinates1_right1, y_coordinates, x_coordinates], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "prob_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prob_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_map_left0 + prob_map_left1 + prob_map_right0 + prob_map_right1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(prob_map, [batch_size, height, width, 1])",
                            "Call"
                        ],
                        [
                            "get_propability_map(probability_volume, estimated_depth_map, depth_start, depth_interval)",
                            "Call"
                        ],
                        [
                            "get_propability_map(probability_volume, estimated_depth_map, depth_start, depth_interval)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "ref_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, 0, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "filtered_cost_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_cost_volume_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "variable": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "ref_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, 0, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_168": {
                "variable": {
                    "value": "ref_feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ref_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_175": {
                "variable": {
                    "value": "view_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "view_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(view_features, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_184": {
                "variable": {
                    "value": "view_homographies",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "view_homographies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(view_homographies, axis=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_227": {
                "variable": {
                    "value": "filtered_cost_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_cost_volume_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_260": {
                "variable": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_261": {
                "variable": {
                    "value": "ref_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, 0, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "state1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], gru1_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "state2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], gru2_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "state3",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], gru3_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "exp_div",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "variable": {
                    "value": "soft_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_340": {
                "variable": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_341": {
                "variable": {
                    "value": "ref_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, 0, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "variable": {
                    "value": "state1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], gru1_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_373": {
                "variable": {
                    "value": "state2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], gru2_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_374": {
                "variable": {
                    "value": "state3",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], gru3_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_380": {
                "variable": {
                    "value": "exp_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "exp_sum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_383": {
                "variable": {
                    "value": "depth_image",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "depth_image",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_386": {
                "variable": {
                    "value": "max_prob_image",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "max_prob_image",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_389": {
                "variable": {
                    "value": "init_map",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_447": {
                "variable": {
                    "value": "exp_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "exp_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]), name='exp_sum', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(exp_sum, init_map)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(exp_sum, prob)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "init_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_448": {
                "variable": {
                    "value": "depth_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "depth_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]), name='depth_image', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(depth_image, init_map)",
                            "Call"
                        ],
                        [
                            "tf.assign(depth_image, new_depth_image)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "init_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_449": {
                "variable": {
                    "value": "max_prob_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "max_prob_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]), name='max_prob_image', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(max_prob_image, init_map)",
                            "Call"
                        ],
                        [
                            "tf.assign(max_prob_image, new_max_prob_image)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "init_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_450": {
                "variable": {
                    "value": "depth_index",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_451": {
                "variable": {
                    "value": "incre",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_453": {
                "variable": {
                    "value": "(_, state1, state2, state3, depth_image, max_prob_image, exp_sum, incre)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda view, *_: tf.less(view, FLAGS.view_num - 1)",
                            "Lambda"
                        ],
                        [
                            "lambda depth_index, *_: tf.less(depth_index, depth_num)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[depth_index, state1, state2, state3, depth_image, max_prob_image, exp_sum, incre]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_467": {
                "variable": {
                    "value": "depth_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_depth_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_469": {
                "variable": {
                    "value": "depth_start_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth_start, [depth_shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, depth_shape[1], depth_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_471": {
                "variable": {
                    "value": "depth_end_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(depth_end, [depth_shape[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, depth_shape[1], depth_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_476": {
                "variable": {
                    "value": "init_norm_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "init_depth_map - depth_start_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "depth_scale_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_end_mat - depth_start_mat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "resize_bilinear_479": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[depth_shape[1], depth_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_25": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, num_repeats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((1, num_repeats), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "view_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_96": {
                "variable": {
                    "value": "view_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, view, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "cost_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "depth_costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "probability_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.scalar_mul(-1, filtered_cost_volume)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_volume",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_134": {
                "variable": {
                    "value": "volume_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), axis=1, name='prob_volume')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), axis=1, name='prob_volume')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "soft_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(soft_2d, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[volume_shape[0], volume_shape[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_140": {
                "variable": {
                    "value": "soft_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, volume_shape[2], volume_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft_4d * probability_volume",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_142": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_depth_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_172": {
                "variable": {
                    "value": "view_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_180": {
                "variable": {
                    "value": "view_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, view, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_220": {
                "variable": {
                    "value": "cost_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "depth_costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_232": {
                "variable": {
                    "value": "probability_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.scalar_mul(-1, filtered_cost_volume)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_volume",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_236": {
                "variable": {
                    "value": "volume_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), axis=1, name='prob_volume')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(tf.scalar_mul(-1, filtered_cost_volume), axis=1, name='prob_volume')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "soft_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack(soft_2d, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[volume_shape[0], volume_shape[1], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_242": {
                "variable": {
                    "value": "soft_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, volume_shape[2], volume_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "soft_4d * probability_volume",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_244": {
                "variable": {
                    "value": "estimated_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_depth_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(soft_4d * probability_volume, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(estimated_depth_map, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_270": {
                "variable": {
                    "value": "view_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_277": {
                "variable": {
                    "value": "view_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, view, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_327": {
                "variable": {
                    "value": "prob_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "depth_costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_328": {
                "variable": {
                    "value": "prob_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "prob_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(depth_costs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(prob_volume, axis=1, name='prob_volume')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_volume",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_350": {
                "variable": {
                    "value": "view_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_357": {
                "variable": {
                    "value": "view_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(cams, [0, view, 0, 0, 0], [-1, 1, 2, 4, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_397": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ref_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_415": {
                "variable": {
                    "value": "reg_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_cost3",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_417": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reg_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(reg_cost3, 1, 3, padding='same', reuse=tf.AUTO_REUSE, name='prob_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(reg_cost3, 1, 3, padding='same', reuse=tf.AUTO_REUSE, name='prob_conv')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_420": {
                "variable": {
                    "value": "d_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(depth_index, incre)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "temp_depth_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(cv)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.div(1.0, inv_depth)",
                            "Call"
                        ],
                        [
                            "depth_start + d_idx * depth_interval",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[FLAGS.batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_430": {
                "variable": {
                    "value": "temp_depth_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_depth_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(depth, [FLAGS.batch_size, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(temp_depth_image, [1, feature_shape[1], feature_shape[2], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, feature_shape[1], feature_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_434": {
                "variable": {
                    "value": "update_flag_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(max_prob_image, prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_437": {
                "variable": {
                    "value": "max_prob_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "max_prob_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]), name='max_prob_image', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(max_prob_image, init_map)",
                            "Call"
                        ],
                        [
                            "tf.assign(max_prob_image, new_max_prob_image)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_max_prob_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "update_flag_image * prob + (1 - update_flag_image) * max_prob_image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_438": {
                "variable": {
                    "value": "depth_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "depth_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]), name='depth_image', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(depth_image, init_map)",
                            "Call"
                        ],
                        [
                            "tf.assign(depth_image, new_depth_image)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "new_depth_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "update_flag_image * temp_depth_image + (1 - update_flag_image) * depth_image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_add_441": {
                "variable": {
                    "value": "exp_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "exp_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]), name='exp_sum', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(exp_sum, init_map)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(exp_sum, prob)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(reg_cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_442": {
                "variable": {
                    "value": "depth_index",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(depth_index, incre)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "incre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_28": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, ones)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "tf.floor(d_coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_49": {
                "x": {
                    "value": "tf.ceil(d_coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_79": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_80": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_102": {
                "name": {
                    "value": "cost_volume_homography",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_107": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ref_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_129": {
                "name": {
                    "value": "soft_arg_min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_137": {
                "variable": {
                    "value": "soft_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "depth_start[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stop": {
                    "value": "depth_end[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(depth_num, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_159": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_160": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_187": {
                "name": {
                    "value": "cost_volume_homography",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_192": {
                "variable": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ave",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "ave2",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_198": {
                "variable": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "ref_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_199": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave2', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ref_feature2)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ave_feature2 / FLAGS.view_num - ave_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature2, tf.square(warped_view_feature))",
                            "Call"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "ref_feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(ref_feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_212": {
                "variable": {
                    "value": "view",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_214": {
                "variable": {
                    "value": "(_, ave_feature, ave_feature2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda view, *_: tf.less(view, FLAGS.view_num - 1)",
                            "Lambda"
                        ],
                        [
                            "lambda depth_index, *_: tf.less(depth_index, depth_num)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[view, ave_feature, ave_feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_217": {
                "variable": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_218": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave2', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ref_feature2)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ave_feature2 / FLAGS.view_num - ave_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature2, tf.square(warped_view_feature))",
                            "Call"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "ave_feature2 / FLAGS.view_num - ave_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_230": {
                "name": {
                    "value": "soft_arg_min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "linspace_239": {
                "variable": {
                    "value": "soft_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "depth_start[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stop": {
                    "value": "depth_end[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(depth_num, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_260": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_261": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_297": {
                "name": {
                    "value": "cost_volume_homography",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_305": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ref_tower.get_output()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_323": {
                "variable": {
                    "value": "reg_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_cost3",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_340": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_341": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_380": {
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_386": {
                "shape": {
                    "value": "[FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_400": {
                "variable": {
                    "value": "homographies",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "homographies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_homographies(ref_cam, view_cam, depth_num=depth_num, depth_start=depth_start, depth_interval=depth_interval)",
                            "Call"
                        ],
                        [
                            "get_homographies(ref_cam, view_cam, depth_num=depth_num, depth_start=depth_start, depth_interval=depth_interval)",
                            "Call"
                        ],
                        [
                            "get_homographies(ref_cam, view_cam, depth_num=depth_num, depth_start=depth_start, depth_interval=depth_interval)",
                            "Call"
                        ],
                        [
                            "get_homographies_inv_depth(ref_cam, view_cam, depth_num=depth_num, depth_start=depth_start, depth_end=depth_end)",
                            "Call"
                        ],
                        [
                            "get_homographies(ref_cam, view_cam, depth_num=depth_num, depth_start=depth_start, depth_interval=depth_interval)",
                            "Call"
                        ],
                        [
                            "view_homographies[view]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(homographies, perm=[1, 0, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_422": {
                "variable": {
                    "value": "inv_depth_start",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "depth_start",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_423": {
                "variable": {
                    "value": "inv_depth_end",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "depth_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_426": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "inv_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_depth_start - d_idx * inv_interval",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_452": {
                "x": {
                    "value": "depth_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(depth_index, incre)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_469": {
                "tensor": {
                    "value": "depth_start",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[depth_shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_471": {
                "tensor": {
                    "value": "depth_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ],
                        [
                            "depth_start + (tf.cast(depth_num, tf.float32) - 1) * depth_interval",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[depth_shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_491": {
                "x": {
                    "value": "norm_depth_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_depth_tower.get_output()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "depth_scale_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_end_mat - depth_start_mat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_47": {
                "x": {
                    "value": "d_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape((depth_map - depth_start) / depth_interval, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_49": {
                "x": {
                    "value": "d_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape((depth_map - depth_start) / depth_interval, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_89": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_96": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_109": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "view_homographies[view]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, d, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_110": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "homographies[depth_index]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_mul_132": {
                "scalar": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "filtered_cost_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_139": {
                "values": {
                    "value": "soft_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_172": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_180": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_203": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "view_homographies[view]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, d, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_204": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "homographies[depth_index]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_add_207": {
                "variable": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "warped_view_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_features[view], homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_208": {
                "variable": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "ave_feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave2', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ref_feature2)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature2, ave_feature2 / FLAGS.view_num - ave_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature2, tf.square(warped_view_feature))",
                            "Call"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.square(ref_tower.get_output())",
                            "Call"
                        ],
                        [
                            "ave_feature2 + tf.square(warped_view_feature)",
                            "BinOp"
                        ],
                        [
                            "ave_feature2 / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.square(warped_view_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_209": {
                "variable": {
                    "value": "view",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(0, FLAGS.view_num - 1)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(view, 1)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(0, FLAGS.view_num - 1)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(0, FLAGS.view_num - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_mul_232": {
                "scalar": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "filtered_cost_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(filtered_cost_volume_tower.get_output(), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_241": {
                "values": {
                    "value": "soft_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.stack(soft_2d, axis=0), [volume_shape[0], volume_shape[1], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_270": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_277": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_308": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "view_homographies[view]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, d, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_310": {
                "variable": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "homography",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(view_homographies[view], begin=[0, d, 0, 0], size=[-1, 1, 3, 3])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(homography, axis=1)",
                            "Call"
                        ],
                        [
                            "homographies[depth_index]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_350": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_357": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_408": {
                "x": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_434": {
                "x": {
                    "value": "max_prob_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_shape[1], feature_shape[2], 1]), name='max_prob_image', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(max_prob_image, init_map)",
                            "Call"
                        ],
                        [
                            "tf.assign(max_prob_image, new_max_prob_image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(reg_cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_76": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_117": {
                "x": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_137": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_153": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "shape": {
                    "value": "[FLAGS.batch_size, feature_h, feature_w, feature_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "shape": {
                    "value": "[FLAGS.batch_size, feature_h, feature_w, feature_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_213": {
                "x": {
                    "value": "view",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(0, FLAGS.view_num - 1)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "tf.add(view, 1)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(0, FLAGS.view_num - 1)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(1, FLAGS.view_num)",
                            "Call"
                        ],
                        [
                            "range(0, FLAGS.view_num - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "FLAGS.view_num - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_239": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_257": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_317": {
                "x": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_337": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_405": {
                "x": {
                    "value": "warped_view_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_features[view], homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_468": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_114": {
                "x": {
                    "value": "warped_view_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_features[view], homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_208": {
                "x": {
                    "value": "warped_view_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_features[view], homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_217": {
                "x": {
                    "value": "ave_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(tf.zeros([FLAGS.batch_size, feature_h, feature_w, feature_c]), name='ave', trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, ref_feature)",
                            "Call"
                        ],
                        [
                            "tf.assign(ave_feature, tf.square(ave_feature) / (FLAGS.view_num * FLAGS.view_num))",
                            "Call"
                        ],
                        [
                            "tf.assign_add(ave_feature, warped_view_feature)",
                            "Call"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ],
                        [
                            "ref_tower.get_output()",
                            "Call"
                        ],
                        [
                            "ave_feature + warped_view_feature",
                            "BinOp"
                        ],
                        [
                            "ave_feature / FLAGS.view_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_314": {
                "x": {
                    "value": "warped_view_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_features[view], homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ],
                        [
                            "tf_transform_homography(view_towers[view].get_output(), homography)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_424": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/photometric_augmentation.py": {
        "tensorflow": {
            "clip_by_value_17": {
                "variable": {
                    "value": "noisy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_24": {
                "variable": {
                    "value": "noisy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample <= prob",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_25": {
                "variable": {
                    "value": "noisy_image",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sample >= 1.0 - prob",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "255.0 * tf.ones_like(image)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "noisy_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(image + noise, 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.where(sample <= prob, tf.zeros_like(image), image)",
                            "Call"
                        ],
                        [
                            "tf.where(sample >= 1.0 - prob, 255.0 * tf.ones_like(image), noisy_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "py_func_60": {
                "variable": {
                    "value": "shaded",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_py_additive_shade",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "shaded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(_py_additive_shade, [image], tf.float32)",
                            "Call"
                        ],
                        [
                            "img * (1 - transparency * mask[..., np.newaxis] / 255.0)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "numpy_function_89": {
                "variable": {
                    "value": "blurred",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_py_motion_blur",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_30": {
                "t": {
                    "value": "tf.image.random_brightness(image, max_abs_change)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_34": {
                "t": {
                    "value": "tf.image.random_contrast(image, *strength_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "tensor": {
                    "value": "blurred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.numpy_function(_py_motion_blur, [image], tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_105": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "while_loop_115": {
                "variable": {
                    "value": "(_, aug_image)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, image: tf.less(i, len(primitives))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[0, image]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_16": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_23": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_24": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_30": {
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "max_abs_change",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_contrast_34": {
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "*strength_range",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_90": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_102": {
                "name": {
                    "value": "online_augmentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_107": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(len(primitives))",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "case_112": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "fn_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(tf.equal(indices[i], j), lambda p=p, c=c: getattr(photaug, p)(image, **c)) for (j, (p, c)) in enumerate(zip(primitives, prim_configs))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ones_like_25": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_115": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nb_ellipses)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "len(primitives)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_110": {
                "x": {
                    "value": "indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/preprocess.py": {
        "tensorflow": {
            "split_246": {
                "variable": {
                    "value": "cluster_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_478": {
                "variable": {
                    "value": "dict_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_494": {
                "variable": {
                    "value": "cluster_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/test.py": {
        "tensorflow": {
            "set_verbosity_18": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "dense_folder",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Root path to dense folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "pretrained_model_ckpt_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/tf_model/3DCNNs/BlendedMVS/blended_augmented/model.ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to restore the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "ckpt_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "ckpt step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "view_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images (1 ref image and view_num - 1 view images).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "max_d",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum depth step when testing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "max_w",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image width when testing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "max_h",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image height when testing.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_44": {
                "name": {
                    "value": "sample_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume (W and H).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_46": {
                "name": {
                    "value": "interval_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume (D).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_48": {
                "name": {
                    "value": "base_image_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Base image size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Testing batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_52": {
                "name": {
                    "value": "adaptive_scaling",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Let image size to fit the network, including 'scaling', 'cropping'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "regularization",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "GRU",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Regularization method, including '3DCNNs' and 'GRU'\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_60": {
                "name": {
                    "value": "inverse_depth",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to apply inverse depth for R-MVSNet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "depth_start",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(scaled_cams, [0, 0, 1, 3, 0], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(scaled_cams, [0, 0, 1, 3, 1], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_176": {
                "variable": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.slice(scaled_cams, [0, 0, 1, 3, 2], [1, 1, 1, 1, 1]), [])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_202": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_203": {
                "variable": {
                    "value": "var_init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_206": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "depth_end",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(scaled_cams, [0, 0, 1, 3, 3], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "run_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_169": {
                "dims": {
                    "value": "[None, FLAGS.view_num, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_170": {
                "dims": {
                    "value": "[None, FLAGS.view_num, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_171": {
                "dims": {
                    "value": "[None, FLAGS.view_num, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_173": {
                "input_": {
                    "value": "scaled_cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_mvs_camera(croped_cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(scaled_cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_175": {
                "input_": {
                    "value": "scaled_cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_mvs_camera(croped_cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(scaled_cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "tensor": {
                    "value": "tf.slice(scaled_cams, [0, 0, 1, 3, 2], [1, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(centered_images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_209": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_218": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_177": {
                "input_": {
                    "value": "scaled_cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_mvs_camera(croped_cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(scaled_cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_182": {
                "input_": {
                    "value": "scaled_cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_mvs_camera(croped_cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(scaled_cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_192": {
                "input_": {
                    "value": "centered_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_184": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.slice(scaled_cams, [0, 0, 1, 3, 2], [1, 1, 1, 1, 1]), []), 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/train.py": {
        "tensorflow": {
            "set_verbosity_19": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "blendedmvs_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/BlendedMVS/dataset_low_res",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to dtu dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "eth3d_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/eth3d/lowres/training/undistorted",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to dtu dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "dtu_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/dtu",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to dtu dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "log_folder",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/tf_log",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to store the log.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_49": {
                "name": {
                    "value": "model_folder",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/tf_model",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to save the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "ckpt_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "ckpt step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "view_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images (1 ref image and view_num - 1 view images).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "max_d",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum depth step when training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "max_w",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image width when training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "max_h",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image height when training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_65": {
                "name": {
                    "value": "sample_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "regularization",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "GRU",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Regularization method.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_75": {
                "name": {
                    "value": "num_gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of GPUs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_77": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Training batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "epoch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Training epoch number.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_81": {
                "name": {
                    "value": "base_lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Base learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_83": {
                "name": {
                    "value": "display",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Interval of loginfo display.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_85": {
                "name": {
                    "value": "stepvalue",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Step interval to decay learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_87": {
                "name": {
                    "value": "snapshot",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Step interval to save the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_89": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_110": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "while_loop_120": {
                "variable": {
                    "value": "(_, aug_image)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, image: tf.less(i, len(primitives))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "step + FLAGS.batch_size * FLAGS.num_gpus",
                            "BinOp"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[0, image]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_228": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "average_gradients(tower_grads)",
                            "Call"
                        ],
                        [
                            "opt.compute_gradients(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_229": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_260": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_261": {
                "variable": {
                    "value": "lr_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "FLAGS.stepvalue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "FLAGS.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_263": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.base_lr, global_step=global_step, decay_steps=FLAGS.stepvalue, decay_rate=FLAGS.gamma, name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_348": {
                "variable": {
                    "value": "weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_356": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "merge_357": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.SUMMARIES, scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_360": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_361": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "online_augmentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_112": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(len(primitives))",
                            "Call"
                        ],
                        [
                            "tf.random.shuffle(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "case_117": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "fn_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(tf.equal(indices[i], j), lambda p=p, c=c: getattr(photaug, p)(image, **c)) for (j, (p, c)) in enumerate(zip(primitives, prim_configs))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "expand_dims_222": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Graph_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_246": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_369": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.log_folder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_344": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(loss0 + loss1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_345": {
                "name": {
                    "value": "less_one_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "less_one_accuracy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_346": {
                "name": {
                    "value": "less_three_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "less_three_accuracy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_347": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(FLAGS.base_lr, global_step=global_step, decay_steps=FLAGS.stepvalue, decay_rate=FLAGS.gamma, name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_364": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_374": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_120": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(FLAGS.num_gpus)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "len(primitives)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_267": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_280": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "arg_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "depth_start",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(cams, [0, 0, 1, 3, 0], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(cams, [0, 0, 1, 3, 1], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_329": {
                "variable": {
                    "value": "summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_350": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_list",
                            "variable"
                        ]
                    ]
                }
            },
            "equal_115": {
                "x": {
                    "value": "indices[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_268": {
                "name": {
                    "value": "'Model_tower%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_275": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "per_image_standardization_278": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, 3]), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(online_augmentation, image, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(data[2 * view])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_353": {
                "name": {
                    "value": "var.op.name + '/gradients'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "map_fn_277": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "online_augmentation",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.case(fn_pairs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, 3]), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(online_augmentation, image, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(data[2 * view])",
                            "Call"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorShape_282": {
                "dims": {
                    "value": "[None, FLAGS.view_num, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_283": {
                "dims": {
                    "value": "[None, FLAGS.view_num, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_284": {
                "dims": {
                    "value": "[None, None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_286": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_288": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_303": {
                "variable": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, 0, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_275": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(arg_images, axis=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_304": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(arg_images, axis=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mvsnet/validate.py": {
        "tensorflow": {
            "set_verbosity_18": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "blendedmvs_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/BlendedMVS/dataset_low_res",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to dtu dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "eth3d_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/eth3d/lowres/training/undistorted",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to dtu dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "dtu_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/dtu",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to dtu dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "validate_set",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "dtu",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Dataset to validate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "view_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of images (1 ref image and view_num - 1 view images).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "max_d",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum depth step when training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "max_w",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image width when training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "max_h",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum image height when training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_45": {
                "name": {
                    "value": "sample_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_47": {
                "name": {
                    "value": "interval_scale",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Downsample scale for building cost volume.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "training batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_51": {
                "name": {
                    "value": "inverse_depth",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Apply inverse depth.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_53": {
                "name": {
                    "value": "regularization",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3DCNNs",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Regularization type.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "pretrained_model_ckpt_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/tf_model/3DCNNs/BlendedMVS/blended_augmented/model.ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to restore the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "ckpt_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "150000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "ckpt step.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "validation_result_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/tf_model/3DCNNs/BlendedMVS/blended_augmented/validation_results.txt",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to restore the model.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "depth_start",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(cams, [0, 0, 1, 3, 0], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(cams, [0, 0, 1, 3, 1], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_141": {
                "variable": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(tf.slice(cams, [0, 0, 1, 3, 2], [1, 1, 1, 1, 1]), [])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "normalized_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_173": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_174": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "depth_end",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(cams, [0, 0, 1, 3, 3], [FLAGS.batch_size, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "per_image_standardization_152": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(images, [0, view, 0, 0, 0], [-1, 1, -1, -1, 3]), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ],
                        [
                            "cv2.imread(data[2 * view])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_165": {
                "variable": {
                    "value": "interval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(cams, [0, 0, 1, 3, 1], [FLAGS.batch_size, 1, 1, 1, 1]), [FLAGS.batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "run_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_134": {
                "dims": {
                    "value": "[None, FLAGS.view_num, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_135": {
                "dims": {
                    "value": "[None, FLAGS.view_num, 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_136": {
                "dims": {
                    "value": "[None, None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_137": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_139": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "tensor": {
                    "value": "tf.slice(cams, [0, 0, 1, 3, 2], [1, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_181": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_188": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_141": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_144": {
                "input_": {
                    "value": "cams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "scale_mvs_camera(cams, scale=FLAGS.sample_scale)",
                            "Call"
                        ],
                        [
                            "np.stack(cams, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[FLAGS.batch_size, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_151": {
                "input_": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(normalized_images, axis=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(images, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, view, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1, -1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_146": {
                "x": {
                    "value": "depth_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(tf.slice(cams, [0, 0, 1, 3, 2], [1, 1, 1, 1, 1]), []), 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}