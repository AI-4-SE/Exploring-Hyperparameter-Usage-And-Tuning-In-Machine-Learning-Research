{
    "models/snowball.py": {
        "sklearn": {},
        "torch": {
            "Siamese_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.sentence_encoder": {
                    "value": "sentence_encoder",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ],
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "Linear_21": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "hidden_size",
                        "possible_values": [
                            [
                                "230",
                                "MethodArgument"
                            ],
                            [
                                "230",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "BCELoss_22": {
                    "variable": {
                        "value": "self.cost",
                        "possible_values": []
                    },
                    "reduction": {
                        "value": "none",
                        "possible_values": []
                    }
                },
                "Dropout_23": {
                    "variable": {
                        "value": "self.drop",
                        "possible_values": []
                    },
                    "p": {
                        "value": "drop_rate",
                        "possible_values": [
                            [
                                "0.5",
                                "MethodArgument"
                            ],
                            [
                                "0.5",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "self.pre_rep": {
                    "value": "pre_rep",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.euc": {
                    "value": "euc",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.size(0) + y1.size(0)",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "z1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "z2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, y2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "score.size(0)",
                    "possible_values": []
                }
            },
            "mean_58": {
                "variable": {
                    "value": "self._accuracy",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred == label).type(torch.FloatTensor)",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "score.size(0)",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ],
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "base_class",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "variable": {
                    "value": "self.drop",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCELoss_143": {
                "variable": {
                    "value": "self.cost",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.base_class)",
                    "possible_values": []
                }
            },
            "mean_233": {
                "variable": {
                    "value": "proto",
                    "possible_values": []
                },
                "input": {
                    "value": "support_rep",
                    "possible_values": [
                        [
                            "self.encode(support, self.args.infer_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "max_235": {
                "variable": {
                    "value": "(_, pred)",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, N)",
                    "possible_values": []
                }
            },
            "Adam_272": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.new_W, self.new_bias]",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.finetune_lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.finetune_wd",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "dataset_dst[word]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset_dst['word'], dataset_src['word'][ins_id].unsqueeze(0)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "dataset_dst[mask]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset_dst['mask'], dataset_src['mask'][ins_id].unsqueeze(0)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_380": {
                "variable": {
                    "value": "dataset[word]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dataset['word']",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_384": {
                "variable": {
                    "value": "dataset[mask]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dataset['mask']",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "dataset[id]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dataset['id']",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sigmoid_421": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_670": {
                "variable": {
                    "value": "self.Ws",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Ws",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_670": {
                "variable": {
                    "value": "self.Ws",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_671": {
                "variable": {
                    "value": "self.bs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bs",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_671": {
                "variable": {
                    "value": "self.bs",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sigmoid_676": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_43": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "z1 - z2",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(dis).squeeze()",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "z1 * z2",
                            "BinOp"
                        ],
                        [
                            "self.drop(z)",
                            "Call"
                        ],
                        [
                            "self.fc(z).squeeze()",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "self.fc(z).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "self.fc(z).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_98": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "x - y",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(dis).squeeze(-1)",
                    "possible_values": []
                }
            },
            "mean_99": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "z1 * z2",
                            "BinOp"
                        ],
                        [
                            "self.drop(z)",
                            "Call"
                        ],
                        [
                            "self.fc(z).squeeze()",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "self.fc(z).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "self.fc(z).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_103": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "pow_120": {
                "variable": {
                    "value": "dis",
                    "possible_values": []
                },
                "input": {
                    "value": "x - y",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(dis).squeeze(-1)",
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "z1 * z2",
                            "BinOp"
                        ],
                        [
                            "self.drop(z)",
                            "Call"
                        ],
                        [
                            "self.fc(z).squeeze()",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "self.fc(z).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x * y",
                            "BinOp"
                        ],
                        [
                            "self.fc(z).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_125": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "pow_219": {
                "input": {
                    "value": "x - y",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "Adam_287": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.new_W, self.new_bias]",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_363": {
                "variable": {
                    "value": "dataset_dst[pos1]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset_dst['pos1'], dataset_src['pos1'][ins_id].unsqueeze(0)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "dataset_dst[pos2]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset_dst['pos2'], dataset_src['pos2'][ins_id].unsqueeze(0)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "dataset_dst[id]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset_dst['id'], dataset_src['id'][ins_id].unsqueeze(0)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "dataset_dst[label]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset_dst['label'], torch.ones(1).long().cuda()]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_382": {
                "variable": {
                    "value": "dataset[pos1]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dataset['pos1']",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_383": {
                "variable": {
                    "value": "dataset[pos2]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dataset['pos2']",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_311": {
                "variable": {
                    "value": "batch_label",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, neg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "batch_label",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_label, torch.zeros(neg_size).long().cuda()]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sigmoid_320": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_323": {
                "variable": {
                    "value": "weight",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_label.size(0)",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "matmul_420": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.new_W",
                    "possible_values": []
                }
            },
            "matmul_675": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.Ws",
                    "possible_values": []
                }
            },
            "matmul_319": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data).contiguous().view(num_class, num_size, -1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.encode(x, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "data_repre[order[i * batch_size:min((i + 1) * batch_size, data_repre.size(0))]]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x, neg], 0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(dataset)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, 0)",
                            "Call"
                        ],
                        [
                            "self.encode(dataset, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.new_W) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.Ws) + self.new_bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.new_W",
                    "possible_values": []
                }
            },
            "ones_371": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "*size": {
                    "value": "neg_size",
                    "possible_values": [
                        [
                            "int(x.size(0) * 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_403": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "nrekit/framework.py": {
        "sklearn": {
            "label_binarize_851": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "y": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "pred.view(-1).cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pred)",
                            "Call"
                        ],
                        [
                            "label_binarize(pred, classes=list(range(0, 13)) + list(range(14, self.val_data_loader.rel_tot)))",
                            "Call"
                        ]
                    ]
                },
                "classes": {
                    "value": "list(range(0, 13)) + list(range(14, self.val_data_loader.rel_tot))",
                    "possible_values": []
                }
            },
            "label_binarize_852": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "y": {
                    "value": "label",
                    "possible_values": [
                        [
                            "label.view(-1).cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(label)",
                            "Call"
                        ],
                        [
                            "label_binarize(label, classes=list(range(0, 13)) + list(range(14, self.val_data_loader.rel_tot)))",
                            "Call"
                        ]
                    ]
                },
                "classes": {
                    "value": "list(range(0, 13)) + list(range(14, self.val_data_loader.rel_tot))",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Model_21": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.sentence_encoder": {
                    "value": "sentence_encoder",
                    "possible_values": []
                },
                "BCELoss_30": {
                    "variable": {
                        "value": "self.cost",
                        "possible_values": []
                    },
                    "size_average": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "StepLR_154": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "possible_values": [
                        [
                            "optimizer(parameters_to_optimize, learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer(parameters_to_optimize, learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "lr_step_size",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ],
                        [
                            "30000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StepLR_748": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "possible_values": [
                        [
                            "optimizer(parameters_to_optimize, learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer(parameters_to_optimize, learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "lr_step_size",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ],
                        [
                            "30000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_83": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StepLR_158": {
                "variable": {
                    "value": "scheduler2",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt2",
                    "possible_values": [
                        [
                            "optimizer(parameters_to_optimize2, learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "lr_step_size",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ],
                        [
                            "30000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_598": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_56": {
                "input": {
                    "value": "(pred.view(-1) == label.view(-1)).type(torch.FloatTensor)",
                    "possible_values": []
                }
            },
            "save_703": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_243": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_804": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1000": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, model_name + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/finetune.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "base_class",
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.drop",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCELoss_18": {
                "variable": {
                    "value": "self.cost",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(support_x, new_W) + new_bias",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query_x, new_W) + new_bias",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.base_class)",
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[new_W, new_bias]",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(support_x, new_W) + new_bias",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query_x, new_W) + new_bias",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(data)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(support_x, new_W) + new_bias",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query_x, new_W) + new_bias",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "input": {
                    "value": "query_x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(query)",
                            "Call"
                        ],
                        [
                            "self.drop(query_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_W",
                    "possible_values": [
                        [
                            "Variable(self.fc.weight.mean(0) / 1000.0, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "new_W.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "input": {
                    "value": "support_x",
                    "possible_values": [
                        [
                            "self.sentence_encoder(support)",
                            "Call"
                        ],
                        [
                            "self.drop(support_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "new_W",
                    "possible_values": [
                        [
                            "Variable(self.fc.weight.mean(0) / 1000.0, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "new_W.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nrekit/data_loader.py": {
        "torch": {
            "from_numpy_277": {
                "ndarray": {
                    "value": "self.data_word[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "ndarray": {
                    "value": "self.data_pos1[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_279": {
                "ndarray": {
                    "value": "self.data_pos2[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "ndarray": {
                    "value": "self.data_mask[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_281": {
                "ndarray": {
                    "value": "self.data_label[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_282": {
                "ndarray": {
                    "value": "self.uid[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_301": {
                "ndarray": {
                    "value": "self.data_word[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_302": {
                "ndarray": {
                    "value": "self.data_pos1[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_303": {
                "ndarray": {
                    "value": "self.data_pos2[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_304": {
                "ndarray": {
                    "value": "self.data_mask[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_305": {
                "ndarray": {
                    "value": "self.uid[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_306": {
                "ndarray": {
                    "value": "self.data_label[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_324": {
                "ndarray": {
                    "value": "self.data_word[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_325": {
                "ndarray": {
                    "value": "self.data_pos1[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_326": {
                "ndarray": {
                    "value": "self.data_pos2[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_327": {
                "ndarray": {
                    "value": "self.data_mask[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "ndarray": {
                    "value": "self.data_label[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "ndarray": {
                    "value": "self.uid[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_369": {
                "ndarray": {
                    "value": "candidate['word']",
                    "possible_values": []
                }
            },
            "from_numpy_370": {
                "ndarray": {
                    "value": "candidate['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_371": {
                "ndarray": {
                    "value": "candidate['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_372": {
                "ndarray": {
                    "value": "candidate['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_373": {
                "ndarray": {
                    "value": "candidate['id']",
                    "possible_values": []
                }
            },
            "from_numpy_451": {
                "ndarray": {
                    "value": "support_pos['word']",
                    "possible_values": []
                }
            },
            "from_numpy_452": {
                "ndarray": {
                    "value": "support_pos['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_453": {
                "ndarray": {
                    "value": "support_pos['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_454": {
                "ndarray": {
                    "value": "support_pos['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_455": {
                "ndarray": {
                    "value": "support_pos['id']",
                    "possible_values": []
                }
            },
            "from_numpy_456": {
                "ndarray": {
                    "value": "support_pos['label']",
                    "possible_values": []
                }
            },
            "from_numpy_458": {
                "ndarray": {
                    "value": "support_neg['label']",
                    "possible_values": []
                }
            },
            "from_numpy_460": {
                "ndarray": {
                    "value": "query['word']",
                    "possible_values": []
                }
            },
            "from_numpy_461": {
                "ndarray": {
                    "value": "query['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_462": {
                "ndarray": {
                    "value": "query['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_463": {
                "ndarray": {
                    "value": "query['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_464": {
                "ndarray": {
                    "value": "query['id']",
                    "possible_values": []
                }
            },
            "from_numpy_465": {
                "ndarray": {
                    "value": "query['label']",
                    "possible_values": []
                }
            },
            "from_numpy_565": {
                "ndarray": {
                    "value": "support_pos['word']",
                    "possible_values": []
                }
            },
            "from_numpy_566": {
                "ndarray": {
                    "value": "support_pos['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_567": {
                "ndarray": {
                    "value": "support_pos['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_568": {
                "ndarray": {
                    "value": "support_pos['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_569": {
                "ndarray": {
                    "value": "support_pos['id']",
                    "possible_values": []
                }
            },
            "from_numpy_570": {
                "ndarray": {
                    "value": "support_pos['label']",
                    "possible_values": []
                }
            },
            "from_numpy_572": {
                "ndarray": {
                    "value": "support_neg['word']",
                    "possible_values": []
                }
            },
            "from_numpy_573": {
                "ndarray": {
                    "value": "support_neg['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_574": {
                "ndarray": {
                    "value": "support_neg['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_575": {
                "ndarray": {
                    "value": "support_neg['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_576": {
                "ndarray": {
                    "value": "support_neg['id']",
                    "possible_values": []
                }
            },
            "from_numpy_577": {
                "ndarray": {
                    "value": "support_neg['label']",
                    "possible_values": []
                }
            },
            "from_numpy_579": {
                "ndarray": {
                    "value": "query['word']",
                    "possible_values": []
                }
            },
            "from_numpy_580": {
                "ndarray": {
                    "value": "query['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_581": {
                "ndarray": {
                    "value": "query['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_582": {
                "ndarray": {
                    "value": "query['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_583": {
                "ndarray": {
                    "value": "query['id']",
                    "possible_values": []
                }
            },
            "from_numpy_584": {
                "ndarray": {
                    "value": "query['label']",
                    "possible_values": []
                }
            },
            "from_numpy_664": {
                "ndarray": {
                    "value": "np.stack(support['word'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_665": {
                "ndarray": {
                    "value": "np.stack(support['pos1'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_666": {
                "ndarray": {
                    "value": "np.stack(support['pos2'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_667": {
                "ndarray": {
                    "value": "np.stack(support['mask'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_668": {
                "ndarray": {
                    "value": "np.stack(support['id'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_669": {
                "ndarray": {
                    "value": "np.stack(query['word'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_670": {
                "ndarray": {
                    "value": "np.stack(query['pos1'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_671": {
                "ndarray": {
                    "value": "np.stack(query['pos2'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_672": {
                "ndarray": {
                    "value": "np.stack(query['mask'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_673": {
                "ndarray": {
                    "value": "np.stack(query['id'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_674": {
                "ndarray": {
                    "value": "np.stack(label, 0).astype(np.int64)",
                    "possible_values": []
                }
            },
            "from_numpy_749": {
                "ndarray": {
                    "value": "support_pos['word']",
                    "possible_values": []
                }
            },
            "from_numpy_750": {
                "ndarray": {
                    "value": "support_pos['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_751": {
                "ndarray": {
                    "value": "support_pos['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_752": {
                "ndarray": {
                    "value": "support_pos['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_753": {
                "ndarray": {
                    "value": "support_pos['id']",
                    "possible_values": []
                }
            },
            "from_numpy_754": {
                "ndarray": {
                    "value": "support_pos['label']",
                    "possible_values": []
                }
            },
            "from_numpy_756": {
                "ndarray": {
                    "value": "query['word']",
                    "possible_values": []
                }
            },
            "from_numpy_757": {
                "ndarray": {
                    "value": "query['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_758": {
                "ndarray": {
                    "value": "query['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_759": {
                "ndarray": {
                    "value": "query['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_760": {
                "ndarray": {
                    "value": "query['id']",
                    "possible_values": []
                }
            },
            "from_numpy_761": {
                "ndarray": {
                    "value": "query['label']",
                    "possible_values": []
                }
            },
            "from_numpy_792": {
                "ndarray": {
                    "value": "batch['word']",
                    "possible_values": []
                }
            },
            "from_numpy_793": {
                "ndarray": {
                    "value": "batch['pos1']",
                    "possible_values": []
                }
            },
            "from_numpy_794": {
                "ndarray": {
                    "value": "batch['pos2']",
                    "possible_values": []
                }
            },
            "from_numpy_795": {
                "ndarray": {
                    "value": "batch['mask']",
                    "possible_values": []
                }
            }
        }
    },
    "nrekit/data_loader_bert.py": {
        "torch": {
            "from_numpy_230": {
                "ndarray": {
                    "value": "self.data_word[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_231": {
                "ndarray": {
                    "value": "self.data_mask[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "ndarray": {
                    "value": "self.data_label[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "ndarray": {
                    "value": "self.uid[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "ndarray": {
                    "value": "self.data_word[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "ndarray": {
                    "value": "self.data_mask[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "ndarray": {
                    "value": "self.uid[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "ndarray": {
                    "value": "self.data_label[current_index]",
                    "possible_values": []
                }
            },
            "from_numpy_273": {
                "ndarray": {
                    "value": "self.data_word[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "ndarray": {
                    "value": "self.data_mask[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_275": {
                "ndarray": {
                    "value": "self.data_label[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "ndarray": {
                    "value": "self.uid[scope]",
                    "possible_values": []
                }
            },
            "from_numpy_303": {
                "ndarray": {
                    "value": "batch['word']",
                    "possible_values": []
                }
            },
            "from_numpy_304": {
                "ndarray": {
                    "value": "batch['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_339": {
                "ndarray": {
                    "value": "candidate['word']",
                    "possible_values": []
                }
            },
            "from_numpy_340": {
                "ndarray": {
                    "value": "candidate['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_341": {
                "ndarray": {
                    "value": "candidate['id']",
                    "possible_values": []
                }
            },
            "from_numpy_409": {
                "ndarray": {
                    "value": "support_pos['word']",
                    "possible_values": []
                }
            },
            "from_numpy_410": {
                "ndarray": {
                    "value": "support_pos['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_411": {
                "ndarray": {
                    "value": "support_pos['id']",
                    "possible_values": []
                }
            },
            "from_numpy_412": {
                "ndarray": {
                    "value": "support_pos['label']",
                    "possible_values": []
                }
            },
            "from_numpy_414": {
                "ndarray": {
                    "value": "support_neg['label']",
                    "possible_values": []
                }
            },
            "from_numpy_416": {
                "ndarray": {
                    "value": "query['word']",
                    "possible_values": []
                }
            },
            "from_numpy_417": {
                "ndarray": {
                    "value": "query['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_418": {
                "ndarray": {
                    "value": "query['id']",
                    "possible_values": []
                }
            },
            "from_numpy_419": {
                "ndarray": {
                    "value": "query['label']",
                    "possible_values": []
                }
            },
            "from_numpy_505": {
                "ndarray": {
                    "value": "support_pos['word']",
                    "possible_values": []
                }
            },
            "from_numpy_506": {
                "ndarray": {
                    "value": "support_pos['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_507": {
                "ndarray": {
                    "value": "support_pos['id']",
                    "possible_values": []
                }
            },
            "from_numpy_508": {
                "ndarray": {
                    "value": "support_pos['label']",
                    "possible_values": []
                }
            },
            "from_numpy_510": {
                "ndarray": {
                    "value": "support_neg['word']",
                    "possible_values": []
                }
            },
            "from_numpy_511": {
                "ndarray": {
                    "value": "support_neg['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_512": {
                "ndarray": {
                    "value": "support_neg['id']",
                    "possible_values": []
                }
            },
            "from_numpy_513": {
                "ndarray": {
                    "value": "support_neg['label']",
                    "possible_values": []
                }
            },
            "from_numpy_515": {
                "ndarray": {
                    "value": "query['word']",
                    "possible_values": []
                }
            },
            "from_numpy_516": {
                "ndarray": {
                    "value": "query['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_517": {
                "ndarray": {
                    "value": "query['id']",
                    "possible_values": []
                }
            },
            "from_numpy_518": {
                "ndarray": {
                    "value": "query['label']",
                    "possible_values": []
                }
            },
            "from_numpy_580": {
                "ndarray": {
                    "value": "np.stack(support['word'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_581": {
                "ndarray": {
                    "value": "np.stack(support['mask'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_582": {
                "ndarray": {
                    "value": "np.stack(support['id'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_583": {
                "ndarray": {
                    "value": "np.stack(query['word'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_584": {
                "ndarray": {
                    "value": "np.stack(query['mask'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_585": {
                "ndarray": {
                    "value": "np.stack(query['id'], 0)",
                    "possible_values": []
                }
            },
            "from_numpy_586": {
                "ndarray": {
                    "value": "np.stack(label, 0).astype(np.int64)",
                    "possible_values": []
                }
            },
            "from_numpy_649": {
                "ndarray": {
                    "value": "support_pos['word']",
                    "possible_values": []
                }
            },
            "from_numpy_650": {
                "ndarray": {
                    "value": "support_pos['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_651": {
                "ndarray": {
                    "value": "support_pos['id']",
                    "possible_values": []
                }
            },
            "from_numpy_652": {
                "ndarray": {
                    "value": "support_pos['label']",
                    "possible_values": []
                }
            },
            "from_numpy_654": {
                "ndarray": {
                    "value": "query['word']",
                    "possible_values": []
                }
            },
            "from_numpy_655": {
                "ndarray": {
                    "value": "query['mask']",
                    "possible_values": []
                }
            },
            "from_numpy_656": {
                "ndarray": {
                    "value": "query['id']",
                    "possible_values": []
                }
            },
            "from_numpy_657": {
                "ndarray": {
                    "value": "query['label']",
                    "possible_values": []
                }
            }
        }
    },
    "nrekit/network/embedding.py": {
        "torch": {
            "Embedding_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.max_length": {
                    "value": "max_length",
                    "possible_values": []
                },
                "self.word_embedding_dim": {
                    "value": "word_embedding_dim",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.pos_embedding_dim": {
                    "value": "pos_embedding_dim",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "zeros_18": {
                    "variable": {
                        "value": "blk",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out": {
                        "value": "word_embedding_dim",
                        "possible_values": [
                            [
                                "50",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "from_numpy_19": {
                    "variable": {
                        "value": "word_vec_mat",
                        "possible_values": []
                    },
                    "ndarray": {
                        "value": "word_vec_mat",
                        "possible_values": [
                            [
                                "torch.from_numpy(word_vec_mat)",
                                "Call"
                            ]
                        ]
                    }
                },
                "Embedding_20": {
                    "variable": {
                        "value": "self.word_embedding",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "word_vec_mat.shape[0] + 2",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "self.word_embedding_dim",
                        "possible_values": []
                    },
                    "padding_idx": {
                        "value": "word_vec_mat.shape[0] + 1",
                        "possible_values": []
                    }
                },
                "Embedding_24": {
                    "variable": {
                        "value": "self.pos1_embedding",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "2 * max_length",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "pos_embedding_dim",
                        "possible_values": [
                            [
                                "5",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding_idx": {
                        "value": "0",
                        "possible_values": []
                    }
                },
                "Embedding_25": {
                    "variable": {
                        "value": "self.pos2_embedding",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "2 * max_length",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "pos_embedding_dim",
                        "possible_values": [
                            [
                                "5",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding_idx": {
                        "value": "0",
                        "possible_values": []
                    }
                }
            },
            "cat_32": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.word_embedding(word), self.pos1_embedding(pos1), self.pos2_embedding(pos2)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "randn_17": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "word_embedding_dim",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "(word_vec_mat, unk, blk)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "nrekit/network/encoder.py": {
        "torch": {
            "Encoder_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.max_length": {
                    "value": "max_length",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv1d_15": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.embedding_dim",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.hidden_size",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "MaxPool1d_16": {
                    "variable": {
                        "value": "self.pool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "max_length",
                        "possible_values": []
                    }
                },
                "Embedding_19": {
                    "variable": {
                        "value": "self.mask_embedding",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "4",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "3",
                        "possible_values": []
                    }
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv(inputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv(inputs.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.cat([pool1, pool2, pool3], 1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_39": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pool1, pool2, pool3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "x + self._minus * mask[:, 0:1, :]",
                    "possible_values": []
                }
            },
            "relu_37": {
                "input": {
                    "value": "x + self._minus * mask[:, 1:2, :]",
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "x + self._minus * mask[:, 2:3, :]",
                    "possible_values": []
                }
            }
        }
    },
    "nrekit/sentence_encoder.py": {
        "torch": {
            "CNNSentenceEncoder_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ],
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_length": {
                    "value": "max_length",
                    "possible_values": []
                }
            },
            "PCNNSentenceEncoder_24": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "230",
                            "MethodArgument"
                        ],
                        [
                            "230",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_length": {
                    "value": "max_length",
                    "possible_values": []
                }
            },
            "BERTSentenceEncoder_38": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "test_bert_snowball.py": {
        "torch": {
            "load_57": {
                "f": {
                    "value": "./checkpoint/bert_encoder_on_fewrel.pth.tar",
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "./checkpoint/bert_siamese_on_fewrel.pth.tar",
                    "possible_values": []
                }
            }
        }
    },
    "test_cnn_snowball.py": {
        "torch": {
            "load_57": {
                "f": {
                    "value": "./checkpoint/cnn_encoder_on_fewrel.pth.tar",
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "./checkpoint/cnn_siamese_on_fewrel.pth.tar",
                    "possible_values": []
                }
            }
        }
    },
    "train_bert_encoder.py": {
        "torch": {}
    },
    "train_bert_siamese.py": {
        "torch": {}
    },
    "train_cnn_encoder.py": {
        "torch": {
            "SGD_21": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters_to_optimize",
                    "possible_values": [
                        [
                            "filter(lambda x: x.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "1.0",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "possible_values": []
                }
            }
        }
    },
    "train_cnn_siamese.py": {
        "torch": {
            "SGD_22": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters_to_optimize",
                    "possible_values": [
                        [
                            "filter(lambda x: x.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "1.0",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "possible_values": []
                }
            }
        }
    }
}