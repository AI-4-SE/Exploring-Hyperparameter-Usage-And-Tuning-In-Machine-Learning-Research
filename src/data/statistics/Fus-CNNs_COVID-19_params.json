{
    "Fusion_models.py": {
        "torch": {
            "Sequential_148": {
                "variable": {
                    "value": "self.fusion_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * self.embedding_dim, self.embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.feature1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model1.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.feature2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model2.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.fusion_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * 256, 256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.fusion_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * self.embedding_dim, self.embedding_dim, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.feature1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model1.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.feature2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model2.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.feature1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model1.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.feature2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model2.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_86": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature1.extract_features(x)",
                            "Call"
                        ],
                        [
                            "self.feature1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x1, (x1.shape[-2], x1.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x1, (1, 1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier1(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.feature1.extract_features(x)",
                            "Call"
                        ],
                        [
                            "self.feature1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x1, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x3.view(x1.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x1.shape[-2], x1.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_88": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature2.extract_features(y)",
                            "Call"
                        ],
                        [
                            "self.feature2(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x2, (x2.shape[-2], x2.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (1, 1))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier2(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.feature2.extract_features(y)",
                            "Call"
                        ],
                        [
                            "self.feature2(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (8, 8))",
                            "Call"
                        ],
                        [
                            "x.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x3.view(x2.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x2.shape[-2], x2.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "2 * self.embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_150": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.feature1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model1.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.feature2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model2.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_92": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature1.extract_features(x)",
                            "Call"
                        ],
                        [
                            "self.feature1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x1, (x1.shape[-2], x1.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x1, (1, 1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier1(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.feature1.extract_features(x)",
                            "Call"
                        ],
                        [
                            "self.feature1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x1, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x3.view(x1.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_95": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature2.extract_features(y)",
                            "Call"
                        ],
                        [
                            "self.feature2(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x2, (x2.shape[-2], x2.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (1, 1))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier2(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.feature2.extract_features(y)",
                            "Call"
                        ],
                        [
                            "self.feature2(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (8, 8))",
                            "Call"
                        ],
                        [
                            "x.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x3.view(x2.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "2 * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "2 * self.embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "self.feature1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model1.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.feature2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(my_model2.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_234": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "self.fusion_conv(x3)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "x3.view(x3.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x3, (1, 1))",
                            "Call"
                        ],
                        [
                            "x3.view(x3.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x3))",
                            "Call"
                        ],
                        [
                            "x3.view(x3.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier(x3))",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "x3.view(x3.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x3, (x3.shape[-2], x3.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.fusion_conv(x3)",
                            "Call"
                        ],
                        [
                            "self.fusion_concat(x3)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier(x3))",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1792",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_258": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature1.extract_features(x)",
                            "Call"
                        ],
                        [
                            "self.feature1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x1, (x1.shape[-2], x1.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x1, (1, 1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier1(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x1)",
                            "Call"
                        ],
                        [
                            "self.feature1.extract_features(x)",
                            "Call"
                        ],
                        [
                            "self.feature1(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x1)",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x1, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x1))",
                            "Call"
                        ],
                        [
                            "x1.view(x1.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x3.view(x1.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_261": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature2.extract_features(y)",
                            "Call"
                        ],
                        [
                            "self.feature2(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x2, (x2.shape[-2], x2.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (1, 1))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier2(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.feature2.extract_features(y)",
                            "Call"
                        ],
                        [
                            "self.feature2(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (8, 8))",
                            "Call"
                        ],
                        [
                            "x.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x3.view(x2.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_247": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "self.fusion_conv(x3)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "x3.view(x3.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x3, (1, 1))",
                            "Call"
                        ],
                        [
                            "x3.view(x3.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x3))",
                            "Call"
                        ],
                        [
                            "x3.view(x3.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier(x3))",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x3)",
                            "Call"
                        ],
                        [
                            "x3.view(x3.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x3, (x3.shape[-2], x3.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.fusion_conv(x3)",
                            "Call"
                        ],
                        [
                            "self.fusion_concat(x3)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier(x3))",
                            "Call"
                        ],
                        [
                            "self.classifier(x3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x3.shape[-2], x3.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_247": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_267": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature2.extract_features(y)",
                            "Call"
                        ],
                        [
                            "self.feature2(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x2, (x2.shape[-2], x2.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (1, 1))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.swish(self.classifier2(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier2(x2)",
                            "Call"
                        ],
                        [
                            "self.feature2.extract_features(y)",
                            "Call"
                        ],
                        [
                            "self.feature2(y)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x2)",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x2, (8, 8))",
                            "Call"
                        ],
                        [
                            "x.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.avgpool(x2))",
                            "Call"
                        ],
                        [
                            "x2.view(x2.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x3.view(x2.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "num_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_67": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/' + args.network + '_' + Dataset + '_' + str(k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_82": {
                "obj": {
                    "value": "Best_model_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Aug_Best_ + Dataset + _ + ff + _ + args.network + _ + Dataset + _k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "Last_model_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Aug_Last_ + Dataset + _ + ff + _ + args.network + _ + Dataset + _k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_88": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'runs/' + args.action + '_' + args.network + '_' + Dataset + '_' + str(k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_206": {
                "f": {
                    "value": "Aug_ + wts + _ + Dataset + _ + ff + _ + args.network + _ + Dataset + _k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "Aug_Best_ + Dataset + _ + ff + _ + args.network + _ + Dataset + _k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_95": {
                "f": {
                    "value": "Aug_Best_Enh_ijcar_mix_ + ff + _ + args.network + _Enh_ijcar_mix_k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "Best_model_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CNN_ + args.action + _Best_lastfc_ + str(num_classes) + class_ + args.network + _Sum_ + Dataset + _Enh_ijcar_mix_k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "Last_model_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CNN_ + args.action + _Last_lastfc_ + str(num_classes) + class_ + args.network + _Sum_ + Dataset + _Enh_ijcar_mix_k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "Best_model_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CNN_ + args.action + _Best_lastconv_ + str(num_classes) + class_ + args.network + _ + args.method + _ + Dataset + _Enh_ijcar_mix_k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "Last_model_wts",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CNN_ + args.action + _Last_lastconv_ + str(num_classes) + class_ + args.network + _ + args.method + _ + Dataset + _Enh_ijcar_mix_k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_208": {
                "f": {
                    "value": "CNN_ + args.action.split(_)[-1] + _ + wts + _lastfc_ + str(num_classes) + class_ + args.network + _Sum_ + Dataset + _Enh_ijcar_mix_k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_211": {
                "f": {
                    "value": "CNN_ + args.action.split(_)[-1] + _ + wts + _lastconv_ + str(num_classes) + class_ + args.network + _ + args.method + _ + Dataset + _Enh_ijcar_mix_k_ + str(k + 1) + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transfer_models.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=512, out_channels=256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (x.shape[-2], x.shape[-1])).squeeze(2).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.shape[-2], x.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "model_ft.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "model_ft.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "model_ft.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "model_ft.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "model_ft.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "model_ft.classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "model_ft.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "model_ft.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "model_ft._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.classifier[-1].in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "model_ft._fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "dataloaders",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Xray_Dataset(test_file, self.Dataset, data_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "dataloaders",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Xray_Dataset(test_file, self.Dataset, data_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_273": {
                "variable": {
                    "value": "dataloaders",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "FusionDataset(test_file, self.Dataset, 'Enh_ijcar_mix', data_transforms, data_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_290": {
                "variable": {
                    "value": "dataloaders",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "FusionDataset(test_file, self.Dataset, 'Enh_ijcar_mix', data_transforms1, data_transforms2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_312": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_317": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_318": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, lr=self.lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "optim.SGD(params, lr=self.lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_403": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_404": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, lr=self.lr, momentum=0.9)",
                            "Call"
                        ],
                        [
                            "optim.SGD(params, lr=self.lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_94": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_114": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_115": {
                "input": {
                    "value": "data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "data2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_119": {
                "input": {
                    "value": "data2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_518": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_605": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "dataset": {
                    "value": "Xray_Dataset(x + '_ds_' + str(k) + '.txt', self.Dataset, data_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_174": {
                "dataset": {
                    "value": "Xray_Dataset(x + '_ds_' + str(k) + '.txt', self.Dataset, data_transforms[x])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "dataset": {
                    "value": "FusionDataset(x + '_ds_' + str(k) + '.txt', self.Dataset, 'Enh_ijcar_mix', data_transforms[x], data_transforms[x])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_247": {
                "dataset": {
                    "value": "FusionDataset(x + '_ds_' + str(k) + '.txt', self.Dataset, 'Enh_ijcar_mix', data_transforms1[x], data_transforms2[x])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_521": {
                "input": {
                    "value": "preds == label_v",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_533": {
                "variable": {
                    "value": "labell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labell, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_534": {
                "variable": {
                    "value": "predd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predd, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_535": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores, prediction.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_608": {
                "input": {
                    "value": "preds == label_v",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_621": {
                "variable": {
                    "value": "labell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labell, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_622": {
                "variable": {
                    "value": "predd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predd, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_623": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores, prediction.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_431": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_352": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs_1, inputs_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_365": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_442": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs_1, inputs_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_455": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_349": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_439": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    }
}