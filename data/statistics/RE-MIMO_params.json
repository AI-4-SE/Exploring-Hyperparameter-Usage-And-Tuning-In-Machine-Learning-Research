{
    "attention_visualization/EncoderDecoderBlock.py": {
        "torch": {
            "matmul_14": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_15": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_49": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, xt_val))",
                            "BinOp"
                        ],
                        [
                            "delta_y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(delta_y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "final_repr_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "final_repr_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_45": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, xt_val)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "chunk_49": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/MultiheadAttention.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_22": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_30": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "attention_visualization/NumTransmitterEncoding.py": {
        "torch": {
            "Dropout_10": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_transmitter)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_transmitter + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_15": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0.0, d_transmitter_encoding, 2).float() * (-math.log(np.float(2 * max_transmitter)) / d_transmitter_encoding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_16": {
                "variable": {
                    "value": "NT[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "NT[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, num_transmitter_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_15": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/TransformerDecoderLayer.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model + 4 * NR + mod_n + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_n",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.activation_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.activation_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "decoder_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(st, common_input, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/TransformerEncoder.py": {
        "torch": {
            "ModuleList_6": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/TransformerEncoderLayer.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_30": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_31": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "src_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src, common_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/iterative_classifier.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(initial_dim, interim_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.iterative_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderDecoderBlock(d_model, n_head, NR, mod_n, real_QAM_const, imag_QAM_const, constel, device, nhid, dropout) for i in range(nlayers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "permute_38": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, tgt, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "xout",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1] // 2",
                            "BinOp"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "H.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "interim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_38": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/plot_attn_weights.py": {
        "torch": {
            "einsum_29": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(HT, H)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "chunk_31": {
                "variable": {
                    "value": "(HTH_real, HTH_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,bjk->bik', (HT, H))",
                            "Call"
                        ],
                        [
                            "torch.chunk(HTH, 2, dim=-1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_33": {
                "variable": {
                    "value": "corr_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(HTH_real, 2) + torch.pow(HTH_imag, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_30": {
                "input": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,bjk->bik', (HT, H))",
                            "Call"
                        ],
                        [
                            "torch.chunk(HTH, 2, dim=-1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_33": {
                "input": {
                    "value": "HTH_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(HTH, 2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/plot_transmittters_encoding.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_transmitter)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "arange_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_transmitter + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_15": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0.0, d_transmitter_encoding, 2).float() * (-math.log(np.float(2 * max_transmitter)) / d_transmitter_encoding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_16": {
                "variable": {
                    "value": "NT[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "NT[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_15": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/sample_generator.py": {
        "torch": {
            "empty_26": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_27": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_45": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.ortho_channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_63": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_64": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_69": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LA.sqrtm(Rt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.NT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.NT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_90": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.NR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NT",
                            "Method Argument"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_91": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.NR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NT",
                            "Method Argument"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_109": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,jk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Hr, self.R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_110": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,jk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(Hi, self.R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_118": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_120": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_121": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_126": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_131": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_53": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_85": {
                "variable": {
                    "value": "mask_matrix[block_num * self.block_size:(block_num + 1) * self.block_size, block_num * self.block_size:(block_num + 1) * self.block_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "hr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ortho_matrix[:, :NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(hr, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(hr).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "hi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ortho_matrix[:, NT:2 * NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(hi, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(hi).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_130": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_125": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_127": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_135": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_136": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_125": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_127": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_136": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_135": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_136": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/train_classifier.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(out, dim=1).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_120": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "save_112": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "load_173": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_176": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_179": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "attention_visualization/visualize_network.py": {
        "torch": {
            "load_73": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "fully_correlated_channels/oamp_net/oampnet.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.oampbases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[oampnet_base(constel, real_QAM_const, imag_QAM_const, device) for i in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fully_correlated_channels/oamp_net/oampnet_base.py": {
        "torch": {
            "matmul_10": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_11": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "HHT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_36": {
                "variable": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.pow(rt, 2).sum(dim=-1) - NR * noise_sigma ** 2) / h_frobenius",
                            "BinOp"
                        ],
                        [
                            "torch.max(v2t, torch.Tensor([1e-09]).to(device=self.device))",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_42": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "int(2 * NR)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_44": {
                "variable": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t.view(-1, 1, 1) * HHT + lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "interim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(v2t.view(-1, 1, 1) * HHT + lam)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "wt_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * NT * what / torch.einsum('ijj->i', torch.matmul(what, H)).view(-1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "wt * self.gamma",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_65": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zt - self.constel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, x_out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_47": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.matmul(what, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "wt_H.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(wt, rt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, x_out))",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "input": {
                    "value": "what",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2t.view(-1, 1, 1) * interim",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fully_correlated_channels/oamp_net/sample_generator.py": {
        "torch": {
            "empty_17": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_18": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_36": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size, correlated_flag, rho, batch_corr, rho_low, rho_high)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_54": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_55": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_60": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rr_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R1.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size, NT)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size, NT)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rt_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R2.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size, NT)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size, NT)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rr_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R1.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size, NT)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size, NT)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rt_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R2.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size, NT)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size, NT)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_94": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_95": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_113": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_115": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_116": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_125": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_44": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_124": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_100": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjl,blk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hr, R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_101": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjl,blk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hi, R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_104": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjl,blk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hr, R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_105": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjl,blk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hi, R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_120": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_122": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_129": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_130": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_122": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_129": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_122": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_129": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_130": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/oamp_net/test_oampnet.py": {
        "torch": {
            "cat_41": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_54": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_58": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_59": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_61": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/oampnet_fullcorr_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "fully_correlated_channels/oamp_net/train_oampnet.py": {
        "torch": {
            "chunk_48": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_52": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_53": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_55": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_116": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "cat_105": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_batch_x_predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "list_batch_x_predicted",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/oampnet_fullcorr_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/EncoderDecoderBlock.py": {
        "torch": {
            "matmul_14": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_15": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_49": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, xt_val))",
                            "BinOp"
                        ],
                        [
                            "delta_y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(delta_y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "final_repr_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "final_repr_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_45": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, xt_val)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "chunk_49": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/MultiheadAttention.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_22": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_30": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/NumTransmitterEncoding.py": {
        "torch": {
            "Dropout_10": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_transmitter)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_transmitter + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_15": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0.0, d_transmitter_encoding, 2).float() * (-math.log(np.float(2 * max_transmitter)) / d_transmitter_encoding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_16": {
                "variable": {
                    "value": "NT[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "NT[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, num_transmitter_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_15": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/TransformerDecoderLayer.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model + 4 * NR + mod_n + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_n",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.activation_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.activation_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "decoder_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(st, common_input, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/TransformerEncoder.py": {
        "torch": {
            "ModuleList_6": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/TransformerEncoderLayer.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_30": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_31": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "src_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src, common_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/iterative_classifier.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(initial_dim, interim_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.iterative_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderDecoderBlock(d_model, n_head, NR, mod_n, real_QAM_const, imag_QAM_const, constel, device, nhid, dropout) for i in range(nlayers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "permute_38": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, tgt, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "xout",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1] // 2",
                            "BinOp"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "H.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "interim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_38": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/sample_generator.py": {
        "torch": {
            "empty_22": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_23": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_41": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size, correlated_flag, rho, batch_corr, rho_low, rho_high)",
                            "Call"
                        ],
                        [
                            "self.ortho_channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_59": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_60": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_65": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rr_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R1.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size, NT)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size, NT)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rt_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R2.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size, NT)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size, NT)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rr_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R1.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size, NT)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size, NT)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rt_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R2).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R2.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size, NT)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size, NT)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_99": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_100": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_118": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_120": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_121": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_126": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_131": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_144": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2 * self.NR",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * NT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_167": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_169": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_170": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_179": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_49": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_130": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjl,blk->bik', (R1, Hr, R2))",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjl,blk->bik', (R1, Hr, R2))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, :NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hr, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hr).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjl,blk->bik', (R1, Hi, R2))",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjl,blk->bik', (R1, Hi, R2))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, NT:2 * NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hi, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hi).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_178": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_105": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjl,blk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hr, R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_106": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjl,blk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hi, R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_109": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjl,blk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hr, R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_110": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjl,blk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hi, R2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_125": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_127": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_135": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_136": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_176": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_183": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_184": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_125": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_127": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_136": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_174": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_176": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_183": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_184": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_174": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_176": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_135": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_136": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_183": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_184": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/test_network.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fully_correlated_channels/re-mimo/train_classifier.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(out, dim=1).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_126": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "save_118": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "load_180": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_183": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.91",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_186": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.91",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/DeepMIMODetection/detnet.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.detbases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DetNet_base(self.x_size, self.v_size, self.z_size) for i in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "einsum_25": {
                "variable": {
                    "value": "HHX",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(HTH, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "v_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.v_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "(HTY, x, HHX, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/DeepMIMODetection/detnet_base.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * self.x_size + v_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.v_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_30": {
                "input": {
                    "value": "x + self.t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_30": {
                "input": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/DeepMIMODetection/detnet_pytorch.py": {
        "torch": {
            "chunk_40": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_44": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_45": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_47": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_79": {
                "variable": {
                    "value": "HTY",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H_t, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.give_batch_data(NT, snr_db_min=snrdb_classical_list[NT][0], snr_db_max=snrdb_classical_list[NT][-1], batch_size=train_batch_size)",
                            "Call"
                        ],
                        [
                            "generator.give_batch_data(NT, snr_db_min=snrdb_classical_list[NT][0], snr_db_max=snrdb_classical_list[NT][-1], batch_size=train_batch_size)",
                            "Call"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "startingLearningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "StepLR_123": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=startingLearningRate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "decay_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.97",
                            "float"
                        ]
                    ]
                }
            },
            "inverse_58": {
                "variable": {
                    "value": "HtHinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_HH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_HH",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_59": {
                "variable": {
                    "value": "X_LS",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(HtHinv, batch_HY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "LSE_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(batch_X - X_LS, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_61": {
                "input": {
                    "value": "batch_X - X_LS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_65": {
                "input": {
                    "value": "torch.pow(batch_X - batch_x_predicted, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_65": {
                "input": {
                    "value": "batch_X - batch_x_predicted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/DeepMIMODetection/sample_generator.py": {
        "torch": {
            "empty_15": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_16": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_34": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_52": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_53": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_58": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_64": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_65": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_72": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_74": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_75": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_84": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_42": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_83": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_81": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_79": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_88": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_89": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_88": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_89": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/DeepMIMODetection/test_detnet.py": {
        "torch": {
            "einsum_42": {
                "variable": {
                    "value": "HTY",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H_t, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_62": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_66": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_67": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_69": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/classical_schemes/classical_solvers.py": {
        "torch": {
            "einsum_13": {
                "variable": {
                    "value": "Hty",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H_t, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H in enumerate(hBatch)",
                            "Call"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "inverse_15": {
                "variable": {
                    "value": "HtHinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "HTH + (torch.pow(noise_sigma, 2) / 2.0).view(-1, 1, 1) * torch.eye(n=two_NT).expand(size=HTH.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(HtHinv, Hty)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "chunk_20": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_24": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_25": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_27": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_15": {
                "n": {
                    "value": "two_NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(H.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_15": {
                "input": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise_sigma",
                            "Method Argument"
                        ],
                        [
                            "noise_sigma",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/classical_schemes/test_amp.py": {
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "results_amp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ampSolver(H, y, sigConst, noise_sigma[0].item()).squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/classical_schemes/test_blast.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "results_blast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blast_eval(y, H, sigConst, NT, NR).squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/classical_schemes/test_mmse.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/classical_schemes/test_sdr.py": {
        "torch": {
            "from_numpy_57": {
                "ndarray": {
                    "value": "results_sdr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sdrSolver(H, y, sigConst, NT).squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/oamp_net/oampnet.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.oampbases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[oampnet_base(constel, real_QAM_const, imag_QAM_const, device) for i in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/oamp_net/oampnet_base.py": {
        "torch": {
            "matmul_10": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_11": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "HHT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_36": {
                "variable": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.pow(rt, 2).sum(dim=-1) - NR * noise_sigma ** 2) / h_frobenius",
                            "BinOp"
                        ],
                        [
                            "torch.max(v2t, torch.Tensor([1e-09]).to(device=self.device))",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_42": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "int(2 * NR)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_44": {
                "variable": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t.view(-1, 1, 1) * HHT + lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "interim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(v2t.view(-1, 1, 1) * HHT + lam)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "wt_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * NT * what / torch.einsum('ijj->i', torch.matmul(what, H)).view(-1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "wt * self.gamma",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_65": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zt - self.constel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, x_out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_47": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.matmul(what, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "wt_H.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(wt, rt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, x_out))",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "input": {
                    "value": "what",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2t.view(-1, 1, 1) * interim",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/oamp_net/sample_generator.py": {
        "torch": {
            "empty_15": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_16": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_34": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_52": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_53": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_58": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_64": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_65": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_72": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_74": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_75": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_84": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_42": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_83": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_81": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_79": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_88": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_89": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_88": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_89": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/oamp_net/test_oampnet.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_51": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_55": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_56": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_58": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/oampnet_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/oamp_net/train_oampnet.py": {
        "torch": {
            "chunk_34": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_38": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_39": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_41": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_60": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_batch_x_predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "list_batch_x_predicted",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/oampnet_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/EncoderDecoderBlock.py": {
        "torch": {
            "matmul_14": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_15": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_49": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, xt_val))",
                            "BinOp"
                        ],
                        [
                            "delta_y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(delta_y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "final_repr_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "final_repr_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_45": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, xt_val)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "chunk_49": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/MultiheadAttention.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_22": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_30": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/NumTransmitterEncoding.py": {
        "torch": {
            "Dropout_10": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_transmitter)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_transmitter + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_15": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0.0, d_transmitter_encoding, 2).float() * (-math.log(np.float(2 * max_transmitter)) / d_transmitter_encoding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_16": {
                "variable": {
                    "value": "NT[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "NT[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, num_transmitter_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_15": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/TransformerDecoderLayer.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model + 4 * NR + mod_n + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_n",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.activation_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.activation_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "decoder_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(st, common_input, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/TransformerEncoder.py": {
        "torch": {
            "ModuleList_6": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/TransformerEncoderLayer.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_30": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_31": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "src_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src, common_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/iterative_classifier.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(initial_dim, interim_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.iterative_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderDecoderBlock(d_model, n_head, NR, mod_n, real_QAM_const, imag_QAM_const, constel, device, nhid, dropout) for i in range(nlayers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "permute_38": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, tgt, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "xout",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1] // 2",
                            "BinOp"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "H.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "interim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_38": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/oampnet.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.oampbases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[oampnet_base(constel, real_QAM_const, imag_QAM_const, device) for i in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/oampnet_base.py": {
        "torch": {
            "matmul_10": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_11": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "HHT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_36": {
                "variable": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.pow(rt, 2).sum(dim=-1) - NR * noise_sigma ** 2) / h_frobenius",
                            "BinOp"
                        ],
                        [
                            "torch.max(v2t, torch.Tensor([1e-09]).to(device=self.device))",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_42": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "int(2 * NR)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_44": {
                "variable": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t.view(-1, 1, 1) * HHT + lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "interim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(v2t.view(-1, 1, 1) * HHT + lam)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "wt_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * NT * what / torch.einsum('ijj->i', torch.matmul(what, H)).view(-1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "wt * self.gamma",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_65": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zt - self.constel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, x_out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_47": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.matmul(what, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "wt_H.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(wt, rt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, x_out))",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "input": {
                    "value": "what",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2t.view(-1, 1, 1) * interim",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/sample_generator.py": {
        "torch": {
            "empty_21": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_22": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_40": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.ortho_channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_58": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_59": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_64": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_70": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_71": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_77": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_79": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_80": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_89": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_102": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2 * self.NR",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * NT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_126": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_128": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_129": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_138": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_48": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_88": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, :NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hr, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hr).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, NT:2 * NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hi, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hi).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_137": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_84": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_86": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_94": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_135": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_142": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_143": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_94": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_142": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_143": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_93": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_94": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_142": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_143": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/test_network.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/time_network.py": {
        "torch": {
            "chunk_57": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_61": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_62": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_64": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_132": {
                "variable": {
                    "value": "network_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_network_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "model_oampnet_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./../oamp_net/validtn_results/oampnet_q16_24_64.pth'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_16/re-mimo/train_classifier.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(out, dim=1).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "save_128": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_new.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "load_189": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_new.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_192": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.91",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_195": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.91",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/DeepMIMODetection/detnet.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.detbases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DetNet_base(self.x_size, self.v_size, self.z_size) for i in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "einsum_25": {
                "variable": {
                    "value": "HHX",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(HTH, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "v_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.v_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "(HTY, x, HHX, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/DeepMIMODetection/detnet_base.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * self.x_size + v_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.v_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_29": {
                "input": {
                    "value": "x + self.t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_29": {
                "input": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/DeepMIMODetection/detnet_pytorch.py": {
        "torch": {
            "chunk_40": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_44": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_45": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_47": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_79": {
                "variable": {
                    "value": "HTY",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H_t, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.give_batch_data(NT, snr_db_min=snrdb_classical_list[NT][0], snr_db_max=snrdb_classical_list[NT][-1], batch_size=train_batch_size)",
                            "Call"
                        ],
                        [
                            "generator.give_batch_data(NT, snr_db_min=snrdb_classical_list[NT][0], snr_db_max=snrdb_classical_list[NT][-1], batch_size=train_batch_size)",
                            "Call"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "startingLearningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "StepLR_123": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=startingLearningRate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "decay_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.97",
                            "float"
                        ]
                    ]
                }
            },
            "inverse_58": {
                "variable": {
                    "value": "HtHinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_HH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_HH",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_59": {
                "variable": {
                    "value": "X_LS",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(HtHinv, batch_HY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "LSE_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(batch_X - X_LS, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_61": {
                "input": {
                    "value": "batch_X - X_LS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_65": {
                "input": {
                    "value": "torch.pow(batch_X - batch_x_predicted, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_65": {
                "input": {
                    "value": "batch_X - batch_x_predicted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/DeepMIMODetection/sample_generator.py": {
        "torch": {
            "empty_15": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_16": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_34": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_52": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_53": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_58": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_64": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_65": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_72": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_74": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_75": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_84": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_42": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_83": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_81": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_79": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_88": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_89": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_88": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_89": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/DeepMIMODetection/test_detnet.py": {
        "torch": {
            "einsum_43": {
                "variable": {
                    "value": "HTY",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H_t, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_50": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_63": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_67": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_68": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_70": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_64/classical_schemes/classical_solvers.py": {
        "torch": {
            "einsum_13": {
                "variable": {
                    "value": "Hty",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H_t, y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H in enumerate(hBatch)",
                            "Call"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "inverse_15": {
                "variable": {
                    "value": "HtHinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "HTH + (torch.pow(noise_sigma, 2) / 2.0).view(-1, 1, 1) * torch.eye(n=two_NT).expand(size=HTH.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(HtHinv, Hty)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "chunk_20": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_24": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_25": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_27": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_15": {
                "n": {
                    "value": "two_NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(H.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_15": {
                "input": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise_sigma",
                            "Method Argument"
                        ],
                        [
                            "noise_sigma",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/classical_schemes/sample_generator.py": {
        "torch": {
            "empty_21": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_22": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_40": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.ortho_channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_58": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_59": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_64": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_70": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_71": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_77": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_79": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_80": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_89": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_102": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2 * self.NR",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * NT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_125": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_127": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_128": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_133": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_137": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_48": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_88": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, :NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hr, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hr).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, NT:2 * NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hi, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hi).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_136": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_84": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_86": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_94": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_132": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_134": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_141": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_142": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_94": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_132": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_134": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_141": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_142": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_93": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_94": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_141": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_142": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/classical_schemes/test_amp.py": {
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "results_amp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ampSolver(H, y, sigConst, noise_sigma[0].item()).squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_64/classical_schemes/test_blast.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "results_blast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blast_eval(y, H, sigConst, NT, NR).squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_64/classical_schemes/test_mmse.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/classical_schemes/test_sdr.py": {
        "torch": {
            "from_numpy_57": {
                "ndarray": {
                    "value": "results_sdr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sdrSolver(H, y, sigConst, NT).squeeze()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_64/oamp_net/oampnet.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.oampbases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[oampnet_base(constel, real_QAM_const, imag_QAM_const, device) for i in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_64/oamp_net/oampnet_base.py": {
        "torch": {
            "matmul_10": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_11": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "HHT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_36": {
                "variable": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.pow(rt, 2).sum(dim=-1) - NR * noise_sigma ** 2) / h_frobenius",
                            "BinOp"
                        ],
                        [
                            "torch.max(v2t, torch.Tensor([1e-09]).to(device=self.device))",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_42": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "int(2 * NR)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_44": {
                "variable": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t.view(-1, 1, 1) * HHT + lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "interim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(v2t.view(-1, 1, 1) * HHT + lam)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "wt_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * NT * what / torch.einsum('ijj->i', torch.matmul(what, H)).view(-1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "wt * self.gamma",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_65": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zt - self.constel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, x_out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_47": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.matmul(what, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "wt_H.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(wt, rt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, x_out))",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "input": {
                    "value": "what",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2t.view(-1, 1, 1) * interim",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_64/oamp_net/sample_generator.py": {
        "torch": {
            "empty_15": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_16": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_34": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_52": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_53": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_58": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_64": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_65": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_72": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_74": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_75": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_84": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_42": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_83": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_81": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_79": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_88": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_89": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_88": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_89": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/oamp_net/test_oampnet.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_51": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_55": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_56": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_58": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/oampnet_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_64/oamp_net/train_oampnet.py": {
        "torch": {
            "chunk_35": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_39": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_40": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_42": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_batch_x_predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "list_batch_x_predicted",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/oampnet_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/EncoderDecoderBlock.py": {
        "torch": {
            "matmul_14": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_15": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_49": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, xt_val))",
                            "BinOp"
                        ],
                        [
                            "delta_y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(delta_y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "final_repr_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "final_repr_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_45": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, xt_val)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "chunk_49": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/MultiheadAttention.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_22": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_30": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/NumTransmitterEncoding.py": {
        "torch": {
            "Dropout_10": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_transmitter)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_transmitter + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_15": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0.0, d_transmitter_encoding, 2).float() * (-math.log(np.float(2 * max_transmitter)) / d_transmitter_encoding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_16": {
                "variable": {
                    "value": "NT[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "NT[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, num_transmitter_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_15": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/TransformerDecoderLayer.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model + 4 * NR + mod_n + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * qam_const",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.activation_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.activation_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "decoder_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(st, common_input, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_37": {
                "variable": {
                    "value": "(out_real, out_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(decoder_embed)",
                            "Call"
                        ],
                        [
                            "self.linear2(self.activation_1(out))",
                            "Call"
                        ],
                        [
                            "self.linear3(self.activation_2(out))",
                            "Call"
                        ],
                        [
                            "(out_real + out_imag).view(NT, -1, self.mod_n)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/TransformerEncoder.py": {
        "torch": {
            "ModuleList_6": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/TransformerEncoderLayer.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_30": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_31": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "src_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src, common_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/iterative_classifier.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(initial_dim, interim_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.iterative_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderDecoderBlock(d_model, n_head, NR, mod_n, real_QAM_const, imag_QAM_const, constel, device, nhid, dropout) for i in range(nlayers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "permute_38": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, tgt, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "xout",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1] // 2",
                            "BinOp"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "H.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "interim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_38": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/sample_generator.py": {
        "torch": {
            "empty_21": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_22": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_40": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.ortho_channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_58": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_59": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_64": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_70": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_71": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_77": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_79": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_80": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_90": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_103": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2 * self.NR",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * NT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_126": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_128": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_129": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_138": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_48": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_89": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, :NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hr, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hr).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, NT:2 * NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hi, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hi).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_137": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_84": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_86": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_94": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_95": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_135": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_142": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_143": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_86": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_94": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_142": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_143": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_94": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_95": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_142": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_143": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/test_network.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "iid_channels/qam_64/re-mimo/train_classifier.py": {
        "torch": {
            "cat_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(out, dim=1).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_137": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "save_129": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "load_190": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_193": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.91",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_196": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.91",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/oamp_net/oampnet.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.oampbases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[oampnet_base(constel, real_QAM_const, imag_QAM_const, device) for i in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "x_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "partially_correlated_channels/oamp_net/oampnet_base.py": {
        "torch": {
            "matmul_10": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_11": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "HHT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_36": {
                "variable": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.pow(rt, 2).sum(dim=-1) - NR * noise_sigma ** 2) / h_frobenius",
                            "BinOp"
                        ],
                        [
                            "torch.max(v2t, torch.Tensor([1e-09]).to(device=self.device))",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_42": {
                "variable": {
                    "value": "lam",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "int(2 * NR)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_44": {
                "variable": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2t.view(-1, 1, 1) * HHT + lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "interim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(v2t.view(-1, 1, 1) * HHT + lam)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "wt_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * NT * what / torch.einsum('ijj->i', torch.matmul(what, H)).view(-1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "wt * self.gamma",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_65": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zt - self.constel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, x_out)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_47": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.matmul(what, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_55": {
                "n": {
                    "value": "wt_H.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(wt, rt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, x_out))",
                            "BinOp"
                        ],
                        [
                            "self.get_v2t(H, y, x_out, noise_sigma)",
                            "Call"
                        ],
                        [
                            "self.get_v2t_wt(H, y, x_out, noise_sigma)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "input": {
                    "value": "what",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2t.view(-1, 1, 1) * interim",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "partially_correlated_channels/oamp_net/sample_generator.py": {
        "torch": {
            "empty_17": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_18": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_36": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size, correlated_flag, rho, batch_corr, rho_low, rho_high)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_54": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_55": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_60": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rr_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R1.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rr_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R1.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_82": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_83": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_101": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_103": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_104": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_113": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_44": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_112": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_88": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_89": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_92": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_108": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_110": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_117": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_118": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_108": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_110": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_117": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_118": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_117": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_118": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/oamp_net/test_oampnet.py": {
        "torch": {
            "cat_41": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_54": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_58": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_59": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_61": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/oampnet_corr_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "partially_correlated_channels/oamp_net/train_oampnet.py": {
        "torch": {
            "chunk_50": {
                "variable": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_54": {
                "variable": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_real - real_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_55": {
                "variable": {
                    "value": "x_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_imag - imag_QAM_const",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_57": {
                "variable": {
                    "value": "x_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_real + x_imag",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_118": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list_batch_x_predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "list_batch_x_predicted",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/oampnet_corr_q' + str(mod_n) + '_' + str(NT) + '_' + str(NR) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/EncoderDecoderBlock.py": {
        "torch": {
            "matmul_14": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_15": {
                "equation": {
                    "value": "ijj->i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(matrix, matrix_transpose)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_real, x_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_44": {
                "variable": {
                    "value": "xt_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_49": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - torch.einsum('ijk,ik->ij', (H, xt_val))",
                            "BinOp"
                        ],
                        [
                            "delta_y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(delta_y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "final_repr_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "final_repr_decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_y, tgt, xt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_45": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(H, xt_val)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "chunk_49": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/MultiheadAttention.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_22": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_30": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/NumTransmitterEncoding.py": {
        "torch": {
            "Dropout_10": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "int(max_transmitter)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_transmitter + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "num_transmitters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_15": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0.0, d_transmitter_encoding, 2).float() * (-math.log(np.float(2 * max_transmitter)) / d_transmitter_encoding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_16": {
                "variable": {
                    "value": "NT[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_17": {
                "variable": {
                    "value": "NT[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "num_transmitters * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, num_transmitter_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_15": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "d_transmitter_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_transmitter_encoding",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/TransformerDecoderLayer.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model + 4 * NR + mod_n + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(initial_dim + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "interim_dim_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(interim_dim_1 + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "final_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod_n",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.activation_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.activation_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "decoder_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(st, common_input, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/TransformerEncoder.py": {
        "torch": {
            "ModuleList_6": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/TransformerEncoderLayer.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "initial_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_30": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_31": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "src_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src, common_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/iterative_classifier.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.encoder_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(initial_dim, interim_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.iterative_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderDecoderBlock(d_model, n_head, NR, mod_n, real_QAM_const, imag_QAM_const, constel, device, nhid, dropout) for i in range(nlayers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "permute_38": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y / np.sqrt(2.0 * NT)",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(y, dim=0).expand(NT, -1, -1)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, tgt, noise_sigma_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "xout",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H.shape[-1] // 2",
                            "BinOp"
                        ],
                        [
                            "NT",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "H.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "interim_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_38": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/sample_generator.py": {
        "torch": {
            "empty_22": {
                "variable": {
                    "value": "real_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_23": {
                "variable": {
                    "value": "imag_qam_consts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mod_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(int(-np.sqrt(n) + 1), int(np.sqrt(n) - 1), int(np.sqrt(n)))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(constellation).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.reshape(self.constellation, shape=(1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_41": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "np.int(np.sqrt(self.mod_n))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 2 * NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y, shape=(-1, 1))",
                            "Call"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.batch_matvec_mul(H, x) + w",
                            "BinOp"
                        ],
                        [
                            "self.channel(x, snr_db_min, snr_db_max, NT, batch_size, correlated_flag, rho, batch_corr, rho_low, rho_high)",
                            "Call"
                        ],
                        [
                            "self.ortho_channel(x, snr_db_min, snr_db_max, NT, batch_size)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_59": {
                "variable": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - self.constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_60": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(y - self.constellation)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_65": {
                "variable": {
                    "value": "(real_part, complex_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.argmin(difference, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(indices, shape=shape)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "self.random_indices(NT, batch_size)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rr_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R1.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([LA.sqrtm(Rr_list[i]) for i in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "LA.sqrtm(Rr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(R1).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "R1.expand(size=(batch_size, -1, -1))",
                            "Call"
                        ],
                        [
                            "self.batch_exp_correlation(rho_low, rho_high, batch_size)",
                            "Call"
                        ],
                        [
                            "self.exp_correlation(rho, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_87": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_88": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR, NT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_106": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_108": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_109": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_114": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_118": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_131": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2 * self.NR",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * NT",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_154": {
                "variable": {
                    "value": "snr_db",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_156": {
                "variable": {
                    "value": "wr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_157": {
                "variable": {
                    "value": "wi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.NR)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wr, wi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_162": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ],
                        [
                            "10.0 * torch.log(torch.mean(torch.sum(H.pow(2), dim=1), dim=0)) / np.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_166": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_49": {
                "equation": {
                    "value": "ijk,ik->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(A, b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_117": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjk->bik', (R1, Hr))",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjk->bik', (R1, Hr))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, :NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hr, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hr).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((batch_size, self.NR, NT)).normal_(mean=0, std=1.0 / np.sqrt(2.0 * self.NR))",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjk->bik', (R1, Hi))",
                            "Call"
                        ],
                        [
                            "torch.einsum('bij,bjk->bik', (R1, Hi))",
                            "Call"
                        ],
                        [
                            "ortho_matrix[:, NT:2 * NT]",
                            "Subscript"
                        ],
                        [
                            "adjust_var(Hi, self.NR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Hi).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_146": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hr, -1.0 * Hi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Hi, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_165": {
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_94": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_97": {
                "variable": {
                    "value": "Hr",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_98": {
                "variable": {
                    "value": "Hi",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,bjk->bik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(R1, Hi)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_115": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_122": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_161": {
                "input": {
                    "value": "torch.mean(torch.sum(H.pow(2), dim=1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_163": {
                "input": {
                    "value": "torch.mean(torch.sum(x.pow(2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_170": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_171": {
                "input": {
                    "value": "torch.mean(torch.sum(torch.pow(w, 2), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_113": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_115": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_122": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_123": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_161": {
                "input": {
                    "value": "torch.sum(H.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_163": {
                "input": {
                    "value": "torch.sum(x.pow(2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_170": {
                "input": {
                    "value": "torch.sum(torch.pow(self.batch_matvec_mul(H, x), 2), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_171": {
                "input": {
                    "value": "torch.sum(torch.pow(w, 2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_115": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_122": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "H.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_170": {
                "input": {
                    "value": "torch.pow(self.batch_matvec_mul(H, x), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_171": {
                "input": {
                    "value": "torch.pow(w, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_122": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_123": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_170": {
                "input": {
                    "value": "self.batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_171": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ],
                        [
                            "w * torch.pow(10.0, (10.0 * np.log10(NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((wr, wi), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/test_network.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "joint_bit_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_indices, imag_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_119": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_new.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "partially_correlated_channels/re-mimo/train_classifier.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "out.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(out, dim=1).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "model.forward(H, y, noise_sigma)",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_126": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "save_118": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_new.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "load_180": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./validtn_results/model_new.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_183": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.91",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_186": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.91",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}