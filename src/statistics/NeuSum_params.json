{
    "neusum_pt/neusum/Beam.py": {
        "torch": {
            "sort_145": {
                "input": {
                    "value": "self.scores",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "stack_170": {
                "tensors": {
                    "value": "attn[::-1]",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/Dataset.py": {
        "torch": {
            "stack_97": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensors": {
                    "value": "b",
                    "possible_values": [
                        [
                            "torch.stack(b, 0).t().contiguous()",
                            "Call"
                        ],
                        [
                            "b.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(b, volatile=self.volatile)",
                            "Call"
                        ],
                        [
                            "b.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(b, volatile=self.volatile)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "t_97": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_134": {
                "n": {
                    "value": "len(data)",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/Dict.py": {
        "torch": {
            "Tensor_90": {
                "variable": {
                    "value": "freq",
                    "possible_values": []
                }
            },
            "sort_92": {
                "variable": {
                    "value": "(_, idx)",
                    "possible_values": []
                },
                "input": {
                    "value": "freq",
                    "possible_values": [
                        [
                            "torch.Tensor([self.frequencies[i] for i in range(len(self.frequencies))])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/Models.py": {
        "torch": {
            "Encoder_15": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dict": {
                    "value": "dicts",
                    "possible_values": []
                },
                "Embedding_29": {
                    "variable": {
                        "value": "self.word_lut",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "dicts.size()",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "opt.word_vec_size",
                        "possible_values": []
                    },
                    "padding_idx": {
                        "value": "neusum.Constants.PAD",
                        "possible_values": []
                    }
                },
                "GRU_32": {
                    "variable": {
                        "value": "self.rnn",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "input_size",
                        "possible_values": []
                    },
                    "num_layers": {
                        "value": "opt.layers",
                        "possible_values": []
                    },
                    "dropout": {
                        "value": "opt.sent_dropout",
                        "possible_values": []
                    },
                    "bidirectional": {
                        "value": "opt.sent_brnn",
                        "possible_values": []
                    }
                }
            },
            "DocumentEncoder_67": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "GRU_78": {
                    "variable": {
                        "value": "self.rnn",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "input_size",
                        "possible_values": []
                    },
                    "num_layers": {
                        "value": "opt.layers",
                        "possible_values": []
                    },
                    "dropout": {
                        "value": "opt.doc_dropout",
                        "possible_values": []
                    },
                    "bidirectional": {
                        "value": "opt.doc_brnn",
                        "possible_values": []
                    }
                }
            },
            "StackedGRU_155": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_158": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout",
                        "possible_values": []
                    }
                },
                "self.num_layers": {
                    "value": "num_layers",
                    "possible_values": []
                },
                "ModuleList_160": {
                    "variable": {
                        "value": "self.layers",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Pointer_193": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.opt": {
                    "value": "opt",
                    "possible_values": []
                }
            },
            "DecInit_245": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_252": {
                    "variable": {
                        "value": "self.initer",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.enc_rnn_size // self.num_directions",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.dec_rnn_size",
                        "possible_values": []
                    }
                }
            },
            "DecInitAtt_260": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_267": {
                    "variable": {
                        "value": "self.init_query",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1, self.enc_rnn_size)",
                        "possible_values": []
                    }
                },
                "Linear_269": {
                    "variable": {
                        "value": "self.transformer",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.enc_rnn_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.dec_rnn_size",
                        "possible_values": []
                    }
                }
            },
            "NMTModel_281": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.sent_encoder": {
                    "value": "sent_encoder",
                    "possible_values": []
                },
                "self.doc_encoder": {
                    "value": "doc_encoder",
                    "possible_values": []
                },
                "self.pointer": {
                    "value": "pointer",
                    "possible_values": []
                },
                "self.decIniter": {
                    "value": "decIniter",
                    "possible_values": []
                },
                "self.reward_cal": {
                    "value": "reward_cal",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_h",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sort_123": {
                "variable": {
                    "value": "(sorted_lengths, orig_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "input[1].data.view(-1).tolist()",
                            "Call"
                        ],
                        [
                            "input[1].cuda()",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sort_124": {
                "variable": {
                    "value": "(_, restore_idex)",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_index",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "h_1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_240": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sort_310": {
                "variable": {
                    "value": "(_, restore_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.sent_dropout",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.doc_dropout",
                    "possible_values": []
                }
            },
            "GRU_88": {
                "variable": {
                    "value": "self.self_att_rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.doc_enc_size * 2",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "opt.doc_brnn",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs, self_att_outputs)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tanh_257": {
                "input": {
                    "value": "self.initer(last_enc_h)",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "self.enc_rnn_size",
                    "possible_values": []
                }
            },
            "GRUCell_163": {
                "input_size": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "opt.word_vec_size",
                            "Attribute"
                        ],
                        [
                            "opt.sent_enc_size",
                            "Attribute"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "opt.doc_enc_size",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/Optim.py": {
        "torch": {
            "SGD_16": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "possible_values": []
                }
            },
            "Adagrad_18": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "possible_values": []
                }
            },
            "Adadelta_20": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/Summarizer.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.getCurrentState() for b in beam if not b.done]",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_184": {
                "variable": {
                    "value": "previous_index",
                    "possible_values": []
                },
                "tensors": {
                    "value": "real_father_idx",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_184": {
                "variable": {
                    "value": "previous_index",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_131": {
                "variable": {
                    "value": "all_masks",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.get_doc_sent_mask(baseMask[idx]) for (idx, b) in enumerate(beam) if not b.done]",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "variable": {
                    "value": "all_masks",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/modules/ConcatAttention.py": {
        "torch": {
            "ConcatAttention_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.attend_dim": {
                    "value": "attend_dim",
                    "possible_values": []
                },
                "self.query_dim": {
                    "value": "query_dim",
                    "possible_values": []
                },
                "self.att_dim": {
                    "value": "att_dim",
                    "possible_values": []
                },
                "Linear_17": {
                    "variable": {
                        "value": "self.linear_pre",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "attend_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "att_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_18": {
                    "variable": {
                        "value": "self.linear_q",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "query_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "att_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Linear_19": {
                    "variable": {
                        "value": "self.linear_v",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "att_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Tanh_24": {
                    "variable": {
                        "value": "self.tanh",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "bmm_50": {
                "variable": {
                    "value": "weightedContext",
                    "possible_values": []
                },
                "input": {
                    "value": "score_m",
                    "possible_values": [
                        [
                            "score.view(score.size(0), 1, score.size(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "weightedContext",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Softmax_21": {
                "variable": {
                    "value": "self.sm",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Softmax_23": {
                "variable": {
                    "value": "self.sm",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/modules/Maxout.py": {
        "torch": {
            "MaxOut_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.pool_size": {
                    "value": "pool_size",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/modules/ScoreAttention.py": {
        "torch": {
            "ScoreAttention_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.attend_dim": {
                    "value": "attend_dim",
                    "possible_values": []
                },
                "self.query_dim": {
                    "value": "query_dim",
                    "possible_values": []
                },
                "self.att_dim": {
                    "value": "att_dim",
                    "possible_values": []
                },
                "Linear_18": {
                    "variable": {
                        "value": "self.linear_pre",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "attend_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "att_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_20": {
                    "variable": {
                        "value": "self.linear_q",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "query_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "att_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_21": {
                    "variable": {
                        "value": "self.linear_v",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "att_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                }
            },
            "tanh_42": {
                "variable": {
                    "value": "tmp20",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp10",
                    "possible_values": [
                        [
                            "precompute + targetT.expand_as(precompute)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "energy",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "possible_values": [
                        [
                            "self.linear_v(tmp20.view(-1, tmp20.size(2))).view(tmp20.size(0), tmp20.size(1))",
                            "Call"
                        ],
                        [
                            "energy * (1 - self.mask) + self.mask * -100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(energy, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Softmax_23": {
                "variable": {
                    "value": "self.sm",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Softmax_25": {
                "variable": {
                    "value": "self.sm",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/modules/myAdam.py": {
        "torch": {
            "MyAdam_5": {
                "base_class_0": {
                    "value": "torch.optim.Optimizer",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/xinit.py": {
        "torch": {
            "Tensor_311": {
                "variable": {
                    "value": "flattened",
                    "possible_values": []
                }
            },
            "qr_313": {
                "variable": {
                    "value": "(q, r)",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened",
                    "possible_values": [
                        [
                            "torch.Tensor(rows, cols).normal_(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_315": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_320": {
                "variable": {
                    "value": "padding",
                    "possible_values": []
                },
                "*size": {
                    "value": "rows",
                    "possible_values": [
                        [
                            "tensor.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "cols - rows",
                    "possible_values": []
                }
            },
            "eye_123": {
                "n": {
                    "value": "tensor.size(0)",
                    "possible_values": []
                },
                "m": {
                    "value": "tensor.size(1)",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, padding.cuda()]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, padding]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/neusum/xutils.py": {
        "torch": {}
    },
    "neusum_pt/onlinePreprocess.py": {
        "torch": {
            "sort_159": {
                "variable": {
                    "value": "(_, perm)",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(sizes)",
                    "possible_values": []
                }
            },
            "randperm_150": {
                "variable": {
                    "value": "perm",
                    "possible_values": []
                },
                "n": {
                    "value": "len(src)",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "np_softmax(x, norm_lambda)",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/summarize.py": {
        "torch": {
            "set_device_77": {
                "device": {
                    "value": "opt.gpu",
                    "possible_values": []
                }
            }
        }
    },
    "neusum_pt/train.py": {
        "torch": {
            "KLDivLoss_191": {
                "variable": {
                    "value": "regression_crit",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "opt.seed",
                    "possible_values": []
                }
            },
            "set_device_51": {
                "device": {
                    "value": "opt.gpus[0]",
                    "possible_values": []
                }
            },
            "log_69": {
                "variable": {
                    "value": "pred_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_scores + 1e-08",
                    "possible_values": []
                }
            },
            "randperm_221": {
                "variable": {
                    "value": "batchOrder",
                    "possible_values": []
                },
                "n": {
                    "value": "len(trainData)",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "opt.cuda_seed",
                    "possible_values": []
                }
            },
            "initial_seed_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "initial_seed_54": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'dicts': dataset['dicts'], 'opt': opt, 'epoch': epoch, 'optim': optim}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}_devRouge_{1}_e{2}.pt'.format(save_model_path, round(metric, 4), epoch)",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'dicts': dataset['dicts'], 'opt': opt, 'epoch': epoch, 'optim': optim}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}_e{1}.pt'.format(save_model_path, epoch)",
                    "possible_values": []
                }
            }
        }
    }
}