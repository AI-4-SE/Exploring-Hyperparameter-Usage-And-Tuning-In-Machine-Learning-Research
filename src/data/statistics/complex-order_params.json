{
    "TEXT CLASSIFICATION/CNN/evaluation.py": {
        "sklearn": {
            "shuffle_11": {
                "variable": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "132",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_18": {
                "variable": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "132",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_110": {
                "variable": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "group",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "132",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_36": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/helper.py": {
        "sklearn": {
            "shuffle_72": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_408": {
                "variable": {
                    "value": "pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "121",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/train.py": {
        "sklearn": {
            "accuracy_score_172": {
                "variable": {
                    "value": "acc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test['flag']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_score_134": {
                "variable": {
                    "value": "acc_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train['flag']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_score_137": {
                "variable": {
                    "value": "acc_dev",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "dev['flag']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_89": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_154": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_save + /",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "import_meta_graph_155": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "ckpt.model_checkpoint_path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_85": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_161": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "model_save/model",
                    "type": "str",
                    "possible_values": []
                },
                "write_meta_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Fasttext/evaluation.py": {
        "sklearn": {}
    },
    "TEXT CLASSIFICATION/Fasttext/helper.py": {
        "sklearn": {
            "shuffle_72": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_408": {
                "variable": {
                    "value": "pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "121",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Fasttext/train.py": {
        "sklearn": {
            "accuracy_score_173": {
                "variable": {
                    "value": "acc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test['flag']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_score_134": {
                "variable": {
                    "value": "acc_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train['flag']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_score_138": {
                "variable": {
                    "value": "acc_dev",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "dev['flag']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_89": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_155": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_save + /",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "import_meta_graph_156": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "ckpt.model_checkpoint_path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_85": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_110": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_162": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_84": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "model_save/model",
                    "type": "str",
                    "possible_values": []
                },
                "write_meta_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/LSTM/evaluation.py": {
        "sklearn": {}
    },
    "TEXT CLASSIFICATION/LSTM/helper.py": {
        "sklearn": {
            "shuffle_72": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_408": {
                "variable": {
                    "value": "pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "121",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/LSTM/train.py": {
        "sklearn": {
            "accuracy_score_176": {
                "variable": {
                    "value": "acc_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test['flag']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_135": {
                "variable": {
                    "value": "acc_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train['flag']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_140": {
                "variable": {
                    "value": "acc_dev",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev['flag']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted, 1)",
                            "Call"
                        ],
                        [
                            "np.argmax(predicted_dev, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Session_90": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_158": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_save + /",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "import_meta_graph_159": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "ckpt.model_checkpoint_path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_86": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_165": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_85": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Session(config=session_conf)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "model_save/model",
                    "type": "str",
                    "possible_values": []
                },
                "write_meta_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/helper.py": {
        "sklearn": {
            "shuffle_72": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_408": {
                "variable": {
                    "value": "pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "121",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "TEXT CLASSIFICATION/Transformer/utils.py": {
        "sklearn": {
            "shuffle_120": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_score_142": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.array(all_preds).flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_139": {
                "input": {
                    "value": "y_pred.cpu().data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/config.py": {
        "tensorflow": {
            "DEFINE_integer_3": {
                "name": {
                    "value": "embedding_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Dimensionality of character embedding (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_5": {
                "name": {
                    "value": "filter_sizes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3,4,5",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Comma-separated filter sizes (default: '3,4,5')\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_7": {
                "name": {
                    "value": "num_filters",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of filters per filter size (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_9": {
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability (default: 0.5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_11": {
                "name": {
                    "value": "l2_reg_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regularizaion lambda (default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_13": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learn rate( default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_14": {
                "name": {
                    "value": "extend_feature_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "overlap_feature_dim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_16": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch Size (default: 64)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_17": {
                "name": {
                    "value": "n_fold",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of Cross-validation for mr,subj,cr,mpqa",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs (default: 200)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "evaluate_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluate model on dev set after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_24": {
                "name": {
                    "value": "checkpoint_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Save model after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "TREC",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "data set: mr;subj;cr;mpqa;sst2;TREC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/model_cnn/CNN_origin.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_111": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_112": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_97": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_101": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_106": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([500, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_72": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_input_left - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_94": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_95": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_96": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_105": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_107": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_61": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[filter_size, self.embedding_size, 1, self.num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_63": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_71": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_91": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_94": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/model_cnn/Complex_order.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_47": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_65": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_87": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_88": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_90": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position_indice, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(pos, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_91": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position_indice, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(pos, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding_W_pos, words_indice)",
                            "Call"
                        ],
                        [
                            "tf.multiply(pos, embedding_chars_q_phase)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_133": {
                "variable": {
                    "value": "self.h_pool_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "self.h_pool_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "self.h_pool_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "self.h_pool_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_138": {
                "variable": {
                    "value": "h_drop_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_139": {
                "variable": {
                    "value": "h_drop_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_140": {
                "variable": {
                    "value": "h_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_drop_real, h_drop_imag]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_75": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[2 * self.num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[2 * self.num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_76": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_79": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_84": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_109": {
                "variable": {
                    "value": "W_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.cos(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_real, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_110": {
                "variable": {
                    "value": "W_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.sin(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_imag, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_111": {
                "variable": {
                    "value": "conv_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.cos(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_real, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv-1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "cov_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.sin(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_imag, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv-1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_113": {
                "variable": {
                    "value": "cov_real_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.cos(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_real, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv-1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "cov_imag_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.sin(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_imag, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv-1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "h_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(qa_real, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_118": {
                "variable": {
                    "value": "h_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(qa_imag, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_119": {
                "variable": {
                    "value": "pooled_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(qa_real, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_input_left - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_125": {
                "variable": {
                    "value": "pooled_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(qa_imag, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_input_left - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_45": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * tf.range(position_size, dtype=tf.float32) / position_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.Position_Embedding(self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "self.M_qa_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.num_filters_total, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.num_filters_total, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_73": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[2 * self.num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[2 * self.num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_74": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_78": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_83": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_84": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_85": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_104": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_117": {
                "value": {
                    "value": "qa_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_real - cov_imag",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_118": {
                "value": {
                    "value": "qa_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cov_real_imag + cov_imag_real",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_69": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_72": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/model_cnn/Complex_vanilla.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_55": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_80": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_81": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_124": {
                "variable": {
                    "value": "self.h_pool_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "self.h_pool_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "self.h_pool_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "self.h_pool_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_129": {
                "variable": {
                    "value": "h_drop_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "h_drop_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "h_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_drop_real, h_drop_imag]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_65": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[2 * self.num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[2 * self.num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_66": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_69": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_74": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "W_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.cos(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_real, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "W_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.sin(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_imag, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "conv_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.cos(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_real, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv-1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_103": {
                "variable": {
                    "value": "cov_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.sin(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_imag, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv-1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_104": {
                "variable": {
                    "value": "cov_real_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.cos(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_real, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv-1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_105": {
                "variable": {
                    "value": "cov_imag_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modulus * np.sin(phase)",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(W_imag, dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv-1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "h_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(qa_real, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "h_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(qa_imag, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_110": {
                "variable": {
                    "value": "pooled_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(qa_real, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_input_left - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_116": {
                "variable": {
                    "value": "pooled_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(qa_imag, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_input_left - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], 0, 2 * math.pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "input": {
                    "value": "self.M_qa_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_56": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.num_filters_total, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_61": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * self.num_filters_total, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_63": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[2 * self.num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[2 * self.num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_64": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_68": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_73": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_70": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_74": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_75": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_95": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_108": {
                "value": {
                    "value": "qa_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_real - cov_imag",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_109": {
                "value": {
                    "value": "qa_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cov_real_imag + cov_imag_real",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_59": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_62": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/model_cnn/PE_reduce.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.embedded_chars_q, self.embedded_chars_q_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_112": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_113": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_98": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_102": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_107": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([500, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_73": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_input_left - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_89": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_96": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_97": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_108": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_62": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[filter_size, self.embedding_size, 1, self.num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_72": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_92": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_95": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/model_cnn/TPE_reduce.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size / 2, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_47": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size / 2, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_50": {
                "variable": {
                    "value": "position_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[math.pi * tf.cos(position_ij), math.pi * tf.sin(position_ij)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "variable": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.embedded_chars_q, self.embedded_chars_q_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_68": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_94": {
                "variable": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.h_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_124": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_125": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_98": {
                "variable": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_110": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.h_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_111": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_114": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_119": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_45": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * tf.range(position_size / 2, dtype=tf.float32) / position_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.Position_Embedding(self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedded_chars_expanded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_85": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.max_input_left - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_97": {
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_106": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters_total, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_108": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[num_filters_total, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_109": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_118": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_120": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_122": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cos_50": {
                "x": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(position_i, position_j)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_50": {
                "x": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(position_i, position_j)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_74": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[filter_size, self.embedding_size, 1, self.num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_76": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_84": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(self.embedded_chars_expanded, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[self.num_filters]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_104": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_107": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/CNN/multiply.py": {
        "tensorflow": {}
    },
    "TEXT CLASSIFICATION/Fasttext/config.py": {
        "tensorflow": {
            "DEFINE_integer_3": {
                "name": {
                    "value": "embedding_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Dimensionality of character embedding (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_5": {
                "name": {
                    "value": "hidden_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hidden layer (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_7": {
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability (default: 0.5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_9": {
                "name": {
                    "value": "l2_reg_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regularizaion lambda (default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_11": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learn rate( default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_12": {
                "name": {
                    "value": "extend_feature_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "overlap_feature_dim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_14": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch Size (default: 64)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_15": {
                "name": {
                    "value": "n_fold",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of Cross-validation for mr,subj,cr,mpqa",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_18": {
                "name": {
                    "value": "num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs (default: 200)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "evaluate_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluate model on dev set after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "checkpoint_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Save model after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "TREC",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "data set: mr;subj;cr;mpqa;sst2;TREC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Fasttext/model_fasttext/Complex_order.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "variable": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_46": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.embedded_chars_q, self.embedding_chars_q_phase]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_68": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_90": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_91": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position_indice, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(pos, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_94": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position_indice, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(pos, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding_W_pos, words_indice)",
                            "Call"
                        ],
                        [
                            "tf.multiply(pos, embedding_chars_q_phase)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_78": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_80": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_83": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_87": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_43": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * tf.range(position_size, dtype=tf.float32) / position_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_46": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_53": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.Position_Embedding(self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_69": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_76": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_77": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_87": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_72": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_75": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_43": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Fasttext/model_fasttext/Complex_vanilla.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.embedded_chars_q, self.embedding_chars_q_phase]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_78": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_79": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_66": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_71": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_75": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], 0, 2 * math.pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_64": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_65": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_74": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_75": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_76": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_63": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Fasttext/model_fasttext/Fasttext_origin.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_50": {
                "variable": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_75": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_76": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_63": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_72": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([500, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_54": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_61": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_62": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_69": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_72": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_57": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Fasttext/model_fasttext/PE_reduce.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.embedded_chars_q, self.embedded_chars_q_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_78": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_79": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_66": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_71": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_75": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([500, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_57": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_64": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_65": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_74": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_75": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_76": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_60": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_63": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Fasttext/model_fasttext/TPE_reduce.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "variable": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size / 2, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_45": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size / 2, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_48": {
                "variable": {
                    "value": "position_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[math.pi * tf.cos(position_ij), math.pi * tf.sin(position_ij)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "variable": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.embedded_chars_q, self.embedded_chars_q_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_66": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_88": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_89": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_76": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.represent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_77": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_78": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_81": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_85": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_43": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * tf.range(position_size / 2, dtype=tf.float32) / position_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.Position_Embedding(self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embedding_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_74": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.embedding_size, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_75": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_80": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_85": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_86": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cos_48": {
                "x": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(position_i, position_j)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_48": {
                "x": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(position_i, position_j)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_70": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_73": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_43": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Fasttext/multiply.py": {
        "tensorflow": {}
    },
    "TEXT CLASSIFICATION/LSTM/config.py": {
        "tensorflow": {
            "DEFINE_integer_3": {
                "name": {
                    "value": "embedding_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Dimensionality of character embedding (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_5": {
                "name": {
                    "value": "hidden_num",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hidden layer (default: 128)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_7": {
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability (default: 0.5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_9": {
                "name": {
                    "value": "l2_reg_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regularizaion lambda (default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_11": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learn rate( default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_12": {
                "name": {
                    "value": "extend_feature_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "overlap_feature_dim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_14": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch Size (default: 64)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_15": {
                "name": {
                    "value": "n_fold",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of Cross-validation for mr,subj,cr,mpqa",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_18": {
                "name": {
                    "value": "num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs (default: 200)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "evaluate_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluate model on dev set after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "checkpoint_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Save model after this many steps (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "TREC",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "data set: mr;subj;cr;mpqa;sst2;TREC",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/LSTM/model_LSTM/Complex_order.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_48": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_66": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dynamic_rnn_68": {
                "variable": {
                    "value": "(outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(outputs, self.dropout_keep_prob, name='hidden_output_drop')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_output_drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_71": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_num / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_94": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_95": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position_indice, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(pos, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_98": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position_indice, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(pos, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding_W_pos, words_indice)",
                            "Call"
                        ],
                        [
                            "tf.multiply(pos, embedding_chars_q_phase)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_100": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedded_chars_q, embedding_chars_q_phase]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_82": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_86": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_90": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_45": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * tf.range(position_size, dtype=tf.float32) / position_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_48": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.vocab_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_55": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.Position_Embedding(self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_73": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_80": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_81": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_89": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_90": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_92": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_76": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/LSTM/model_LSTM/Complex_vanilla.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_53": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_54": {
                "variable": {
                    "value": "embedding_chars_q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedded_chars_q, embedding_chars_q_phase]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_61": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dynamic_rnn_62": {
                "variable": {
                    "value": "(outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(outputs, self.dropout_keep_prob, name='hidden_output_drop')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_output_drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_num / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_76": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_77": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_80": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_84": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], 0, 2 * math.pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_74": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_75": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_79": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_83": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_85": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_87": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_70": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_73": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/LSTM/model_LSTM/LSTM_origin.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_54": {
                "variable": {
                    "value": "fw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_56": {
                "variable": {
                    "value": "(outputs, last_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "fw_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units=self.hidden_num, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_59": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_num / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_86": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_87": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_73": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_77": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_81": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([500, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_71": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_72": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_80": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_82": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_84": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_70": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/LSTM/model_LSTM/PE_reduce.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.embedded_chars_q, self.embedded_chars_q_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_54": {
                "variable": {
                    "value": "fw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_56": {
                "variable": {
                    "value": "(outputs, last_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "fw_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units=self.hidden_num, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_58": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dense_61": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_num / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_85": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_86": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_73": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_77": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_80": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_41": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([500, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_71": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_72": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_79": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_81": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_70": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/LSTM/model_LSTM/TPE_reduce.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_question",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.q_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_input_left]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "q_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "variable": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size / 2, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_45": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "position_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(seq_len, tf.float32), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(position_i, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "position_j",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / tf.pow(10000.0, 2 * tf.range(position_size / 2, dtype=tf.float32) / position_size)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position_j, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_48": {
                "variable": {
                    "value": "position_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[math.pi * tf.cos(position_ij), math.pi * tf.sin(position_ij)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "variable": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[self.embedded_chars_q, self.embedded_chars_q_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_65": {
                "variable": {
                    "value": "fw_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hidden_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_67": {
                "variable": {
                    "value": "(outputs, last_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "fw_cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units=self.hidden_num, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.embedded_chars_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_69": {
                "variable": {
                    "value": "l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dense_72": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "units": {
                    "value": "self.hidden_num / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_97": {
                "variable": {
                    "value": "embedded_chars_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "words_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_98": {
                "variable": {
                    "value": "embedding_chars_q_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "position_indice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "xw_plus_b_84": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(last, self.hidden_num / 2, name='1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_88": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_92": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.input_y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_43": {
                "x": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "2 * tf.range(position_size / 2, dtype=tf.float32) / position_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.array(self.embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "W_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.Position_Embedding(self.embedding_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_75": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_num / 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_82": {
                "t": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.array(self.embeddings), name='W', dtype='float32', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_uniform([self.vocab_size, self.embedding_size], -1.0, 1.0), name='W', trainable=self.trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 6], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', shape=[self.hidden_num / 2, 2], initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_83": {
                "t": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[6]), name='b')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.1, shape=[2]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_87": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_91": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_93": {
                "input": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.input_y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cos_48": {
                "x": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(position_i, position_j)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_48": {
                "x": {
                    "value": "position_ij",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(position_i, position_j)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_78": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_81": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_43": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/LSTM/multiply.py": {
        "tensorflow": {}
    },
    "TEXT CLASSIFICATION/LSTM/urnn_cell.py": {
        "tensorflow": {
            "sqrt_58": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.abs(z) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_65": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "complex_67": {
                "variable": {
                    "value": "scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "tf.real(z) * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.imag(z) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_9": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([num_units], minval=-np.pi, maxval=np.pi)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "complex_10": {
                "variable": {
                    "value": "self.vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "real": {
                    "value": "tf.cos(self.w)",
                    "type": "Call",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.sin(self.w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_22": {
                "variable": {
                    "value": "self.re",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([num_units], minval=-1, maxval=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_re'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "self.im",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([num_units], minval=-1, maxval=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_im'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "complex_24": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "real": {
                    "value": "self.re",
                    "type": "Attribute",
                    "possible_values": []
                },
                "imag": {
                    "value": "self.im",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conj_26": {
                "variable": {
                    "value": "self.vstar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conj_31": {
                "variable": {
                    "value": "vstar",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.v, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "vstar_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "vstar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.conj(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_33": {
                "variable": {
                    "value": "sq_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.v) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.permutation(num_units)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fft_52": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ifft_55": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "complex_60": {
                "real": {
                    "value": "tf.real(z) / factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.imag(z) / factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "self.w_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w_ih",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2 * num_units, num_in]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "self.b_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(num_units)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "variable": {
                    "value": "inputs_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.w_ih)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_130": {
                "variable": {
                    "value": "inputs_mul_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "inputs_mul[:, :self._num_units]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "inputs_mul[:, self._num_units:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "complex_135": {
                "variable": {
                    "value": "state_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "real": {
                    "value": "state[:, :self._num_units]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "state[:, self._num_units:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_153": {
                "variable": {
                    "value": "new_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.real(new_state_c), tf.imag(new_state_c)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_46": {
                "a": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "tf.abs(z) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_66": {
                "features": {
                    "value": "norm + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_10": {
                "x": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_10": {
                "x": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "complex_34": {
                "real": {
                    "value": "sq_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(self.v) ** 2)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_46": {
                "params": {
                    "value": "tf.transpose(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_60": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "imag_60": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "real_67": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "imag_67": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_129": {
                "a": {
                    "value": "self.w_ih",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_33": {
                "x": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "a": {
                    "value": "vstar_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(z, vstar)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_58": {
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "real_153": {
                "input": {
                    "value": "new_state_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modReLU(preact, self.b_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_153": {
                "input": {
                    "value": "new_state_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "modReLU(preact, self.b_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_35": {
                "a": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.v, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LANGUAGE MODELING/mem_transformer.py": {
        "torch": {
            "device_869": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ger_25": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_49": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.q_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.kv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_87": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "chunk_107": {
                "variable": {
                    "value": "(head_k, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kv_net(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_114": {
                "variable": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(head_q, head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_127": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_157": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "30 * 30",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_163": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_170": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_172": {
                "variable": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_173": {
                "variable": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), 1, *x.size()[2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "variable": {
                    "value": "cores_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.d_head, self.d_head, self.d_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "cores_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.d_head, self.d_head, self.d_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_347": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "full_matrixs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "permute_347": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_414": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_415": {
                "variable": {
                    "value": "B_",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w_head_q, r_emb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_431": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_435": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_525": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_526": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_587": {
                "variable": {
                    "value": "initCore1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand(1, 40)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_588": {
                "variable": {
                    "value": "initCore2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_589": {
                "variable": {
                    "value": "initCore",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(initCore1, initCore2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_600": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_611": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), qlen - 1, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_208": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_243": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_257": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_293": {
                "variable": {
                    "value": "full_matrix_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pqr, ip,jq,kr->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[cores_1, factor_q_1, factor_k, factor_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_297": {
                "variable": {
                    "value": "full_matrix_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pqr, ip,jq,kr->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[cores_1, factor_q_2, factor_k_2, factor_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_301": {
                "variable": {
                    "value": "full_matrix_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pqr, ip,jq,kr->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[cores_2, factor_q_1, factor_k, factor_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_303": {
                "variable": {
                    "value": "full_matrix_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "pqr, ip,jq,kr->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[cores_2, factor_q_2, factor_k_2, factor_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_381": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_386": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_394": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "r_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_emb_pad, r_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "r_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_bias_pad, r_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_549": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_639": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_672": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_673": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_750": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_545": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(*inp.size(), self.d_proj)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_562": {
                "variable": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_587": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_675": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_677": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_679": {
                "variable": {
                    "value": "self.r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_697": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_716": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_721": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_529": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[200, 100]",
                            "List"
                        ],
                        [
                            "d_model if d_embed is None else d_embed",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_745": {
                "input": {
                    "value": "word_emb.new_ones(qlen, klen)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_781": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tril_209": {
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((x.size(0), x.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "x.size(1) - x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_533": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_538": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_539": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_684": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_839": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_logits(self.word_emb, self.out_layer.bias, target, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_742": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_743": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_808": {
                "variable": {
                    "value": "cur_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_emb_pad, cur_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/PATH_TO_WORK_DIR-text8/20190911-212327/scripts/mem_transformer.py": {
        "torch": {
            "device_782": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ger_25": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_49": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.q_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.kv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_86": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "chunk_106": {
                "variable": {
                    "value": "(head_k, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kv_net(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_113": {
                "variable": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(head_q, head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_126": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_159": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_166": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_168": {
                "variable": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_169": {
                "variable": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), 1, *x.size()[2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_251": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_254": {
                "variable": {
                    "value": "BD",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_275": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_339": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_340": {
                "variable": {
                    "value": "B_",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w_head_q, r_emb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_356": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_360": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_450": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_451": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_516": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_527": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), qlen - 1, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_204": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_230": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_239": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_311": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_319": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "r_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_emb_pad, r_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "r_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_bias_pad, r_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_473": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_555": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_588": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_589": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_665": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_469": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(*inp.size(), self.d_proj)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_486": {
                "variable": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_591": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_593": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_595": {
                "variable": {
                    "value": "self.r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_613": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_632": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_638": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_454": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[200, 100]",
                            "List"
                        ],
                        [
                            "d_model if d_embed is None else d_embed",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_660": {
                "input": {
                    "value": "word_emb.new_ones(qlen, klen)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tril_205": {
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((x.size(0), x.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "x.size(1) - x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_457": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_462": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_463": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_600": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_753": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_logits(self.word_emb, self.out_layer.bias, target, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_657": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_658": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/PATH_TO_WORK_DIR-text8/20190911-212327/scripts/train.py": {
        "torch": {
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_160": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_335": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.max_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.eta_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_551": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_297": {
                "variable": {
                    "value": "para_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MemTransformerLM(ntokens, args.n_layer, args.n_head, args.d_model, args.d_head, args.d_inner, args.dropout, args.dropatt, tie_weight=args.tied, d_embed=args.d_embed, div_val=args.div_val, tie_projs=tie_projs, pre_lnorm=args.pre_lnorm, tgt_len=args.tgt_len, ext_len=args.ext_len, mem_len=args.mem_len, cutoffs=cutoffs, same_length=args.same_length, attn_type=args.attn_type, clamp_len=args.clamp_len, sample_softmax=args.sample_softmax)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "model.half()",
                            "Call"
                        ],
                        [
                            "model.float()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_310": {
                "variable": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_311": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dense_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.mom",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_313": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.mom",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_338": {
                "variable": {
                    "value": "scheduler_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(sparse_params, lr=args.lr * 2)",
                            "Call"
                        ],
                        [
                            "optim.SparseAdam(sparse_params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.max_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.eta_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_349": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_165": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseAdam_323": {
                "variable": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_324": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dense_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_326": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_328": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_351": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "args.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_370": {
                "variable": {
                    "value": "opt_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_431": {
                "variable": {
                    "value": "data_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.batch_chunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_432": {
                "variable": {
                    "value": "target_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.batch_chunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_354": {
                "variable": {
                    "value": "scheduler_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(sparse_params, lr=args.lr * 2)",
                            "Call"
                        ],
                        [
                            "optim.SparseAdam(sparse_params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "args.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__457": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_512": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MemTransformerLM(ntokens, args.n_layer, args.n_head, args.d_model, args.d_head, args.d_inner, args.dropout, args.dropatt, tie_weight=args.tied, d_embed=args.d_embed, div_val=args.div_val, tie_projs=tie_projs, pre_lnorm=args.pre_lnorm, tgt_len=args.tgt_len, ext_len=args.ext_len, mem_len=args.mem_len, cutoffs=cutoffs, same_length=args.same_length, attn_type=args.attn_type, clamp_len=args.clamp_len, sample_softmax=args.sample_softmax)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "model.half()",
                            "Call"
                        ],
                        [
                            "model.float()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_514": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/complex_mem_transformer.py": {
        "torch": {
            "device_922": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ger_47": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(1, qlen + 1, 1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ],
                        [
                            "pos_seq.repeat([1, bsz, word_emb.size()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_71": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.q_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.kv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout_106": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_109": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "chunk_129": {
                "variable": {
                    "value": "(head_k, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kv_net(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_136": {
                "variable": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(head_q, head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_149": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout_181": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.o_net1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_185": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_192": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_194": {
                "variable": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_195": {
                "variable": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), 1, *x.size()[2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_244": {
                "variable": {
                    "value": "self.d_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model + self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_301": {
                "variable": {
                    "value": "BD_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q_real, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_302": {
                "variable": {
                    "value": "BD_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q_phase, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_309": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AC_real * AC_real + AC_phase * AC_phase",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(AC)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (rw_head_q, w_head_k))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_312": {
                "variable": {
                    "value": "BD",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "BD",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BD_real * BD_real + BD_phase * BD_phase",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(BD)",
                            "Call"
                        ],
                        [
                            "self._rel_shift(B_ + D_)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_334": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_338": {
                "variable": {
                    "value": "attn_vec_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v_real)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_339": {
                "variable": {
                    "value": "attn_vec_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v_phase)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_416": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_417": {
                "variable": {
                    "value": "B_",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w_head_q, r_emb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_433": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_437": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_533": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_534": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_601": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_612": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), qlen - 1, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_230": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "cat_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w_real]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "cat_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_phase, w_phase]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_261": {
                "variable": {
                    "value": "(w_head_q_real, w_head_k_real, w_head_v_real)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat_real))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat_real)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w_real))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w_real)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_262": {
                "variable": {
                    "value": "(w_head_q_phase, w_head_k_phase, w_head_v_phase)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net1(self.layer_norm(cat_phase))",
                            "Call"
                        ],
                        [
                            "self.qkv_net1(cat_phase)",
                            "Call"
                        ],
                        [
                            "self.qkv_net1(self.layer_norm(w_phase))",
                            "Call"
                        ],
                        [
                            "self.qkv_net1(w_phase)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_273": {
                "variable": {
                    "value": "(w_head_q_real, w_head_k_real, w_head_v_real)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat_real))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat_real)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w_real))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w_real)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_274": {
                "variable": {
                    "value": "(w_head_q_phase, w_head_k_phase, w_head_v_phase)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net1(self.layer_norm(cat_phase))",
                            "Call"
                        ],
                        [
                            "self.qkv_net1(cat_phase)",
                            "Call"
                        ],
                        [
                            "self.qkv_net1(self.layer_norm(w_phase))",
                            "Call"
                        ],
                        [
                            "self.qkv_net1(w_phase)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_388": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_396": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "r_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_emb_pad, r_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "r_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_bias_pad, r_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_556": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_640": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_690": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_691": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_769": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_779": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "qlen + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_780": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(1, qlen + 1, 1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ],
                        [
                            "pos_seq.repeat([1, bsz, word_emb.size()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_781": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(1, qlen + 1, 1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ],
                        [
                            "pos_seq.repeat([1, bsz, word_emb.size()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_803": {
                "variable": {
                    "value": "emb_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(1, qlen + 1, 1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ],
                        [
                            "pos_seq.repeat([1, bsz, word_emb.size()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "emb_peroid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pos_emb_phase(dec_inp)",
                            "Call"
                        ],
                        [
                            "self.period(dec_inp).repeat([1, 1, word_emb.size()[-1]])",
                            "Call"
                        ],
                        [
                            "dimension_multiplier.repeat([qlen, bsz, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_805": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(pos_seq, emb_peroid)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_806": {
                "variable": {
                    "value": "sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(pos_seq, emb_peroid)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_66": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout_68": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_178": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_293": {
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q_phase, w_head_k_phase)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_295": {
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q_real, w_head_k_phase)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linear_552": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(*inp.size(), self.d_proj)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_569": {
                "variable": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_693": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_695": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_697": {
                "variable": {
                    "value": "self.r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_715": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_734": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_739": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_903": {
                "input": {
                    "value": "torch.mul(hidden, hidden) + torch.mul(hidden_phase, hidden_phase)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_922": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_537": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[200, 100]",
                            "List"
                        ],
                        [
                            "d_model if d_embed is None else d_embed",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_679": {
                "variable": {
                    "value": "self.period",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_761": {
                "input": {
                    "value": "word_emb.new_ones(qlen, klen)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_43": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tril_231": {
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((x.size(0), x.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "x.size(1) - x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_540": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_545": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_546": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_682": {
                "variable": {
                    "value": "self.period",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_702": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_793": {
                "variable": {
                    "value": "dimension_multiplier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.period",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_794": {
                "variable": {
                    "value": "dimension_multiplier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dimension_multiplier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(self.period, -2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(dimension_multiplier, -2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_903": {
                "input": {
                    "value": "hidden_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "hidden_phase",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_909": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_logits(self.word_emb, self.out_layer.bias, target, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_758": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_758": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/data_utils.py": {
        "torch": {
            "load_240": {
                "variable": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_258": {
                "obj": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_lm_corpus(args.datadir, args.dataset)",
                            "Call"
                        ],
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "Corpus(datadir, dataset, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/eval.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/train.py": {
        "torch": {
            "device_189": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_170": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_345": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.max_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.eta_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_580": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_280": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_307": {
                "variable": {
                    "value": "para_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MemTransformerLM(ntokens, args.n_layer, args.n_head, args.d_model, args.d_head, args.d_inner, args.dropout, args.dropatt, sharing_phase_weight, tie_weight=args.tied, d_embed=args.d_embed, div_val=args.div_val, tie_projs=tie_projs, pre_lnorm=args.pre_lnorm, tgt_len=args.tgt_len, ext_len=args.ext_len, mem_len=args.mem_len, cutoffs=cutoffs, same_length=args.same_length, attn_type=args.attn_type, clamp_len=args.clamp_len, sample_softmax=args.sample_softmax)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "model.half()",
                            "Call"
                        ],
                        [
                            "model.float()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_320": {
                "variable": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_321": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dense_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.mom",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_323": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.mom",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_348": {
                "variable": {
                    "value": "scheduler_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(sparse_params, lr=args.lr * 2)",
                            "Call"
                        ],
                        [
                            "optim.SparseAdam(sparse_params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.max_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.eta_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_359": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_175": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseAdam_333": {
                "variable": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_334": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dense_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_336": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_338": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_361": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "args.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_380": {
                "variable": {
                    "value": "opt_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_453": {
                "variable": {
                    "value": "data_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.batch_chunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_454": {
                "variable": {
                    "value": "target_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.batch_chunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_364": {
                "variable": {
                    "value": "scheduler_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(sparse_params, lr=args.lr * 2)",
                            "Call"
                        ],
                        [
                            "optim.SparseAdam(sparse_params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "args.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__486": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_541": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MemTransformerLM(ntokens, args.n_layer, args.n_head, args.d_model, args.d_head, args.d_inner, args.dropout, args.dropatt, sharing_phase_weight, tie_weight=args.tied, d_embed=args.d_embed, div_val=args.div_val, tie_projs=tie_projs, pre_lnorm=args.pre_lnorm, tgt_len=args.tgt_len, ext_len=args.ext_len, mem_len=args.mem_len, cutoffs=cutoffs, same_length=args.same_length, attn_type=args.attn_type, clamp_len=args.clamp_len, sample_softmax=args.sample_softmax)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "model.half()",
                            "Call"
                        ],
                        [
                            "model.float()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_543": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/utils/adaptive_softmax.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "head_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight[:self.shortlist_size], self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "head_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias[:self.shortlist_size], self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_49": {
                "variable": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "head_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([weight[:self.shortlist_size], self.cluster_weight], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([bias[:self.shortlist_size], self.cluster_bias], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_50": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_77": {
                "variable": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden.index_select(0, indices_i)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[l_idx:h_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias[l_idx:h_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_78": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden_i, weight_i, bias=bias_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/utils/data_parallel.py": {
        "torch": {}
    },
    "LANGUAGE MODELING/pytorch-complex/utils/exp_utils.py": {
        "torch": {
            "save_39": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'optimizer_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/utils/log_uniform_sampler.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "all_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels.view(-1), neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits[:, :, None], sample_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_138": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                }
            },
            "Tensor_140": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_18": {
                "variable": {
                    "value": "log_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "range_max + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_40": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * n_sample",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_40": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_71": {
                "equation": {
                    "value": "ijk,ijk->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[true_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_73": {
                "equation": {
                    "value": "lk,ijk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[sample_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/utils/proj_adaptive_softmax.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_34": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_9": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_10": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_61": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_64": {
                "variable": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_65": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_86": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_86": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_139": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch-complex/utils/vocabulary.py": {
        "torch": {
            "cat_106": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_119": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/data_utils.py": {
        "torch": {
            "load_240": {
                "variable": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_258": {
                "obj": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_lm_corpus(args.datadir, args.dataset)",
                            "Call"
                        ],
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "Corpus(datadir, dataset, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/eval.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_60": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/mem_transformer.py": {
        "torch": {
            "device_782": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ger_25": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_49": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.q_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.kv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_86": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "chunk_106": {
                "variable": {
                    "value": "(head_k, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kv_net(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_113": {
                "variable": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(head_q, head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_126": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_159": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_166": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_168": {
                "variable": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_169": {
                "variable": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), 1, *x.size()[2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_251": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_254": {
                "variable": {
                    "value": "BD",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_275": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_339": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_340": {
                "variable": {
                    "value": "B_",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w_head_q, r_emb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_356": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_360": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_450": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_451": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_516": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_527": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), qlen - 1, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_204": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_230": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_239": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_311": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_319": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "r_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_emb_pad, r_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "r_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_bias_pad, r_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_473": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_555": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_588": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_589": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_665": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_469": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(*inp.size(), self.d_proj)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_486": {
                "variable": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_591": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_593": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_595": {
                "variable": {
                    "value": "self.r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_613": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_632": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_638": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_454": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[200, 100]",
                            "List"
                        ],
                        [
                            "d_model if d_embed is None else d_embed",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_660": {
                "input": {
                    "value": "word_emb.new_ones(qlen, klen)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tril_205": {
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((x.size(0), x.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "x.size(1) - x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_457": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_462": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_463": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_600": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_753": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_logits(self.word_emb, self.out_layer.bias, target, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "triu_657": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_658": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones(qlen, klen)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/train.py": {
        "torch": {
            "device_179": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_160": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_335": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.max_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.eta_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_551": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_297": {
                "variable": {
                    "value": "para_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MemTransformerLM(ntokens, args.n_layer, args.n_head, args.d_model, args.d_head, args.d_inner, args.dropout, args.dropatt, tie_weight=args.tied, d_embed=args.d_embed, div_val=args.div_val, tie_projs=tie_projs, pre_lnorm=args.pre_lnorm, tgt_len=args.tgt_len, ext_len=args.ext_len, mem_len=args.mem_len, cutoffs=cutoffs, same_length=args.same_length, attn_type=args.attn_type, clamp_len=args.clamp_len, sample_softmax=args.sample_softmax)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "model.half()",
                            "Call"
                        ],
                        [
                            "model.float()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_310": {
                "variable": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_311": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dense_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.mom",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_313": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.mom",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_338": {
                "variable": {
                    "value": "scheduler_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(sparse_params, lr=args.lr * 2)",
                            "Call"
                        ],
                        [
                            "optim.SparseAdam(sparse_params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.max_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.eta_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_349": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_165": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseAdam_323": {
                "variable": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sparse_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_324": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dense_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_326": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_328": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_351": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adagrad(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(dense_params, lr=args.lr, momentum=args.mom)",
                            "Call"
                        ],
                        [
                            "optim.Adam(dense_params, lr=args.lr)",
                            "Call"
                        ],
                        [
                            "FP16_Optimizer(optimizer, static_loss_scale=args.static_loss_scale, dynamic_loss_scale=args.dynamic_loss_scale, dynamic_loss_args={'init_scale': 2 ** 16})",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "args.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_370": {
                "variable": {
                    "value": "opt_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_431": {
                "variable": {
                    "value": "data_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.batch_chunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_432": {
                "variable": {
                    "value": "target_chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "args.batch_chunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_354": {
                "variable": {
                    "value": "scheduler_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(sparse_params, lr=args.lr * 2)",
                            "Call"
                        ],
                        [
                            "optim.SparseAdam(sparse_params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "args.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__457": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_512": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MemTransformerLM(ntokens, args.n_layer, args.n_head, args.d_model, args.d_head, args.d_inner, args.dropout, args.dropatt, tie_weight=args.tied, d_embed=args.d_embed, div_val=args.div_val, tie_projs=tie_projs, pre_lnorm=args.pre_lnorm, tgt_len=args.tgt_len, ext_len=args.ext_len, mem_len=args.mem_len, cutoffs=cutoffs, same_length=args.same_length, attn_type=args.attn_type, clamp_len=args.clamp_len, sample_softmax=args.sample_softmax)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "model.half()",
                            "Call"
                        ],
                        [
                            "model.float()",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_514": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/utils/adaptive_softmax.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "head_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight[:self.shortlist_size], self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "head_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias[:self.shortlist_size], self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_49": {
                "variable": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "head_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([weight[:self.shortlist_size], self.cluster_weight], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([bias[:self.shortlist_size], self.cluster_bias], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_50": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_77": {
                "variable": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden.index_select(0, indices_i)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[l_idx:h_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias[l_idx:h_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_78": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden_i, weight_i, bias=bias_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/utils/data_parallel.py": {
        "torch": {}
    },
    "LANGUAGE MODELING/pytorch/utils/exp_utils.py": {
        "torch": {
            "save_39": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'optimizer_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/utils/log_uniform_sampler.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "all_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels.view(-1), neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits[:, :, None], sample_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_138": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                }
            },
            "Tensor_140": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_18": {
                "variable": {
                    "value": "log_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "range_max + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_40": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * n_sample",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_40": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_71": {
                "equation": {
                    "value": "ijk,ijk->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[true_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_73": {
                "equation": {
                    "value": "lk,ijk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[sample_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/utils/proj_adaptive_softmax.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_34": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_9": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_10": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_61": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_64": {
                "variable": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_65": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_112": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_86": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_86": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_139": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "data": {
                    "value": "torch.Tensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "LANGUAGE MODELING/pytorch/utils/vocabulary.py": {
        "torch": {
            "cat_106": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_119": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/attention.py": {
        "torch": {
            "softmax_15": {
                "variable": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_12": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_18": {
                "input": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/attention_complex.py": {
        "torch": {
            "sqrt_18": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores_real * scores_real + scores_phase * scores_phase",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(scores)",
                            "Call"
                        ],
                        [
                            "scores / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_23": {
                "variable": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores_real * scores_real + scores_phase * scores_phase",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(scores)",
                            "Call"
                        ],
                        [
                            "scores / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_14": {
                "input": {
                    "value": "query_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key_phase.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_15": {
                "input": {
                    "value": "query_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key_real.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "input": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_phase",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/dynamic_rnn.py": {
        "torch": {
            "argsort_54": {
                "variable": {
                    "value": "x_sort_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argsort_55": {
                "variable": {
                    "value": "x_unsort_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sort_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argsort(-x_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_59": {
                "variable": {
                    "value": "x_emb_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[x_sort_idx.long()]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_len[x_sort_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "variable": {
                    "value": "ht",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ht",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.transpose(ht, 0, 1)[x_unsort_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ht, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_33": {
                "variable": {
                    "value": "self.RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_82": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out_pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "self.batch_first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_37": {
                "variable": {
                    "value": "self.RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_74": {
                "input": {
                    "value": "ht",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.transpose(ht, 0, 1)[x_unsort_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ht, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "ct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.transpose(ct, 0, 1)[x_unsort_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ct, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RNN_41": {
                "variable": {
                    "value": "self.RNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_87": {
                "input": {
                    "value": "ct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.transpose(ct, 0, 1)[x_unsort_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(ct, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/encoder.py": {
        "torch": {}
    },
    "TEXT CLASSIFICATION/Transformer/encoder_complex.py": {
        "torch": {}
    },
    "TEXT CLASSIFICATION/Transformer/feed_forward.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_16": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/feed_forward_complex.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_16": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/main.py": {
        "torch": {
            "Adam_23": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_71": {
                "input": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(text)",
                            "Call"
                        ],
                        [
                            "model(text)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_38": {
                "input": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(text)",
                            "Call"
                        ],
                        [
                            "model(text)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/model_transformer/Complex_order.py": {
        "torch": {
            "Embedding_46": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.d_model + self.config.d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_54": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "enc_output_real.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "enc_output_real.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "os_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=enc_output_real.device, dtype=enc_output_real.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=enc_output_real.device, dtype=enc_output_real.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_66": {
                "variable": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=enc_output_real.device, dtype=enc_output_real.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(x.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mul(pos_seq, enc_output_phase)",
                            "Call"
                        ],
                        [
                            "self.drop(enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_70": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(x.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mul(pos_seq, enc_output_phase)",
                            "Call"
                        ],
                        [
                            "self.drop(enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_71": {
                "variable": {
                    "value": "sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(x.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mul(pos_seq, enc_output_phase)",
                            "Call"
                        ],
                        [
                            "self.drop(enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "encoded_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_sents_real, encoded_sents_phase]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/model_transformer/Complex_vanilla.py": {
        "torch": {
            "Embedding_30": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_31": {
                "variable": {
                    "value": "self.position_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "src_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.d_model + self.config.d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_36": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_45": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "enc_output_real.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "enc_output_real.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "os_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=enc_output_real.device, dtype=enc_output_real.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=enc_output_real.device, dtype=enc_output_real.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_48": {
                "variable": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=enc_output_real.device, dtype=enc_output_real.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(pos_seq, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(x.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mul(pos_seq, enc_output_phase)",
                            "Call"
                        ],
                        [
                            "self.drop(enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_53": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(x.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mul(pos_seq, enc_output_phase)",
                            "Call"
                        ],
                        [
                            "self.drop(enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_54": {
                "variable": {
                    "value": "sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(x.permute(1, 0))",
                            "Call"
                        ],
                        [
                            "torch.mul(pos_seq, enc_output_phase)",
                            "Call"
                        ],
                        [
                            "self.drop(enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "encoded_sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_sents_real, encoded_sents_phase]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/model_transformer/PE_reduce.py": {
        "torch": {
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_20": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Embeddings(config.d_model, src_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_49": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/model_transformer/TPE_reduce.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_21": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_22": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_25": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(position.numpy() * div_term.unsqueeze(0).numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_26": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(position.numpy() * div_term.unsqueeze(0).numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Embeddings(config.d_model, src_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_54": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_25": {
                "data": {
                    "value": "position.numpy() * div_term.unsqueeze(0).numpy()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_26": {
                "data": {
                    "value": "position.numpy() * div_term.unsqueeze(0).numpy()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_23": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/model_transformer/transformer_wo.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Embeddings(config.d_model, src_vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_33": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/sublayer.py": {
        "torch": {
            "Parameter_10": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_10": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/train.py": {
        "torch": {
            "Adam_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_32": {
                "variable": {
                    "value": "NLLLoss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save/model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_51": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load('model_save/model')",
                            "Call"
                        ],
                        [
                            "Transformer(config, len(dataset.vocab))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save/model",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "TEXT CLASSIFICATION/Transformer/train_utils.py": {
        "torch": {
            "ModuleList_15": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_41": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_43": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(position.numpy() * div_term.unsqueeze(0).numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_44": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(position.numpy() * div_term.unsqueeze(0).numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "data": {
                    "value": "position.numpy() * div_term.unsqueeze(0).numpy()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_44": {
                "data": {
                    "value": "position.numpy() * div_term.unsqueeze(0).numpy()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_41": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TRANSLATION/DataLoader.py": {
        "torch": {
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TRANSLATION/dataset.py": {
        "torch": {}
    },
    "TRANSLATION/preprocess.py": {
        "torch": {
            "load_120": {
                "variable": {
                    "value": "predefined_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'settings': opt, 'dict': {'src': src_word2idx, 'tgt': tgt_word2idx}, 'train': {'src': train_src_insts, 'tgt': train_tgt_insts}, 'valid': {'src': valid_src_insts, 'tgt': valid_tgt_insts}}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.save_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TRANSLATION/train.py": {
        "torch": {
            "load_222": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_236": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if opt.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TranslationDataset(src_word2idx=data['dict']['src'], tgt_word2idx=data['dict']['tgt'], src_insts=data['train']['src'], tgt_insts=data['train']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "paired_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_277": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TranslationDataset(src_word2idx=data['dict']['src'], tgt_word2idx=data['dict']['tgt'], src_insts=data['valid']['src'], tgt_insts=data['valid']['tgt'])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "paired_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_36": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "model(src_seq, src_pos, tgt_seq, tgt_pos)",
                            "Call"
                        ],
                        [
                            "model(src_seq, src_pos, tgt_seq, tgt_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_36": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "gold.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_38": {
                "variable": {
                    "value": "log_prb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "model(src_seq, src_pos, tgt_seq, tgt_pos)",
                            "Call"
                        ],
                        [
                            "model(src_seq, src_pos, tgt_seq, tgt_pos)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_44": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "model(src_seq, src_pos, tgt_seq, tgt_pos)",
                            "Call"
                        ],
                        [
                            "model(src_seq, src_pos, tgt_seq, tgt_pos)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "tgt_seq[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tgt_seq[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_256": {
                "params": {
                    "value": "filter(lambda x: x.requires_grad, transformer.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'settings': opt, 'epoch': epoch_i}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.save_model + '_accu_{accu:3.3f}.chkpt'.format(accu=100 * valid_accu)",
                            "BinOp"
                        ],
                        [
                            "opt.save_model + '.chkpt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_174": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'settings': opt, 'epoch': epoch_i}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.save_model + '_accu_{accu:3.3f}.chkpt'.format(accu=100 * valid_accu)",
                            "BinOp"
                        ],
                        [
                            "opt.save_model + '.chkpt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "TRANSLATION/transformer/Beam.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_70": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_22": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "TRANSLATION/transformer/Layers.py": {
        "torch": {}
    },
    "TRANSLATION/transformer/Models.py": {
        "torch": {
            "triu_37": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((len_s, len_s), device=seq.device, dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_src_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cuda.LongTensor(src_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_84": {
                "variable": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(src_seq)",
                            "Call"
                        ],
                        [
                            "torch.mul(pos.float(), enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output_real_real * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_86": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(src_seq)",
                            "Call"
                        ],
                        [
                            "torch.mul(pos.float(), enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output_real_real * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_87": {
                "variable": {
                    "value": "sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(src_seq)",
                            "Call"
                        ],
                        [
                            "torch.mul(pos.float(), enc_output_phase)",
                            "Call"
                        ],
                        [
                            "enc_output_real_real * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Embedding_116": {
                "variable": {
                    "value": "self.tgt_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_tgt_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_144": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cuda.LongTensor(tgt_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_147": {
                "variable": {
                    "value": "dec_output_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "dec_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(tgt_seq)",
                            "Call"
                        ],
                        [
                            "torch.mul(pos.float(), dec_output_phase)",
                            "Call"
                        ],
                        [
                            "dec_output_real_real * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_150": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(tgt_seq)",
                            "Call"
                        ],
                        [
                            "torch.mul(pos.float(), dec_output_phase)",
                            "Call"
                        ],
                        [
                            "dec_output_real_real * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_151": {
                "variable": {
                    "value": "sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_output_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.position_enc(tgt_seq)",
                            "Call"
                        ],
                        [
                            "torch.mul(pos.float(), dec_output_phase)",
                            "Call"
                        ],
                        [
                            "dec_output_real_real * sin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.tgt_word_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_tgt_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "(len_s, len_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seq.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "TRANSLATION/transformer/Modules.py": {
        "torch": {
            "Dropout_11": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_12": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_real * attn_real + attn_phase * attn_phase",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(attn)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_51": {
                "variable": {
                    "value": "output_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_real * attn_real + attn_phase * attn_phase",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(attn)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_real",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "output_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_real * attn_real + attn_phase * attn_phase",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(attn)",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_phase",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_16": {
                "input": {
                    "value": "q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_phase.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_18": {
                "input": {
                    "value": "q_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_real.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_34": {
                "input": {
                    "value": "attn_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_real, k_phase.transpose(1, 2)) + torch.bmm(q_phase, k_real.transpose(1, 2))",
                            "BinOp"
                        ],
                        [
                            "attn_phase / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn_phase.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn_phase)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_phase)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_phase",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_36": {
                "input": {
                    "value": "attn_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(q_real, k_phase.transpose(1, 2)) + torch.bmm(q_phase, k_real.transpose(1, 2))",
                            "BinOp"
                        ],
                        [
                            "attn_phase / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn_phase.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn_phase)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_phase)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_real",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "TRANSLATION/transformer/SubLayers.py": {
        "torch": {
            "Conv1d_12": {
                "variable": {
                    "value": "self.w_1_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_13": {
                "variable": {
                    "value": "self.w_1_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_16": {
                "variable": {
                    "value": "self.w_2_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_17": {
                "variable": {
                    "value": "self.w_2_phase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_19": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_29": {
                "variable": {
                    "value": "w1_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_1_real(cnn_real) - self.w_1_phase(cnn_phase)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "w1_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_1_real(cnn_phase) + self.w_1_phase(cnn_real)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_69": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "TRANSLATION/transformer/Translator.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if opt.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_18": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "LogSoftmax_40": {
                "variable": {
                    "value": "model.word_prob_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[b.get_current_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_93": {
                "variable": {
                    "value": "dec_partial_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len_dec_seq + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_103": {
                "variable": {
                    "value": "word_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.tgt_word_prj(dec_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TRANSLATION/translate.py": {
        "torch": {
            "load_38": {
                "variable": {
                    "value": "preprocess_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}