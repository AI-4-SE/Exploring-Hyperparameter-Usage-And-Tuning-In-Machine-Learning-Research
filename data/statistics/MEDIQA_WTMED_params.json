{
    "data_utils/metrics.py": {
        "sklearn": {
            "accuracy_score_7": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "f1_score_10": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_13": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ],
                        [
                            "predicts",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data_utils/utils.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_30": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "module/bert_optim.py": {
        "torch": {
            "zeros_like_85": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "norm_buf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exp_inf.mul_(beta2).unsqueeze(0), grad.abs().add_(eps).unsqueeze_(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "state[exp_inf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_125": {
                "input": {
                    "value": "norm_buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([exp_inf.mul_(beta2).unsqueeze(0), grad.abs().add_(eps).unsqueeze_(0)], 0)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "(exp_inf, exp_inf.new().long())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__116": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "module/common.py": {
        "torch": {
            "sigmoid_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "erf_15": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/dropout_wrapper.py": {
        "torch": {
            "dropout_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_27": {
                "input": {
                    "value": "(1 - self.dropout_p) * (x.data.new(x.size(0), x.size(2)).zero_() + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/my_optim.py": {
        "torch": {
            "Parameter_102": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "data": {
                    "value": "_norm(weight, dim).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "module/san.py": {
        "torch": {
            "Parameter_76": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_43": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2, (x1 - x2).abs(), x1 * x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_89": {
                "variable": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(att_scores, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x1, x2, (x1 - x2).abs(), x1 * x2], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, x2], 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp_scores_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mask[idx].view(x.size(0), 1).expand_as(inp) * F.softmax(inp, 1) for (idx, inp) in enumerate(scores_list)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_104": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x_sum, h0)",
                            "Call"
                        ],
                        [
                            "torch.stack(tmp_scores_list, 2)",
                            "Call"
                        ],
                        [
                            "torch.mean(scores, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(scores)",
                            "Call"
                        ],
                        [
                            "scores_list[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_105": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x_sum, h0)",
                            "Call"
                        ],
                        [
                            "torch.stack(tmp_scores_list, 2)",
                            "Call"
                        ],
                        [
                            "torch.mean(scores, 2)",
                            "Call"
                        ],
                        [
                            "torch.log(scores)",
                            "Call"
                        ],
                        [
                            "scores_list[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bernoulli_22": {
                "input": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - dropout_p) * (new_data.zero_() + 1)",
                            "BinOp"
                        ],
                        [
                            "new_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_101": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(1.0 / (1 - dropout_p) * torch.bernoulli(new_data), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "generate_mask(self.alpha.data.new(x.size(0), self.num_turn), self.mem_random_drop, self.training)",
                            "Call"
                        ],
                        [
                            "[m.contiguous() for m in torch.unbind(mask, 1)]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "input": {
                    "value": "att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn(x, h0, x_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/similarity.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.proj_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.x_dot_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, key.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.bmm(x2.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "scores + (x1_logits.expand_as(scores) + x2_logits.expand_as(scores))",
                            "BinOp"
                        ],
                        [
                            "x1_o.bmm(x2_o.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.bmm(proj.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "x1_logits.expand_as(shape) + x2_logits.expand_as(shape)",
                            "BinOp"
                        ],
                        [
                            "x1_dot.bmm(x2.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.score_func(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.linear(self.f(self.FC(x_flat))).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.score_func(x1, x2, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.bmm(x2.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "scores + (x1_logits.expand_as(scores) + x2_logits.expand_as(scores))",
                            "BinOp"
                        ],
                        [
                            "x1_o.bmm(x2_o.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "x.bmm(proj.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "x1_logits.expand_as(shape) + x2_logits.expand_as(shape)",
                            "BinOp"
                        ],
                        [
                            "x1_dot.bmm(x2.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.score_func(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.linear(x_flat).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.linear(self.f(self.FC(x_flat))).view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "flat_scores.contiguous().view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.score_func(x1, x2, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_305": {
                "variable": {
                    "value": "self.attn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_330": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_size",
                            "Method Argument"
                        ],
                        [
                            "y_size",
                            "Method Argument"
                        ],
                        [
                            "y_size",
                            "Method Argument"
                        ],
                        [
                            "y_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_size",
                            "Method Argument"
                        ],
                        [
                            "x_size",
                            "Method Argument"
                        ],
                        [
                            "x_size",
                            "Method Argument"
                        ],
                        [
                            "x_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_358": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "y_size + x_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_388": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x * y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_420": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "flat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x * y, torch.abs(x - y)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_538": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "variable"
                        ],
                        [
                            "self.dropout(q)",
                            "Call"
                        ],
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.qkv_head_dim[0]).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_555": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_558": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.float().masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf')).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights.float(), dim=-1).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_weights)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "v.contiguous().view(src_len, bsz * self.num_heads, self.qkv_head_dim[2]).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_45": {
                "variable": {
                    "value": "self.proj_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.proj_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.proj_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x2_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.scalar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, 1) / self.hidden_size ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.sclalar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ],
                        [
                            "x1_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ],
                        [
                            "x2_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_113": {
                "variable": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_114": {
                "variable": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_149": {
                "variable": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.x_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_150": {
                "variable": {
                    "value": "self.x_dot_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.x_dot_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_151": {
                "variable": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.y_linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_216": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.data.new(logits.size(1)).zero_() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_216": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_264": {
                "variable": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.FC",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_319": {
                "tensors": {
                    "value": "rvl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_332": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_360": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_390": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_422": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_487": {
                "variable": {
                    "value": "self.proj_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(dim, self.hidden_size) for dim in self.qkv_dim[0:2]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "diag_552": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.data.new(attn_weights.size(1)).zero_() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_552": {
                "variable": {
                    "value": "diag_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_51": {
                "variable": {
                    "value": "self.proj_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.proj_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_86": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_490": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj(y) if self.transform_on else y",
                            "IfExp"
                        ],
                        [
                            "self.dropout(proj)",
                            "Call"
                        ],
                        [
                            "self.proj_modules",
                            "Attribute"
                        ],
                        [
                            "weight_norm(proj)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_487": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_438": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/sub_layers.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_25": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_12": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_13": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mt_dnn/batcher.py": {
        "torch": {}
    },
    "mt_dnn/matcher.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.scoring_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.parse_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "parse_clf_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stx_parse_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "labels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.generic_feature_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_generic_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_generic_features * feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.generic_feature_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "generic_feature_clf_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_generic_features * feature_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "labels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.domain_feature_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_domain_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_domain_features * feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.domain_feature_clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "domain_feature_clf_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_domain_features * feature_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "labels[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "out_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lab in enumerate(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.treelstm.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_145": {
                "variable": {
                    "value": "generic_feature_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generic_feature_proj(generic_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "domain_feature_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.domain_feature_proj(domain_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mt_dnn/model.py": {
        "torch": {
            "DataParallel_41": {
                "module": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(labels.cuda(non_blocking=True), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "Variable(labels, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_158": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mnetwork(*inputs, bin_parse_as=self._value_for('parse_ids_a', batch_data, batch_meta), bin_parse_bs=self._value_for('parse_ids_b', batch_data, batch_meta), parse_as_mask=self._value_for('parse_masks_a', batch_data, batch_meta), parse_bs_mask=self._value_for('parse_masks_b', batch_data, batch_meta), generic_features=self._value_for('generic_features', batch_data, batch_meta), domain_features=self._value_for('domain_features', batch_data, batch_meta))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, batch_meta['pairwise_size'])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(labels.cuda(non_blocking=True), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "Variable(labels, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(*inputs, bin_parse_as=self._value_for('parse_ids_a', batch_data, batch_meta), bin_parse_bs=self._value_for('parse_ids_b', batch_data, batch_meta), parse_as_mask=self._value_for('parse_masks_a', batch_data, batch_meta), parse_bs_mask=self._value_for('parse_masks_b', batch_data, batch_meta), generic_features=self._value_for('generic_features', batch_data, batch_meta), domain_features=self._value_for('domain_features', batch_data, batch_meta))",
                            "Call"
                        ],
                        [
                            "score.contiguous().view(-1, batch_meta['pairwise_size'])",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=1)",
                            "Call"
                        ],
                        [
                            "score.data.cpu()",
                            "Call"
                        ],
                        [
                            "score.numpy()",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=1)",
                            "Call"
                        ],
                        [
                            "score.data.cpu()",
                            "Call"
                        ],
                        [
                            "score.numpy()",
                            "Call"
                        ],
                        [
                            "score.reshape(-1).tolist()",
                            "Call"
                        ],
                        [
                            "score.reshape(-1).tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(*inputs, bin_parse_as=self._value_for('parse_ids_a', batch_data, batch_meta), bin_parse_bs=self._value_for('parse_ids_b', batch_data, batch_meta), parse_as_mask=self._value_for('parse_masks_a', batch_data, batch_meta), parse_bs_mask=self._value_for('parse_masks_b', batch_data, batch_meta), generic_features=self._value_for('generic_features', batch_data, batch_meta), domain_features=self._value_for('domain_features', batch_data, batch_meta))",
                            "Call"
                        ],
                        [
                            "score.contiguous().view(-1, batch_meta['pairwise_size'])",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=1)",
                            "Call"
                        ],
                        [
                            "score.data.cpu()",
                            "Call"
                        ],
                        [
                            "score.numpy()",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=1)",
                            "Call"
                        ],
                        [
                            "score.data.cpu()",
                            "Call"
                        ],
                        [
                            "score.numpy()",
                            "Call"
                        ],
                        [
                            "score.reshape(-1).tolist()",
                            "Call"
                        ],
                        [
                            "score.reshape(-1).tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adadelta_63": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in self.network.named_parameters() if n not in no_decay], 'weight_decay_rate': 0.01}, {'params': [p for (n, p) in self.network.named_parameters() if n in no_decay], 'weight_decay_rate': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mse_loss_151": {
                "input": {
                    "value": "logits.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(labels.cuda(non_blocking=True), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "Variable(labels, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_153": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mnetwork(*inputs, bin_parse_as=self._value_for('parse_ids_a', batch_data, batch_meta), bin_parse_bs=self._value_for('parse_ids_b', batch_data, batch_meta), parse_as_mask=self._value_for('parse_masks_a', batch_data, batch_meta), parse_bs_mask=self._value_for('parse_masks_b', batch_data, batch_meta), generic_features=self._value_for('generic_features', batch_data, batch_meta), domain_features=self._value_for('domain_features', batch_data, batch_meta))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, batch_meta['pairwise_size'])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(labels.cuda(non_blocking=True), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "Variable(labels, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mt_dnn/treelstm.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cx(input)",
                            "Call"
                        ],
                        [
                            "i * update + lf * lc + rf * rc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ilh(lh) + self.irh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lflh(lh) + self.lfrh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_86": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rflh(lh) + self.rfrh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_87": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ulh(lh) + self.urh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_101": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embedding_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "lh",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "rh",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "input": {
                    "value": "self.olh(lh) + self.orh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cx(input)",
                            "Call"
                        ],
                        [
                            "i * update + lf * lc + rf * rc",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "postpro/model.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_22": {
                "variable": {
                    "value": "new_prob[:, :, self.n_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_members",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_28": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.bmm(hidden.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "postpro/postpro.py": {
        "torch": {
            "Adam_20": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_199": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TensorDataset_186": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.stack(probs, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_221": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'postpro_model.bin'",
                            "str"
                        ]
                    ]
                }
            },
            "cross_entropy_30": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(probs)",
                            "Call"
                        ],
                        [
                            "logits.reshape(-1, logits.shape[-1])",
                            "Call"
                        ],
                        [
                            "model(probs)",
                            "Call"
                        ],
                        [
                            "logits.reshape(-1, logits.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataloader",
                            "variable"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.reshape(-1)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "variable"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.reshape(-1)",
                            "Call"
                        ],
                        [
                            "read_tsv(gold_tsv, -1, False)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([LABEL2IDX[l] for l in labels])",
                            "Call"
                        ],
                        [
                            "read_tsv(gold_tsv, -1, False)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([LABEL2IDX[l] for l in labels])",
                            "Call"
                        ],
                        [
                            "labels.reshape(-1, N_MEMBERS)",
                            "Call"
                        ],
                        [
                            "remove_non_conflicts(probs, labels)",
                            "Call"
                        ],
                        [
                            "zip(*zipped_data[start:end])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "new_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "probs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataloader",
                            "variable"
                        ],
                        [
                            "probs.to(device)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "variable"
                        ],
                        [
                            "probs.to(device)",
                            "Call"
                        ],
                        [
                            "probs.reshape(-1, N_MEMBERS, N_CLASSES)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(read_json(pred_json)['scores'])",
                            "Call"
                        ],
                        [
                            "probs.reshape(-1, N_CLASSES)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(read_json(pred_json)['scores'])",
                            "Call"
                        ],
                        [
                            "probs.reshape(-1, N_CLASSES)",
                            "Call"
                        ],
                        [
                            "probs.reshape(-1, N_MEMBERS, N_CLASSES)",
                            "Call"
                        ],
                        [
                            "remove_non_conflicts(probs, labels)",
                            "Call"
                        ],
                        [
                            "zip(*zipped_data[start:end])",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_187": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.stack(probs, dim=0), torch.stack(labels, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_219": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PostProModel(N_CLASSES, N_MEMBERS, hidden_dim)",
                            "Call"
                        ],
                        [
                            "torch.load(model_save_path).to(device)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'postpro_model.bin'",
                            "str"
                        ]
                    ]
                }
            },
            "stack_186": {
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataloader",
                            "variable"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.reshape(-1)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "variable"
                        ],
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "labels.reshape(-1)",
                            "Call"
                        ],
                        [
                            "read_tsv(gold_tsv, -1, False)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([LABEL2IDX[l] for l in labels])",
                            "Call"
                        ],
                        [
                            "read_tsv(gold_tsv, -1, False)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([LABEL2IDX[l] for l in labels])",
                            "Call"
                        ],
                        [
                            "labels.reshape(-1, N_MEMBERS)",
                            "Call"
                        ],
                        [
                            "remove_non_conflicts(probs, labels)",
                            "Call"
                        ],
                        [
                            "zip(*zipped_data[start:end])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_92": {
                "start": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "load_320": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.init_checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "wrapping_util.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.argv[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_22": {
                "variable": {
                    "value": "mtdnn_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mtdnn_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.argv[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_24": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path)",
                            "Call"
                        ],
                        [
                            "{'state': model, 'config': mtdnn_model['config']}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_path)",
                            "Call"
                        ],
                        [
                            "model['state']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'new_pytorch_model.bin'",
                            "str"
                        ]
                    ]
                }
            },
            "load_26": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.argv[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_28": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path)",
                            "Call"
                        ],
                        [
                            "{'state': model, 'config': mtdnn_model['config']}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_path)",
                            "Call"
                        ],
                        [
                            "model['state']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'new_pytorch_model.bin'",
                            "str"
                        ]
                    ]
                }
            }
        }
    }
}