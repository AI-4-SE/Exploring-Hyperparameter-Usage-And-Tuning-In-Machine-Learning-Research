{
    "train_scripts/utils.py": {
        "sklearn": {
            "roc_auc_score_69": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(g_truth_np == mel_idx).astype(int)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "probs_np[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_244": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelanomaDataset(fold_train_df, 'train', 'train', meta_features, transforms=train_transforms())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "CFG['train_bs']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "CFG['pin_memory']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "CFG['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelanomaDataset(fold_valid_df, 'train', 'val', meta_features, transforms=val_transforms())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "CFG['valid_bs']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "CFG['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "CFG['pin_memory']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "probs_np",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "g_truth_np",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "g_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.myfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enet.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "in_ch + 128",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_222": {
                "variable": {
                    "value": "self.enet.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(row.filepath)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(image, cv2.COLOR_RGB2BGR)",
                            "Call"
                        ],
                        [
                            "res['image'] / 255.0",
                            "BinOp"
                        ],
                        [
                            "image.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.meta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(n_meta_features, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_meta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "self.csv.iloc[index][self.meta_features]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "self.csv.iloc[index].target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "in_features": {
                    "value": "n_meta_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(meta_features)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_213": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SiLU_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_215": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_217": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SiLU_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_app.py": {
        "tensorflow": {}
    },
    "src/torch2tf.py": {
        "tensorflow": {},
        "torch": {
            "load_11": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.myfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enet.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_27": {
                "variable": {
                    "value": "self.enet.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "my_st.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(image_path)",
                            "Call"
                        ],
                        [
                            "image[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "res['image'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "image.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(image).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "metadata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[gender, age, 1, image_size] + site_oh.tolist()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(metadata).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.myfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enet.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_23": {
                "variable": {
                    "value": "self.enet.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/fp16_model.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_11": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.myfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enet.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_15": {
                "variable": {
                    "value": "self.enet.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_35": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'fp16_' + model_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/infer.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(image_path)",
                            "Call"
                        ],
                        [
                            "image[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "res['image'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "image.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(image).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "metadata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[gender, age, 1, image_size] + site_oh.tolist()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(metadata).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.myfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enet.classifier.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_19": {
                "variable": {
                    "value": "self.enet.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_scripts/train.py": {
        "torch": {
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "bce_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "CFG['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GradScaler_129": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "CFG['init_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(json_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_134": {
                "variable": {
                    "value": "scheduler_cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=CFG['init_lr'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "CFG['cosine_epo']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/model_fold_{}_{}'.format(CFG['save_path'], fold, CFG['tag'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "autocast_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_scripts/warmup_scheduler.py": {
        "torch": {}
    }
}