{
    "src/common.py": {
        "sklearn": {
            "shuffle_96": {
                "variable": {
                    "value": "(train_X, train_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KFold_229": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "args.n_fold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.eval_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_262": {
                "variable": {
                    "value": "(train_X, dev_X, train_y, dev_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.valid_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.eval_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_302": {
                "variable": {
                    "value": "(train_X, dev_X, train_y, dev_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "args.valid_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.eval_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "memory_allocated_26": {
                "variable": {
                    "value": "self.initial_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_max_memory_allocated_27": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-nn.functional.log_softmax(score_y, dim=1)[dummy_index, batch_y]",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "Adam_190": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_192": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_290": {
                "obj": {
                    "value": "best_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/{}.mdl'.format(args.suffix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "memory_allocated_32": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_memory_allocated_33": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_140": {
                "input": {
                    "value": "score_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/lzd_lstm.py": {
        "sklearn": {},
        "torch": {
            "LSTM_66": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_lstm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_lstm_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_cls",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_frags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lzd_encoder(lst_lzd_sequences)",
                            "Call"
                        ],
                        [
                            "h_frags[torch_seq_order.unsqueeze(1), padded_non_char_seg[torch_seq_order]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_101": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(h_frags, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, n_seq, 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "torch_seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(sorted(len_seqs, reverse=True)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_106": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(h_frags, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, n_seq, 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(h_frags, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, n_seq, 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[:, :, 0, :], h[:, :, 1, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_127": {
                "variable": {
                    "value": "min_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(h_frags, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, n_seq, 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines/naive_lstm.py": {
        "torch": {
            "Embedding_29": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_char",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_lstm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_lstm_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_cls",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_63": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(padded_seqs)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, len(seqs), 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_64": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(padded_seqs)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, len(seqs), 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "torch_seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(sorted(len_seqs, reverse=True)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_68": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(padded_seqs)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, len(seqs), 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(padded_seqs)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, len(seqs), 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[:, :, 0, :], h[:, :, 1, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_89": {
                "variable": {
                    "value": "min_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(padded_seqs)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(h, torch_seq_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.lstm(h)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(h, batch_first=False)",
                            "Call"
                        ],
                        [
                            "h.view(max_length, len(seqs), 2, self.h_dim)",
                            "Call"
                        ],
                        [
                            "torch.transpose(h, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([h[:, :, 0, :], h[:, :, 1, :]], dim=2)",
                            "Call"
                        ],
                        [
                            "h[lst_now, lst_pos]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_40": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "Embedding_26": {
                "variable": {
                    "value": "self.emb_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "h_frag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lzd_sequences)",
                            "Call"
                        ],
                        [
                            "len(repair_sequences)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([len(_) for _ in lzd_sequences])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "h_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lzd_sequences)",
                            "Call"
                        ],
                        [
                            "len(repair_sequences)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "groups.length_dummy_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1, input2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.z_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.r_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "cat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1, input2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.r_gate(cat_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(cat_input * r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_180": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_gate(cat_input).view(-1, self.h_dim, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "column_cat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1.unsqueeze(2), input2.unsqueeze(2), o.unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_185": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "column_cat_input * z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_seq[i_layer]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_seq[i_layer + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input1, input2], dim=1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input1, input2], dim=1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}