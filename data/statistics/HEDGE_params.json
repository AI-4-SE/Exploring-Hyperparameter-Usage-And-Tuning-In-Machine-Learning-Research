{
    "bert/utils_glue.py": {
        "sklearn": {}
    },
    "bert/hedge_bert.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "mask_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "mask_type",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "mask_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "mask_type",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_22": {
                "input": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_23": {
                "input": {
                    "value": "mask_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "input": {
                    "value": "mask_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "input": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "input": {
                    "value": "mask_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "input": {
                    "value": "mask_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(input.shape, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "bert/hedge_main_bert_imdb.py": {
        "torch": {
            "SequentialSampler_48": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_183": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(type, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args.max_seq_length, tokenizer, output_mode, cls_token_at_end=bool(args.model_type in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args.model_type in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args.model_type in ['roberta']), pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(type, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "input": {
                    "value": "batch[0][0, :pad_start]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "input": {
                    "value": "batch[1][0, :pad_start]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "input": {
                    "value": "batch[2][0, :pad_start]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cnn/cnn_model.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "self.word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.embed_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(args.kernel_sizes) * args.kernel_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.text",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.max_pool1d(F.relu(getattr(self, 'conv_' + str(filter_size))(conv_in)), seq_len - filter_size + 1).view(-1, self.args.kernel_num) for filter_size in self.args.kernel_sizes]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(conv_result, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.args.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_20": {
                "variable": {
                    "value": "self.word_emb_multi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.embed_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_30": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.kernel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "args.embed_dim * filter_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "args.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "conv_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_in, conv_in_multi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_47": {
                "input": {
                    "value": "F.relu(getattr(self, 'conv_' + str(filter_size))(conv_in))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "seq_len - filter_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "ndarray": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_47": {
                "input": {
                    "value": "getattr(self, 'conv_' + str(filter_size))(conv_in)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cnn/hedge.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_21": {
                "*size": {
                    "value": "self.input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cnn/hedge_main_cnn_imdb.py": {
        "torch": {
            "manual_seed_35": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_93": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_94": {
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_114": {
                "variable": {
                    "value": "batchtempt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.minseqlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_116": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cohesion_score/eva_cohesion_cnn_sst.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_93": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cohesion_score/eval_utils.py": {
        "torch": {}
    },
    "lstm/hedge.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_22": {
                "*size": {
                    "value": "self.input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lstm/hedge_main_lstm_imdb.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_89": {
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_110": {
                "variable": {
                    "value": "batchtempt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.minseqlen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lstm/rnn_model.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.embed_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_24": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.hidden2label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.class_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(lstm_out, lstm_out.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_44": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(lstm_out, lstm_out.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(lstm_out, lstm_out.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool1d_47": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(lstm_out, lstm_out.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "lstm_out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_47": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_48": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(lstm_out, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(lstm_out, lstm_out.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.tanh(lstm_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_18": {
                "ndarray": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectors",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}