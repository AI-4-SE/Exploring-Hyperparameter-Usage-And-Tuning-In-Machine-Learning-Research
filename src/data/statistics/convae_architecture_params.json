{
    "evaluate.py": {
        "torch": {
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/data_loader.py": {
        "torch": {
            "tensor_65": {
                "data": {
                    "value": "[seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "ps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/net.py": {
        "torch": {
            "CrossEntropyLoss_110": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_105": {
                "variable": {
                    "value": "logsoft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.cnn_l1(embeds))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(out, kernel_size=self.kernel_size, stride=1, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[2] * out.shape[1])",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.linear3(out)",
                            "Call"
                        ],
                        [
                            "F.softplus(out)",
                            "Call"
                        ],
                        [
                            "self.linear4(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.vocab_size, x.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_106": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsoft",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_27": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_48": {
                "variable": {
                    "value": "self.cnn_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ch_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ch_l1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ch_l1 * self.features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size * max_seq_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_60": {
                "variable": {
                    "value": "self.sigm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_61": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cnn_l1(embeds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool1d_73": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.cnn_l1(embeds))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(out, kernel_size=self.kernel_size, stride=1, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[2] * out.shape[1])",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.linear3(out)",
                            "Call"
                        ],
                        [
                            "F.softplus(out)",
                            "Call"
                        ],
                        [
                            "self.linear4(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.vocab_size, x.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_85": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.cnn_l1(embeds))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(out, kernel_size=self.kernel_size, stride=1, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[2] * out.shape[1])",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.linear3(out)",
                            "Call"
                        ],
                        [
                            "F.softplus(out)",
                            "Call"
                        ],
                        [
                            "self.linear4(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.vocab_size, x.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.cnn_l1(embeds))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(out, kernel_size=self.kernel_size, stride=1, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[2] * out.shape[1])",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.linear3(out)",
                            "Call"
                        ],
                        [
                            "F.softplus(out)",
                            "Call"
                        ],
                        [
                            "self.linear4(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.vocab_size, x.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_95": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.cnn_l1(embeds))",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(out, kernel_size=self.kernel_size, stride=1, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "out.view(-1, out.shape[2] * out.shape[1])",
                            "Call"
                        ],
                        [
                            "self.linear1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "self.linear3(out)",
                            "Call"
                        ],
                        [
                            "F.softplus(out)",
                            "Call"
                        ],
                        [
                            "self.linear4(out)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.vocab_size, x.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_107": {
                "input": {
                    "value": "(pred == target).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "patient_representations.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "data_generator_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_tr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EHRdata(os.path.join(indir), ut.dt_files['ehr-file'], sampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "ut.model_param['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ehr_collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "ut.model_param['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "ut.model_param['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "data_generator_ts",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_ts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EHRdata(os.path.join(indir), ut.dt_files['ehr-file-test'], sampling)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "ut.model_param['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ehr_collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_93": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Word2Vec.load(emb_filename)",
                            "Call"
                        ],
                        [
                            "net.ehrEncoding(vocab_size=vocab_size, max_seq_len=ut.len_padded, emb_size=ut.model_param['embedding_size'], kernel_size=ut.model_param['kernel_size'], pre_embs=embs, vocab=vocab)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "save_23": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(outdir, 'best_model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}