{
    "stargan/logger.py": {
        "tensorflow": {
            "FileWriter_9": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Summary_13": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/dataloaders.py": {
        "torch": {
            "Stream_18": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cifar_10_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=root, train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), CIFAR10DataLoaders.normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=root, train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), CIFAR10DataLoaders.normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_93": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[cifar_10_train, random_train]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ConcatDataset([cifar_10_train, random_train])",
                            "Call"
                        ],
                        [
                            "data.ConcatDataset([cifar_100_train, random_train])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=root, train=False, transform=transforms.Compose([transforms.ToTensor(), CIFAR10DataLoaders.normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cifar_100_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR100(root=root, train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), CIFAR100DataLoaders.normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=root, train=True, transform=transforms.Compose([transforms.RandomHorizontalFlip(), transforms.RandomCrop(32, 4), transforms.ToTensor(), CIFAR100DataLoaders.normalize]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_140": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[cifar_100_train, random_train]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.ConcatDataset([cifar_10_train, random_train])",
                            "Call"
                        ],
                        [
                            "data.ConcatDataset([cifar_100_train, random_train])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=root, train=False, transform=transforms.Compose([transforms.ToTensor(), CIFAR100DataLoaders.normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_stream_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/distillation_loss.py": {
        "torch": {
            "CrossEntropyLoss_19": {
                "variable": {
                    "value": "self._hard_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_21": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_22": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_26": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_32": {
                "variable": {
                    "value": "hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.ne(hard_targets).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_55": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.eq(hard_targets).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "_soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(soft_targets / self.temp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar10/main.py": {
        "torch": {
            "MSELoss_67": {
                "variable": {
                    "value": "ir_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "student.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lit_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "MultiStepLR_76": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(student.parameters(), lr=lit_lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(student.parameters(), lr=finetune_starting_lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lit_schedule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[100]",
                            "List"
                        ]
                    ]
                }
            },
            "SGD_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "student.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "finetune_starting_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "MultiStepLR_96": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(student.parameters(), lr=lit_lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(student.parameters(), lr=finetune_starting_lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "finetune_schedule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[55]",
                            "List"
                        ]
                    ]
                }
            },
            "load_209": {
                "variable": {
                    "value": "teacher_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "teacher_pth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "student.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "student.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_125": {
                "mode": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_172": {
                "mode": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(residual)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_planes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ip * 4 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_planes",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ip * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_planes",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_132": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_134": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_182": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(residual)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_44": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "stargan/data_loader.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CelebA(image_dir, attr_path, selected_attrs, transform, mode)",
                            "Call"
                        ],
                        [
                            "ImageFolder(image_dir, transform)",
                            "Call"
                        ],
                        [
                            "self.train_dataset if self.mode == 'train' else self.test_dataset",
                            "IfExp"
                        ],
                        [
                            "'CelebA'",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "stargan/fid_score.py": {
        "torch": {
            "from_numpy_102": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_112": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "stargan/inception.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.upsample(x, size=(299, 299), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_100": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "stargan/inception_score.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_38": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(batch)",
                            "Call"
                        ],
                        [
                            "batch.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "stargan/main.py": {
        "torch": {}
    },
    "stargan/model.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.downsampling_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.bottleneck_section1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.upsampling_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(image_size / np.power(2, repeat_num))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_15": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_18": {
                "num_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "3 + c_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_30": {
                "num_features": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_37": {
                "num_features": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_52": {
                "num_features": {
                    "value": "curr_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ],
                        [
                            "curr_dim // 2",
                            "BinOp"
                        ],
                        [
                            "conv_dim",
                            "variable"
                        ],
                        [
                            "curr_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "stargan/solver.py": {
        "torch": {
            "MSELoss_57": {
                "variable": {
                    "value": "self.lit_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "self.g_section_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.bottleneck_section1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.section_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_159": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_168": {
                "variable": {
                    "value": "dydx_l2norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(dydx ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_502": {
                "variable": {
                    "value": "all_fake_img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_fake_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorDataset_503": {
                "variable": {
                    "value": "img_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_fake_img_tensor.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_169": {
                "input": {
                    "value": "(dydx_l2norm - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_251": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "label_org.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_344": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "label_org.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_372": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_375": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_real.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "G_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, 'G_teacher.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-G{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-G{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_128": {
                "f": {
                    "value": "D_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, 'D_teacher.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-D{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-D{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_129": {
                "f": {
                    "value": "G_student_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, 'student-G{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "grad_160": {
                "outputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(y.size()).cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "dydx ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_406": {
                "variable": {
                    "value": "g_loss_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_real - x_reconst)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_496": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_fake_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_fixed]",
                            "List"
                        ],
                        [
                            "[x_real]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_514": {
                "tensors": {
                    "value": "all_real_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_207": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_209": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_293": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "G_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, 'G_teacher.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-G{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-G{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_294": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "D_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, 'D_teacher.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-D{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-D{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_366": {
                "input": {
                    "value": "out_src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_fake_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_fixed]",
                            "List"
                        ],
                        [
                            "[x_real]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_451": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "G_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, 'G_teacher.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-G{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-G{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_452": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "D_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_save_dir, 'D_teacher.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-D{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_save_dir, 'student-D{}.ckpt'.format(self.g_repeat_num))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_401": {
                "input": {
                    "value": "out_src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_406": {
                "input": {
                    "value": "x_real - x_reconst",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "c_org.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "vdcnn/distillation_loss.py": {
        "torch": {
            "CrossEntropyLoss_19": {
                "variable": {
                    "value": "self._hard_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_21": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_22": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_26": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_32": {
                "variable": {
                    "value": "hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.ne(hard_targets).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_55": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.eq(hard_targets).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "_soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(soft_targets / self.temp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vdcnn/fp16.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "param.data.new().resize_(*param.data.size())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "vdcnn/lit.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_156": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_452": {
                "variable": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, self.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_464": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_233": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(self.trainable_model.parameters(), self.sequence['full_model']['lr'], momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(param_copy, self.sequence['full_model']['lr'], momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.sequence['full_model']['milestones']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_215": {
                "variable": {
                    "value": "self.trainable_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "fp16.FP16(self.trainable_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[param.clone().type(torch.cuda.FloatTensor).detach() for param in self.trainable_model.parameters()]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.sequence['full_model']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_224": {
                "variable": {
                    "value": "self.trainable_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.trainable_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_225": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainable_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.sequence['full_model']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "self.trainable_model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, str('checkpoint_' + self.model_name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "self.trainable_model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, self.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "self.trainable_model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, str('checkpoint_' + self.model_name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_172": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.sequence['lit']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_179": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(self.trainable_model.parameters(), self.sequence['full_model']['lr'], momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(param_copy, self.sequence['full_model']['lr'], momentum=self.momentum, weight_decay=self.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.sequence['lit']['milestones']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "lit_start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "vdcnn/model_parallel.py": {
        "torch": {
            "is_grad_enabled_36": {
                "variable": {
                    "value": "grad_enabled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_39": {
                "mode": {
                    "value": "grad_enabled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_100": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_107": {
                "variable": {
                    "value": "self.sections[i].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_43": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_a_var(input).get_device()",
                            "Call"
                        ],
                        [
                            "min(device_load, key=device_load.get)",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(device))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vdcnn/sentiment_datasets.py": {
        "torch": {
            "Stream_14": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vdcnn/trainlit.py": {
        "torch": {
            "DataLoader_150": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DATASETS[dataset](root=root, train=True, transform=dset_transforms)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_156": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DATASETS[dataset](root=root, train=False, transform=dset_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_118": {
                "f": {
                    "value": "training_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_122": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, str('checkpoint_' + self.model_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_132": {
                "f": {
                    "value": "base_model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "base_model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vdcnn/vdcnn.py": {
        "torch": {
            "Conv1d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_43": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_45": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ],
                        [
                            "self.sections[i](H)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_69": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ],
                        [
                            "self.sections[i](H)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_85": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_87": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_89": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_91": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ],
                        [
                            "self.sections[i](H)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_114": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ],
                        [
                            "self.sections[i](H)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_128": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_130": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_132": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ],
                        [
                            "self.sections[i](H)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_155": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ],
                        [
                            "self.sections[i](H)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_170": {
                "variable": {
                    "value": "self.character_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "69",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_grad_by_freq": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_174": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.sections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sections",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_filters * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_227": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ],
                        [
                            "self.sections[i](H)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_229": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "H + self._shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "self.bn1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.conv2(H)",
                            "Call"
                        ],
                        [
                            "self.bn2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.character_embedding(inputs)",
                            "Call"
                        ],
                        [
                            "H.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(H)",
                            "Call"
                        ],
                        [
                            "self.sections(H)",
                            "Call"
                        ],
                        [
                            "self.kmax(H)",
                            "Call"
                        ],
                        [
                            "H.view(H.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc2(H)",
                            "Call"
                        ],
                        [
                            "F.relu(H)",
                            "Call"
                        ],
                        [
                            "self.fc3(H)",
                            "Call"
                        ],
                        [
                            "self.sections[i](H)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool1d_83": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "sections[section_{}.format(section_index)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "section",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_filters, out_filters, 1, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_filters, out_filters, 1, stride=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_filters, out_filters, 1, stride=1, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self._shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_52": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_96": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_137": {
                "in_channels": {
                    "value": "in_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_filters or filters[0]",
                            "BoolOp"
                        ],
                        [
                            "out_filters * Block.expansion",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}