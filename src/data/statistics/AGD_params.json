{
    "AGD_SR/furnace/utils/darts_utils.py": {
        "torch": {
            "randn_191": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_63": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_70": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_171": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Name"
                        ],
                        [
                            "beta",
                            "Name"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/furnace/utils/init_func.py": {
        "torch": {}
    },
    "AGD_SR/furnace/utils/pyt_utils.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/RRDBNet_arch.py": {
        "torch": {
            "Sequential_12": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "gc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf + gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf + 2 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf + 3 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "gc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf + 4 * gc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_24": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.trunk_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.upconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.upconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.HRconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_68": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_75": {
                "input": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_first(x)",
                            "Call"
                        ],
                        [
                            "fea + trunk",
                            "BinOp"
                        ],
                        [
                            "self.lrelu(self.upconv1(F.interpolate(fea, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.upconv2(F.interpolate(fea, scale_factor=2, mode='nearest')))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "input": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_first(x)",
                            "Call"
                        ],
                        [
                            "fea + trunk",
                            "BinOp"
                        ],
                        [
                            "self.lrelu(self.upconv1(F.interpolate(fea, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.upconv2(F.interpolate(fea, scale_factor=2, mode='nearest')))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_85": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "510",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "350",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/architect.py": {
        "torch": {
            "cat_15": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "KLDivLoss_27": {
                "variable": {
                    "value": "self._kl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.module._arch_params.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.arch_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/datasets.py": {
        "torch": {}
    },
    "AGD_SR/search/eval.py": {
        "torch": {
            "load_58": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.load_path, 'arch.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_68": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NAS_GAN_Eval(state['alpha'], state['beta'], state['ratio'], num_cell=config.num_cell, op_per_cell=config.op_per_cell, width_mult_list=config.width_mult_list, quantize=config.quantize)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, mode='val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_71": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_64": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "510",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "350",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/model_eval.py": {
        "torch": {
            "rand_34": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_41": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "op_idx_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_140": {
                "variable": {
                    "value": "op_idx_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "ratio_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_149": {
                "variable": {
                    "value": "ratio_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_165": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_167": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_36": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_143": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_180": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "op(out)",
                            "Call"
                        ],
                        [
                            "cell(out)",
                            "Call"
                        ],
                        [
                            "self.trunk_conv(out)",
                            "Call"
                        ],
                        [
                            "out + orig",
                            "BinOp"
                        ],
                        [
                            "self.lrelu(self.upconv1(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.upconv2(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.conv_last(self.lrelu(self.HRconv(out)))",
                            "Call"
                        ],
                        [
                            "(self.tanh(out) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "op(out)",
                            "Call"
                        ],
                        [
                            "cell(out)",
                            "Call"
                        ],
                        [
                            "self.trunk_conv(out)",
                            "Call"
                        ],
                        [
                            "out + orig",
                            "BinOp"
                        ],
                        [
                            "self.lrelu(self.upconv1(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.upconv2(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.conv_last(self.lrelu(self.HRconv(out)))",
                            "Call"
                        ],
                        [
                            "(self.tanh(out) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/model_infer.py": {
        "torch": {
            "rand_34": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_41": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_146": {
                "variable": {
                    "value": "op_idx_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_146": {
                "variable": {
                    "value": "op_idx_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "ratio_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_155": {
                "variable": {
                    "value": "ratio_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_157": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "VGGFeature(before_act=before_act)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_163": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_173": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_175": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_274": {
                "variable": {
                    "value": "diff_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat[:, :, :, 1:] - y_hat[:, :, :, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_275": {
                "variable": {
                    "value": "diff_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat[:, :, 1:, :] - y_hat[:, :, :-1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_36": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_274": {
                "input": {
                    "value": "y_hat[:, :, :, 1:] - y_hat[:, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_275": {
                "input": {
                    "value": "y_hat[:, :, 1:, :] - y_hat[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_149": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_190": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "op(out)",
                            "Call"
                        ],
                        [
                            "cell(out)",
                            "Call"
                        ],
                        [
                            "self.trunk_conv(out)",
                            "Call"
                        ],
                        [
                            "out + orig",
                            "BinOp"
                        ],
                        [
                            "self.lrelu(self.upconv1(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.upconv2(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.conv_last(self.lrelu(self.HRconv(out)))",
                            "Call"
                        ],
                        [
                            "(self.tanh(out) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_191": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "op(out)",
                            "Call"
                        ],
                        [
                            "cell(out)",
                            "Call"
                        ],
                        [
                            "self.trunk_conv(out)",
                            "Call"
                        ],
                        [
                            "out + orig",
                            "BinOp"
                        ],
                        [
                            "self.lrelu(self.upconv1(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.upconv2(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.conv_last(self.lrelu(self.HRconv(out)))",
                            "Call"
                        ],
                        [
                            "(self.tanh(out) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/model_search.py": {
        "torch": {
            "rand_19": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_42": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_26": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_238": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_296": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "VGGFeature(before_act=before_act)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_305": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_316": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_318": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_375": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'alpha')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_376": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'beta')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_493": {
                "variable": {
                    "value": "diff_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat[:, :, :, 1:] - y_hat[:, :, :, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_494": {
                "variable": {
                    "value": "diff_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat[:, :, 1:, :] - y_hat[:, :, :-1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_404": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'alpha')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_409": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'beta')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_493": {
                "input": {
                    "value": "y_hat[:, :, :, 1:] - y_hat[:, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_494": {
                "input": {
                    "value": "y_hat[:, :, 1:, :] - y_hat[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_540": {
                "data": {
                    "value": "Variable(0.001 * torch.ones(self.num_cell, self.op_per_cell, num_ops).cuda(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_541": {
                "data": {
                    "value": "Variable(0.001 * torch.ones(self.num_cell, self.op_per_cell, 2).cuda(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_549": {
                "data": {
                    "value": "Variable(0.001 * torch.ones(self.num_cell, self.op_per_cell - 1, num_widths).cuda(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_392": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "op(out, alpha[i], beta[i], [1, ratio[i]])",
                            "Call"
                        ],
                        [
                            "op(out, alpha[i], beta[i], [ratio[i - 1], 1])",
                            "Call"
                        ],
                        [
                            "op(out, alpha[i], beta[i], [ratio[i - 1], ratio[i]])",
                            "Call"
                        ],
                        [
                            "cell(out, alpha[i], beta[i], ratio[i])",
                            "Call"
                        ],
                        [
                            "self.trunk_conv(out)",
                            "Call"
                        ],
                        [
                            "out + orig",
                            "BinOp"
                        ],
                        [
                            "self.lrelu(self.upconv1(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.upconv2(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.conv_last(self.lrelu(self.HRconv(out)))",
                            "Call"
                        ],
                        [
                            "(self.tanh(out) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_393": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "op(out, alpha[i], beta[i], [1, ratio[i]])",
                            "Call"
                        ],
                        [
                            "op(out, alpha[i], beta[i], [ratio[i - 1], 1])",
                            "Call"
                        ],
                        [
                            "op(out, alpha[i], beta[i], [ratio[i - 1], ratio[i]])",
                            "Call"
                        ],
                        [
                            "cell(out, alpha[i], beta[i], ratio[i])",
                            "Call"
                        ],
                        [
                            "self.trunk_conv(out)",
                            "Call"
                        ],
                        [
                            "out + orig",
                            "BinOp"
                        ],
                        [
                            "self.lrelu(self.upconv1(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.upconv2(F.interpolate(out, scale_factor=2, mode='nearest')))",
                            "Call"
                        ],
                        [
                            "self.conv_last(self.lrelu(self.HRconv(out)))",
                            "Call"
                        ],
                        [
                            "(self.tanh(out) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_562": {
                "*size": {
                    "value": "self.num_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.op_per_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ],
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_563": {
                "*size": {
                    "value": "self.num_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.op_per_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_564": {
                "*size": {
                    "value": "self.num_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.op_per_cell - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_widths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._width_mult_list)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(self._width_mult_list)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_like_406": {
                "input": {
                    "value": "getattr(self, 'alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_411": {
                "input": {
                    "value": "getattr(self, 'beta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_540": {
                "*size": {
                    "value": "self.num_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.op_per_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ],
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_541": {
                "*size": {
                    "value": "self.num_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.op_per_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_549": {
                "*size": {
                    "value": "self.num_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.op_per_cell - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_widths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._width_mult_list)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(self._width_mult_list)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "log_softmax_337": {
                "input": {
                    "value": "ratio[cell_id][op_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/operations.py": {
        "torch": {
            "ReLU_502": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_603": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_844": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_308": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_738": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_744": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_215": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_326": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_421": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_520": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_641": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_758": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_891": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/operations_bk.py": {
        "torch": {
            "LeakyReLU_502": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_603": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_844": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_197": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_202": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_308": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_313": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_738": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_744": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_215": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_326": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_421": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_520": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_641": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_758": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_873": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/quantize.py": {
        "torch": {
            "conv2d_116": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_118": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias.detach() if bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_125": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_126": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias.detach() if bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_379": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_213": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_217": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_250": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_254": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_283": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_303": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_304": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "*shape_measure",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "*shape_measure",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/slimmable_ops.py": {
        "torch": {
            "ModuleList_142": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(i) for i in [make_divisible(self.num_features_max * width_mult) for width_mult in width_mult_list]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(weight, qparams=weight_qparams)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight[:self.out_channels, :self.in_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight[:self.in_channels, :self.out_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_126": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(weight, qparams=weight_qparams)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_130": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight[:self.out_channels, :self.in_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight[:self.in_channels, :self.out_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/train.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.load_path, 'arch.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_87": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NAS_GAN_Infer(state['alpha'], state['beta'], state['ratio'], num_cell=config.num_cell, op_per_cell=config.op_per_cell, width_mult_list=config.width_mult_list, loss_weight=config.loss_weight, loss_func=config.loss_func, before_act=config.before_act, quantize=config.quantize)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_99": {
                "variable": {
                    "value": "teacher_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RRDBNet(3, 3, 64, 23, gc=32)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "train_loader_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, unaligned=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, mode='val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.module.conv_last.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "config.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_135": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "LambdaLR(config.nepochs, 0, config.decay_epoch).step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_98": {
                "f": {
                    "value": "config.generator_A2B",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.module.conv_last.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_137": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "config.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__215": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_139": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_83": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "510",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "350",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/train_search.py": {
        "torch": {
            "DataParallel_82": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Network(config.num_cell, config.op_per_cell, slimmable=config.slimmable, width_mult_list=config.width_mult_list, loss_weight=config.loss_weight, prun_modes=config.prun_modes, loss_func=config.loss_func, before_act=config.before_act, quantize=config.quantize)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_88": {
                "variable": {
                    "value": "teacher_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RRDBNet(3, 3, 64, 23, gc=32)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "train_loader_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, unaligned=True, portion=config.train_portion)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "train_loader_arch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, unaligned=True, portion=config.train_portion - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, mode='val')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "partial",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrain + '/weights.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.module.conv_last.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "config.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_137": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "LambdaLR(config.nepochs, 0, config.decay_epoch).step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_87": {
                "f": {
                    "value": "config.generator_A2B",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.module.conv_last.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_139": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "config.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(config.save, 'arch.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__289": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_141": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_229": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(config.save, 'arch_%d.pt' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/util_gan/cyclegan.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_97": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_10": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_12": {
                "num_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_14": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_16": {
                "num_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_28": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_30": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_60": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_78": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_79": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_82": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_86": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_40": {
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_53": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_54": {
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/util_gan/fid_score.py": {
        "torch": {
            "from_numpy_119": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_128": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/util_gan/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/util_gan/vgg.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.to_relu_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_10": {
                "variable": {
                    "value": "self.to_relu_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.to_relu_3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.to_relu_4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/util_gan/vgg_feature.py": {
        "torch": {
            "Tensor_11": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_12": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.vgg.features.children())[:feature_layer + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.vgg.features.children())[:feature_layer]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_SR/search/util_gan/vgg_feature_bk.py": {
        "torch": {}
    },
    "AGD_SR/search/util_gan/vgg_feature_bk2.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.loss_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.vgg.features)[:31]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/furnace/utils/darts_utils.py": {
        "torch": {
            "randn_191": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_63": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_70": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_171": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Name"
                        ],
                        [
                            "beta",
                            "Name"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/furnace/utils/init_func.py": {
        "torch": {}
    },
    "AGD_ST/furnace/utils/pyt_utils.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/architect.py": {
        "torch": {
            "cat_15": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "KLDivLoss_27": {
                "variable": {
                    "value": "self._kl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.module._arch_params.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.arch_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/datasets.py": {
        "torch": {}
    },
    "AGD_ST/search/eval.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.load_path, 'arch.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_70": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NAS_GAN_Eval(state['alpha'], state['beta'], state['ratio'], state['beta_sh'], state['ratio_sh'], layers=config.layers, width_mult_list=config.width_mult_list, width_mult_list_sh=config.width_mult_list_sh, quantize=config.quantize)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/eval_teacher.py": {
        "torch": {
            "DataParallel_66": {
                "variable": {
                    "value": "teacher_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "teacher_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Generator(3, 3)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(teacher_model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "config.generator_A2B",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/model_eval.py": {
        "torch": {
            "rand_33": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_40": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "op_idx_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "op_idx_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "ratio_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_130": {
                "variable": {
                    "value": "ratio_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "ratio_list_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "ratio_list_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_146": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_167": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_35": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_121": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "input": {
                    "value": "beta_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_122": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/model_infer.py": {
        "torch": {
            "rand_33": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_40": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "op_idx_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_123": {
                "variable": {
                    "value": "op_idx_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "ratio_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_135": {
                "variable": {
                    "value": "ratio_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "ratio_list_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_136": {
                "variable": {
                    "value": "ratio_list_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_138": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "VGGFeature()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_153": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_161": {
                "variable": {
                    "value": "self.header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_174": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_238": {
                "variable": {
                    "value": "diff_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat[:, :, :, 1:] - y_hat[:, :, :, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_239": {
                "variable": {
                    "value": "diff_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat[:, :, 1:, :] - y_hat[:, :, :-1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_35": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_238": {
                "input": {
                    "value": "y_hat[:, :, :, 1:] - y_hat[:, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_239": {
                "input": {
                    "value": "y_hat[:, :, 1:, :] - y_hat[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_126": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "input": {
                    "value": "beta_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_127": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "L1Loss_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_232": {
                "input": {
                    "value": "y_hat_gram[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "x_gram[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "L1Loss_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/model_search.py": {
        "torch": {
            "rand_18": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_25": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_251": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "VGGFeature()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_257": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_276": {
                "variable": {
                    "value": "self.header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_291": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_351": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'alpha')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_352": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'beta')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_354": {
                "variable": {
                    "value": "beta_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'beta_sh')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_470": {
                "variable": {
                    "value": "diff_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat[:, :, :, 1:] - y_hat[:, :, :, :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_471": {
                "variable": {
                    "value": "diff_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(y_hat[:, :, 1:, :] - y_hat[:, :, :-1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_20": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_393": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'alpha')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_398": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'beta')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_399": {
                "variable": {
                    "value": "beta_sh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'beta_sh')",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_470": {
                "input": {
                    "value": "y_hat[:, :, :, 1:] - y_hat[:, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_471": {
                "input": {
                    "value": "y_hat[:, :, 1:, :] - y_hat[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_519": {
                "data": {
                    "value": "Variable(0.001 * torch.ones(self._layers, num_ops).cuda(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_520": {
                "data": {
                    "value": "Variable(0.001 * torch.ones(self._layers, 2).cuda(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_530": {
                "data": {
                    "value": "Variable(0.001 * torch.ones(self._layers, num_widths).cuda(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_532": {
                "data": {
                    "value": "Variable(0.001 * torch.ones(self.len_beta_sh, 2).cuda(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_533": {
                "data": {
                    "value": "Variable(0.001 * torch.ones(self.len_ratio_sh, num_widths_sh).cuda(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_464": {
                "input": {
                    "value": "y_hat_gram[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "x_gram[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "L1Loss_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_548": {
                "*size": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ],
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_549": {
                "*size": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_550": {
                "*size": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_widths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._width_mult_list)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(self._width_mult_list)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_552": {
                "*size": {
                    "value": "self.len_beta_sh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_553": {
                "*size": {
                    "value": "self.len_ratio_sh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_widths_sh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._width_mult_list_sh)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(self._width_mult_list_sh)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_like_395": {
                "input": {
                    "value": "getattr(self, 'alpha')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_401": {
                "input": {
                    "value": "getattr(self, 'beta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_402": {
                "input": {
                    "value": "getattr(self, 'beta_sh')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_307": {
                "input": {
                    "value": "ratio[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_312": {
                "input": {
                    "value": "ratio_sh[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_519": {
                "*size": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ],
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_520": {
                "*size": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_530": {
                "*size": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_widths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._width_mult_list)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(self._width_mult_list)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_532": {
                "*size": {
                    "value": "self.len_beta_sh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_533": {
                "*size": {
                    "value": "self.len_ratio_sh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_widths_sh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._width_mult_list_sh)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(self._width_mult_list_sh)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "AGD_ST/search/operations.py": {
        "torch": {
            "ReLU_502": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_602": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_838": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_199": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_204": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_309": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_314": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_733": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_739": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_217": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_327": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_421": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_520": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_640": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_753": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_885": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/operations_bk.py": {
        "torch": {
            "ReLU_499": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_599": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_835": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_311": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_730": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_736": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_214": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_324": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_418": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_517": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_637": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_750": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_864": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/quantize.py": {
        "torch": {
            "conv2d_116": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_118": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias.detach() if bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_125": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_126": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias.detach() if bias is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_379": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_213": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_217": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_250": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_254": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_283": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(self.weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(self.bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_303": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_304": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "*shape_measure",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "*shape_measure",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/slimmable_ops.py": {
        "torch": {
            "ModuleList_142": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.InstanceNorm2d(i, affine=False) for i in [make_divisible(self.num_features_max * width_mult) for width_mult in width_mult_list]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(weight, qparams=weight_qparams)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight[:self.out_channels, :self.in_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight[:self.in_channels, :self.out_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_126": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qinput",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ],
                        [
                            "self.quantize_input(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "qweight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(weight, qparams=weight_qparams)",
                            "Call"
                        ],
                        [
                            "Quantize(weight, qparams=weight_qparams)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "qbias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quantize(bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Quantize(bias, num_bits=self.num_bits_weight + self.num_bits, flatten_dims=(0, -1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_130": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight[:self.out_channels, :self.in_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight[:self.in_channels, :self.out_channels, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias[:self.out_channels]",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_143": {
                "num_features": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/train.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.load_path, 'arch.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_81": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NAS_GAN_Infer(state['alpha'], state['beta'], state['ratio'], state['beta_sh'], state['ratio_sh'], layers=config.layers, width_mult_list=config.width_mult_list, width_mult_list_sh=config.width_mult_list_sh, loss_weight=config.loss_weight, quantize=config.quantize)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "train_loader_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "PairedImageDataset(config.dataset_path, config.target_path, transforms_=transforms_)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.module.header.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "config.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_123": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "LambdaLR(config.nepochs, 0, config.decay_epoch).step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.module.header.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_125": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "config.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__219": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_127": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/train_search.py": {
        "torch": {
            "DataParallel_73": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Network(config.layers, slimmable=config.slimmable, width_mult_list=config.width_mult_list, width_mult_list_sh=config.width_mult_list_sh, loss_weight=config.loss_weight, prun_modes=config.prun_modes, quantize=config.quantize)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "train_loader_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "PairedImageDataset(config.dataset_path, config.target_path, transforms_=transforms_, portion=config.train_portion)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "train_loader_arch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "PairedImageDataset(config.dataset_path, config.target_path, transforms_=transforms_, portion=config.train_portion - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageDataset(config.dataset_path, transforms_=transforms_, mode='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "partial",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrain + '/weights.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.module.header.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.lr",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "config.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_122": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "LambdaLR(config.nepochs, 0, config.decay_epoch).step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.module.header.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.lr",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_124": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "config.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(config.save, 'arch.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__296": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_126": {
                "variable": {
                    "value": "lr_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=base_lr, betas=config.betas)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(parameters, lr=base_lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "config.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_234": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(config.save, 'arch_%d_%f.pt' % (epoch, flops))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/util_gan/cyclegan.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_97": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_10": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_12": {
                "num_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_14": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_16": {
                "num_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_28": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_30": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_60": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_78": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_79": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_82": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_86": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_40": {
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_53": {
                "in_channels": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "out_features",
                            "Name"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_54": {
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features * 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ],
                        [
                            "in_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/util_gan/fid_score.py": {
        "torch": {
            "from_numpy_119": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_128": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/util_gan/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/util_gan/vgg.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.to_relu_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_10": {
                "variable": {
                    "value": "self.to_relu_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.to_relu_3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.to_relu_4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "AGD_ST/search/util_gan/vgg_feature.py": {
        "torch": {}
    }
}