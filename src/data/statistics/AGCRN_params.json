{
    "lib/TrainInits.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_29": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_36": {
                "optimizer": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "opt.lr_decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opt.lr_scheduler_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_19": {
                "device": {
                    "value": "int(opt.device[5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "memory_allocated_49": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "memory_cached_50": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dataloader.py": {
        "torch": {
            "TensorDataset_78": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaler.transform(data)",
                            "Call"
                        ],
                        [
                            "scaler.transform(data)",
                            "Call"
                        ],
                        [
                            "scaler.transform(data)",
                            "Call"
                        ],
                        [
                            "scaler.transform(data)",
                            "Call"
                        ],
                        [
                            "scaler.transform(data)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X, Y)",
                            "Call"
                        ],
                        [
                            "load_st_dataset(args.dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/metrics.py": {
        "torch": {
            "gt_76": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - true",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_219": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_220": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gt_13": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_14": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_15": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_16": {
                "input": {
                    "value": "torch.abs(true - pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gt_20": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_21": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_22": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_23": {
                "input": {
                    "value": "(pred - true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_27": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_28": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_29": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_30": {
                "input": {
                    "value": "torch.mean((pred - true) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gt_34": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_35": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_36": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_66": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_67": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_68": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_69": {
                "input": {
                    "value": "torch.abs(torch.div(true - pred, true))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gt_73": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_74": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_75": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_81": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_82": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_83": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_89": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_90": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_91": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_92": {
                "input": {
                    "value": "torch.sum(torch.abs(true - pred))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sum(true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gt_96": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "masked_select_97": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_98": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "torch.gt(true, mask_value)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ],
                        [
                            "np.where(true > mask_value, True, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_99": {
                "input": {
                    "value": "torch.abs(true - pred) / (torch.abs(true) + torch.abs(pred))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_16": {
                "input": {
                    "value": "true - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_30": {
                "input": {
                    "value": "(pred - true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_37": {
                "input": {
                    "value": "torch.sum((pred - true.mean()) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_69": {
                "input": {
                    "value": "torch.div(true - pred, true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_37": {
                "input": {
                    "value": "(pred - true.mean()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_69": {
                "input": {
                    "value": "true - pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([2, 1, 4, 5])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(true, mask)",
                            "Call"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true[mask]",
                            "Subscript"
                        ],
                        [
                            "true.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(true.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "true.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_92": {
                "input": {
                    "value": "true - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_99": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 2, 3, 4])",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(1, 2).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "torch.masked_select(pred, mask)",
                            "Call"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred[mask]",
                            "Subscript"
                        ],
                        [
                            "pred.unsqueeze(dim=1).unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(pred.transpose(0, 2, 1), axis=1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1, 2, 3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/normalization.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "self.min_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.min_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/AGCN.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.weights_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(embed_dim, cheb_k, dim_in, dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_10": {
                "variable": {
                    "value": "self.bias_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(embed_dim, dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_15": {
                "variable": {
                    "value": "supports",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(torch.mm(node_embeddings, node_embeddings.transpose(0, 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_20": {
                "variable": {
                    "value": "supports",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "support_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.eye(node_num).to(supports.device), supports]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_21": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nd,dkio->nkio",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.bias_pool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_23": {
                "variable": {
                    "value": "x_g",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "knm,bmc->bknc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "supports",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(F.relu(torch.mm(node_embeddings, node_embeddings.transpose(0, 1))), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(support_set, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_15": {
                "input": {
                    "value": "torch.mm(node_embeddings, node_embeddings.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_16": {
                "n": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_25": {
                "equation": {
                    "value": "bnki,nkio->bno",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('knm,bmc->bknc', supports, x)",
                            "Call"
                        ],
                        [
                            "x_g.permute(0, 2, 1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_15": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "node_embeddings.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "input": {
                    "value": "2 * supports",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "support_set[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/AGCRN.py": {
        "torch": {
            "ModuleList_12": {
                "variable": {
                    "value": "self.dcrnn_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.node_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_node, args.embed_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.end_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.horizon * self.output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inner_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_41": {
                "tensors": {
                    "value": "init_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "self.num_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/AGCRNCell.py": {
        "torch": {
            "cat_17": {
                "variable": {
                    "value": "input_and_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_18": {
                "variable": {
                    "value": "z_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate(input_and_state, node_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_19": {
                "variable": {
                    "value": "(z, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.gate(input_and_state, node_embeddings))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "candidate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, z * state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_21": {
                "variable": {
                    "value": "hc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.update(candidate, node_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.node_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/BasicTrainer.py": {
        "torch": {
            "save_160": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'config': self.args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.best_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_166": {
                "variable": {
                    "value": "check_point",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_183": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "scaler.inverse_transform(torch.cat(y_pred, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "copy.deepcopy(self.model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.best_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "scaler.inverse_transform(torch.cat(y_true, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__81": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "scaler.inverse_transform(torch.cat(y_pred, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_51": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(output.cuda(), label)",
                            "Call"
                        ],
                        [
                            "self.loss(output.cuda(), label)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/Run.py": {
        "torch": {
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_132": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params=model.parameters(), lr=args.lr_init, eps=1e-08, weight_decay=0, amsgrad=False)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(i) for i in list(args.lr_decay_step.split(','))]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.lr_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_95": {
                "device": {
                    "value": "int(args.device[5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_119": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_121": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_149": {
                "f": {
                    "value": "'../pre-trained/{}.pth'.format(args.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}