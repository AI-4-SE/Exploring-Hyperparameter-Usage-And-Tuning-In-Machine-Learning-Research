{
    "adda.py": {
        "tensorflow": {
            "concat_81": {
                "variable": {
                    "value": "feat_concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(feat_s, feat_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "lab_concat",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(src_lab, tgt_lab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "d_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pre_lab, labels=lab_concat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pre_tgt, labels=tf.ones_like(pre_tgt, tf.int64)[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "equal_93": {
                "variable": {
                    "value": "correct_label_predicted",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(pred, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "predicted_accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_predicted, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_11": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=0.5, training=phase)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_15": {
                "variable": {
                    "value": "conv1_pooling",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, filters=20, kernel_size=(5, 5), activation=tf.nn.relu, trainable=trainable, name='conv1', kernel_initializer=tf.truncated_normal_initializer(0.1), bias_initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs, filters=20, kernel_size=(5, 5), activation=tf.nn.relu, trainable=trainable, name='conv1', kernel_initializer=tf.truncated_normal_initializer(0.1), bias_initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_17": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_pooling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv1, (2, 2), (2, 2), name='pool1')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, (2, 2), (2, 2), name='pool1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_23": {
                "variable": {
                    "value": "conv2_pooling",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1_pooling, filters=50, kernel_size=(5, 5), activation=tf.nn.relu, trainable=trainable, name='conv2', kernel_initializer=tf.truncated_normal_initializer(0.1), bias_initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1_pooling, filters=50, kernel_size=(5, 5), activation=tf.nn.relu, trainable=trainable, name='conv2', kernel_initializer=tf.truncated_normal_initializer(0.1), bias_initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_25": {
                "variable": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2_pooling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv2, (2, 2), (2, 2), name='pool2')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, (2, 2), (2, 2), name='pool2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "flat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_27": {
                "variable": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.flatten(conv2_pooling, name='flat')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(conv2_pooling, name='flat')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_28": {
                "variable": {
                    "value": "fc2",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(flat, 120, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat, 120, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, 128, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=0.5, training=phase)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_42": {
                "variable": {
                    "value": "conv1_pooling",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, filters=20, kernel_size=(5, 5), activation=tf.nn.relu, trainable=trainable, name='conv1', kernel_initializer=tf.truncated_normal_initializer(0.1), bias_initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs, filters=20, kernel_size=(5, 5), activation=tf.nn.relu, trainable=trainable, name='conv1', kernel_initializer=tf.truncated_normal_initializer(0.1), bias_initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_pooling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv1, (2, 2), (2, 2), name='pool1')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, (2, 2), (2, 2), name='pool1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_50": {
                "variable": {
                    "value": "conv2_pooling",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1_pooling, filters=50, kernel_size=(5, 5), activation=tf.nn.relu, trainable=trainable, name='conv2', kernel_initializer=tf.truncated_normal_initializer(0.1), bias_initializer=tf.constant_initializer(0))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(conv1_pooling, filters=50, kernel_size=(5, 5), activation=tf.nn.relu, trainable=trainable, name='conv2', kernel_initializer=tf.truncated_normal_initializer(0.1), bias_initializer=tf.constant_initializer(0))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_52": {
                "variable": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2_pooling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv2, (2, 2), (2, 2), name='pool2')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, (2, 2), (2, 2), name='pool2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "flat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_54": {
                "variable": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.flatten(conv2_pooling, name='flat')",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(conv2_pooling, name='flat')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_55": {
                "variable": {
                    "value": "fc2",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(flat, 120, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat, 120, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, 128, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=0.5, training=phase)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "fc2",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(flat, 120, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat, 120, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, 128, activation=tf.nn.relu, trainable=trainable, name='fc1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "fc3",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(fc1, 84, activation=tf.nn.tanh, trainable=trainable, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 84, activation=tf.nn.tanh, trainable=trainable, name='fc2')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, 128, activation=tf.nn.relu, trainable=trainable, name='fc2')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=0.5, training=phase)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "phase",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "fc",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(inputs, [28, 28])",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=0.5, training=phase)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "s_encoder",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "t_encoder",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_83": {
                "input": {
                    "value": "feat_s",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "input": {
                    "value": "feat_t",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_86": {
                "logits": {
                    "value": "pre_lab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(feat_concat, reuse=False, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "lab_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat((src_lab, tgt_lab), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_88": {
                "logits": {
                    "value": "pre_tgt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(feat_t, reuse=True, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(pre_tgt, tf.int64)[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_93": {
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "correct_label_predicted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(labels, tf.argmax(pred, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_12": {
                "mean": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_13": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_19": {
                "mean": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_20": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_39": {
                "mean": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_40": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_46": {
                "mean": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_47": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "pre_tgt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(feat_t, reuse=True, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {}
    },
    "train.py": {
        "tensorflow": {
            "placeholder_106": {
                "variable": {
                    "value": "source_images_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.original_size, config.original_size, config.num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "labels_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "target_images_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config.original_size, config.original_size, config.num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "phase",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_121": {
                "variable": {
                    "value": "s_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "s_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "classifier(s_fearture, phase=phase, reuse=None, trainable=True)",
                            "Call"
                        ],
                        [
                            "classifier(s_feature, phase=phase, reuse=False, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, [config.batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "s_loss_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "s_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=s_logits, labels=labels_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_123": {
                "variable": {
                    "value": "pred_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "s_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "classifier(s_fearture, phase=phase, reuse=None, trainable=True)",
                            "Call"
                        ],
                        [
                            "classifier(s_feature, phase=phase, reuse=False, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_125": {
                "variable": {
                    "value": "acc",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(pred_labels, labels_ph), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_128": {
                "variable": {
                    "value": "var_list",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_135": {
                "variable": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_138": {
                "variable": {
                    "value": "all_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_146": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "source_images_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.batch_size, config.original_size, config.original_size, config.num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "labels_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "target_labels_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "target_images_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.batch_size, config.original_size, config.original_size, config.num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_222": {
                "variable": {
                    "value": "phase",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "variable": {
                    "value": "t_acc",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(t_logits, 1), target_labels_ph), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_238": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_241": {
                "variable": {
                    "value": "var_dis",
                    "type": "Name",
                    "possible_values": []
                },
                "scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_242": {
                "variable": {
                    "value": "optim_d",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_245": {
                "variable": {
                    "value": "var_target",
                    "type": "Name",
                    "possible_values": []
                },
                "scope": {
                    "value": "t_encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_246": {
                "variable": {
                    "value": "optim_g",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_249": {
                "variable": {
                    "value": "encoder_path",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "source_dir + '/encoder'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "latest_checkpoint_250": {
                "variable": {
                    "value": "classifier_path",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "source_dir + '/classifier'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "list_variables_258": {
                "variable": {
                    "value": "source_var",
                    "type": "Name",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "encoder_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(source_dir + '/encoder')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_260": {
                "variable": {
                    "value": "var_s_g",
                    "type": "Name",
                    "possible_values": []
                },
                "scope": {
                    "value": "s_encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_261": {
                "variable": {
                    "value": "var_c_g",
                    "type": "Name",
                    "possible_values": []
                },
                "scope": {
                    "value": "classifier",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_262": {
                "variable": {
                    "value": "var_t_g",
                    "type": "Name",
                    "possible_values": []
                },
                "scope": {
                    "value": "t_encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_273": {
                "variable": {
                    "value": "encoder_saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_s_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.global_variables(scope='s_encoder')",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_274": {
                "variable": {
                    "value": "classifier_saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_c_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.global_variables(scope='classifier')",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_284": {
                "variable": {
                    "value": "fine_turn_saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "dict_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Saver_285": {
                "variable": {
                    "value": "best_saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_293": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_150": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.summary_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "saver_source",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_source",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[k for k in all_vars if k.name.startswith('s_encoder')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_153": {
                "variable": {
                    "value": "saver_cls",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_cls",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[k for k in all_vars if k.name.startswith('classifier')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "scalar_233": {
                "name": {
                    "value": "t_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "t_acc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(tf.equal(tf.argmax(t_logits, 1), target_labels_ph), tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_298": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.step2_summary_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_306": {
                "variable": {
                    "value": "saver_dis",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_dis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables('discriminator')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_125": {
                "x": {
                    "value": "tf.equal(pred_labels, labels_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_129": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in var_list if 'bias' not in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "step1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_143": {
                "name": {
                    "value": "s_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "s_loss_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(s_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_144": {
                "name": {
                    "value": "train_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "acc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(tf.equal(pred_labels, labels_ph), dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_232": {
                "x": {
                    "value": "tf.equal(tf.argmax(t_logits, 1), target_labels_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_266": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var_s_g",
                            "Name"
                        ],
                        [
                            "var_c_g",
                            "Name"
                        ],
                        [
                            "var_t_g",
                            "Name"
                        ]
                    ]
                }
            },
            "histogram_268": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var_s_g",
                            "Name"
                        ],
                        [
                            "var_c_g",
                            "Name"
                        ],
                        [
                            "var_t_g",
                            "Name"
                        ]
                    ]
                }
            },
            "histogram_270": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "var_s_g",
                            "Name"
                        ],
                        [
                            "var_c_g",
                            "Name"
                        ],
                        [
                            "var_t_g",
                            "Name"
                        ]
                    ]
                }
            },
            "name_scope_288": {
                "name": {
                    "value": "step2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_290": {
                "name": {
                    "value": "d_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scalar_291": {
                "name": {
                    "value": "g_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Session_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_125": {
                "x": {
                    "value": "pred_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(s_logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, [config.batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_232": {
                "x": {
                    "value": "tf.argmax(t_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "target_labels_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [config.batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_129": {
                "t": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "argmax_232": {
                "input": {
                    "value": "t_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "classifier(t_feature, phase=phase, reuse=True, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "truncated_normal_29": {
                "variable": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "name": {
                    "value": "name + '_w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_35": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_40": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_43": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Exists_48": {
                "filename": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "MakeDirs_50": {
                "dirname": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DeleteRecursively_49": {
                "dirname": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_18": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_26": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "adda_data/datasets/dataset_read.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "S[imgs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_source",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(train_source - pixel_mean) / float(255)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "S[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s_label_train",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "T[imgs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(train_target - pixel_mean) / float(255)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "T[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_label_train",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "S_test[imgs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(test_target - pixel_mean) / float(255)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "S_test[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_label_test",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "T_test[imgs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(test_target - pixel_mean) / float(255)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "T_test[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_label_test",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "adda_data/datasets/unaligned_data_loader.py": {
        "torch": {}
    }
}