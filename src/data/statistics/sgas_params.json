{
    "gcn/gcn_point/main_modelnet.py": {
        "sklearn": {
            "accuracy_score_120": {
                "variable": {
                    "value": "overall_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_121": {
                "variable": {
                    "value": "class_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_147": {
                "variable": {
                    "value": "overall_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_148": {
                "variable": {
                    "value": "class_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_56": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "train_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='train', num_points=args.num_points, data_dir=args.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "test_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='test', num_points=args.num_points, data_dir=args.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_185": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_193": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.learning_rate * 100, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_160": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_162": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_164": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_188": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_192": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__110": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_point/train_search.py": {
        "sklearn": {
            "accuracy_score_305": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_332": {
                "variable": {
                    "value": "overall_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_333": {
                "variable": {
                    "value": "class_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_65": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "histogram_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "probs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(alphas, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_190": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_201": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_206": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.learning_rate, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(args.epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.learning_rate_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "normal_selected_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(model.alphas_normal) * [-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "variable": {
                    "value": "normal_candidate_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(model.alphas_normal) * [True]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_128": {
                "variable": {
                    "value": "masked_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.normalize(importance) * utils.normalize(1 - entropy)",
                            "BinOp"
                        ],
                        [
                            "utils.normalize(importance) * utils.normalize(1 - entropy) * utils.normalize(histogram_inter)",
                            "BinOp"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_130": {
                "variable": {
                    "value": "selected_edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(score, (2 * candidate_flags.float() - 1) * np.inf)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_172": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_174": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.normalize(importance) * utils.normalize(1 - entropy)",
                            "BinOp"
                        ],
                        [
                            "utils.normalize(importance) * utils.normalize(1 - entropy) * utils.normalize(histogram_inter)",
                            "BinOp"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_107": {
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat[:, 1:] / importance[:, None]",
                            "BinOp"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_218": {
                "input": {
                    "value": "torch.stack(model.alphas_normal, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__295": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "candidate_flags.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "input": {
                    "value": "probs[selected_edge_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_218": {
                "tensors": {
                    "value": "model.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/utils.py": {
        "sklearn": {
            "f1_score_59": {
                "variable": {
                    "value": "micro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target.cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "(output > 0).cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_51": {
                "y_true": {
                    "value": "data.y.cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "(out > 0).cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "min_149": {
                "variable": {
                    "value": "min_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_model_state_dict.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.minimum(a.cpu().numpy(), b.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(c).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob)",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_113": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.state.values()",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_120": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "normalized_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "v.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_150": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_model_state_dict.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mul_169": {
                "input": {
                    "value": "pointcloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pointcloud",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(3).uniform_(2.0 / 3.0, 3.0 / 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_183": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_model",
                            "Method Argument"
                        ],
                        [
                            "pretrained_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_235": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_model",
                            "Method Argument"
                        ],
                        [
                            "pretrained_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_240": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_model_state_dict.items()",
                            "Call"
                        ],
                        [
                            "state.items()",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/architect.py": {
        "torch": {
            "cat_8": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_17": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.arch_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_27": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_91": {
                "variable": {
                    "value": "req_grads_p",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "requires_grad_arch_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.model.arch_parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_105": {
                "variable": {
                    "value": "req_grads_n",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "requires_grad_arch_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.model.arch_parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_like_26": {
                "variable": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_concat(self.model.parameters()).data",
                            "Attribute"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(xs, self.model.parameters())",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_99": {
                "variable": {
                    "value": "g_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_113": {
                "variable": {
                    "value": "g_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_57": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.model.arch_parameters(), dalpha)",
                            "Call"
                        ],
                        [
                            "self.model.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_58": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.model.arch_parameters(), dalpha)",
                            "Call"
                        ],
                        [
                            "self.model.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/model.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_141": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_curr",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C_prev",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.stem0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.stem1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_197": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_curr",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "cell.multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C_prev",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_70": {
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_93": {
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "num_features": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "C // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_169": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_173": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/model_search.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, C_curr, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_105": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_curr",
                            "variable"
                        ],
                        [
                            "multiplier * C_curr",
                            "BinOp"
                        ],
                        [
                            "C_prev",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_217": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(alphas, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_218": {
                "variable": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_219": {
                "variable": {
                    "value": "masked_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(mat[:, 1:], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "num_selected_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - flags[start:end].int()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_222": {
                "variable": {
                    "value": "num_selected_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - flags[start:end].int()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "C_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stem_multiplier * C",
                            "BinOp"
                        ],
                        [
                            "C",
                            "variable"
                        ],
                        [
                            "C_curr * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_217": {
                "tensors": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alphas_reduce",
                            "Attribute"
                        ],
                        [
                            "self.alphas_normal",
                            "Attribute"
                        ],
                        [
                            "alphas",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_139": {
                "input": {
                    "value": "alphas[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_225": {
                "input": {
                    "value": "masked_importance[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "num_edges_to_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_num_edges - num_selected_edges",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_161": {
                "*size": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_162": {
                "*size": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_236": {
                "input": {
                    "value": "alphas[j][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cnn/operations.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_103": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv_1(x), self.conv_2(x[:, :, 1:, 1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_6": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_7": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.ReLU(inplace=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "C_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ],
                        [
                            "C_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ],
                        [
                            "C_out",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/test.py": {
        "torch": {}
    },
    "cnn/test_imagenet.py": {
        "torch": {
            "DataParallel_47": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Network(args.init_channels, CLASSES, args.layers, args.auxiliary, genotype)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "valid_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(validdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_49": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cnn/train.py": {
        "torch": {}
    },
    "cnn/train_imagenet.py": {
        "torch": {
            "device_count_85": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "train_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.2), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "valid_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(validdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_142": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.learning_rate, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(args.epochs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_65": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logsoftmax(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Network(args.init_channels, CLASSES, args.layers, args.auxiliary, genotype)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cnn/train_search.py": {
        "torch": {}
    },
    "cnn/utils.py": {
        "torch": {
            "min_124": {
                "variable": {
                    "value": "min_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.minimum(a.cpu().numpy(), b.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(c).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.cuda.FloatTensor(x.size(0), 1, 1, 1).bernoulli_(keep_prob))",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_88": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "normalized_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "v.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ],
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_125": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gcn/gcn_graph/architect.py": {
        "torch": {
            "cat_7": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_16": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.arch_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_28": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_92": {
                "variable": {
                    "value": "req_grads_p",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "requires_grad_arch_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.model.arch_parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_106": {
                "variable": {
                    "value": "req_grads_n",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "requires_grad_arch_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.model.arch_parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_like_27": {
                "variable": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_concat(self.model.parameters()).data",
                            "Attribute"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(xs, self.model.parameters())",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "g_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "g_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_58": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.model.arch_parameters(), dalpha)",
                            "Call"
                        ],
                        [
                            "self.model.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.model.arch_parameters(), dalpha)",
                            "Call"
                        ],
                        [
                            "self.model.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gcn/gcn_graph/main_ppi.py": {
        "torch": {
            "device_45": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_163": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_165": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(args.epochs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_139": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_143": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__102": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_graph/model.py": {
        "torch": {
            "cat_47": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "(out, s1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_graph/model_search.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP([in_channels, C_curr], None, 'batch', bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_90": {
                "variable": {
                    "value": "self.global_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "C_prev + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "self.normal_selected_idxs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "len(self.alphas_normal) * [-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "self.normal_candidate_flags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "len(self.alphas_normal) * [True]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(alphas, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_189": {
                "variable": {
                    "value": "masked_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(mat[:, 1:], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_150": {
                "variable": {
                    "value": "num_selected_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - flags[start:end].int()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_192": {
                "variable": {
                    "value": "num_selected_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - flags[start:end].int()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "(out, s1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "tensors": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "input": {
                    "value": "self.alphas_normal[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_195": {
                "input": {
                    "value": "masked_importance[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "num_edges_to_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_num_edges - num_selected_edges",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_136": {
                "*size": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_206": {
                "input": {
                    "value": "alphas[j][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_graph/operations.py": {
        "torch": {}
    },
    "gcn/gcn_graph/random_search.py": {
        "torch": {
            "BCEWithLogitsLoss_69": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "alphas_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "model.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_18": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_29": {
                "input": {
                    "value": "alphas[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_graph/train_search.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "histogram_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "probs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(alphas, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_97": {
                "variable": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_183": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_198": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.learning_rate, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "float(args.epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.learning_rate_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "normal_selected_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(model.alphas_normal) * [-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "normal_candidate_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(model.alphas_normal) * [True]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_123": {
                "variable": {
                    "value": "masked_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.normalize(importance) * utils.normalize(1 - entropy)",
                            "BinOp"
                        ],
                        [
                            "utils.normalize(importance) * utils.normalize(1 - entropy) * utils.normalize(histogram_inter)",
                            "BinOp"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "selected_edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(score, (2 * candidate_flags.float() - 1) * np.inf)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_168": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_170": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_172": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_87": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.normalize(importance) * utils.normalize(1 - entropy)",
                            "BinOp"
                        ],
                        [
                            "utils.normalize(importance) * utils.normalize(1 - entropy) * utils.normalize(histogram_inter)",
                            "BinOp"
                        ],
                        [
                            "score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_102": {
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat[:, 1:] / importance[:, None]",
                            "BinOp"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_210": {
                "input": {
                    "value": "torch.stack(model.alphas_normal, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__281": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "candidate_flags.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_126": {
                "input": {
                    "value": "probs[selected_edge_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_95": {
                "tensors": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_210": {
                "tensors": {
                    "value": "model.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_lib/dense/torch_edge.py": {
        "torch": {
            "sum_14": {
                "variable": {
                    "value": "x_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "center_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "variable": {
                    "value": "center_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_29": {
                "variable": {
                    "value": "(_, nn_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-_pairwise_distance(x.detach())",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_31": {
                "variable": {
                    "value": "(_, nn_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-_pairwise_distance(x.detach())",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "(nn_idx, center_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_91": {
                "variable": {
                    "value": "self_loops",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "edge_index.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "self_loops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self_loops.to(edge_index.device), edge_index[:, :, :, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_13": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gcn/gcn_lib/dense/torch_nn.py": {
        "torch": {
            "ReLU_21": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_87": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.transpose(2, 1).contiguous().view(-1, num_dims)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.contiguous().view(batch_size, -1) + idx.type(index.dtype).to(inputs.device)",
                            "BinOp"
                        ],
                        [
                            "index.contiguous().view(-1)",
                            "Call"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_87": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_37": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_80": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_25": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "n_prelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "channels[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gcn/gcn_lib/dense/torch_vertex.py": {
        "torch": {
            "max_22": {
                "variable": {
                    "value": "(x_j, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_j - x_i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_39": {
                "variable": {
                    "value": "(max_value, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.nn(torch.cat([x_i, x_j - x_i], dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * out_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_112": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j], dim=1) * self.att).sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "F.softmax(alpha, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j], dim=1) * self.att).sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "F.softmax(alpha, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j], dim=1) * self.att).sum(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "F.softmax(alpha, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(alpha, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_278": {
                "variable": {
                    "value": "(aggr_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "torch.max(x_j - x_i, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j * alpha",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j * norm",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "self.pre_nn(x_j - x_i)",
                            "Call"
                        ],
                        [
                            "self.pre_nn(x_j)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, out_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_163": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, out_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([eps])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_265": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, out_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_284": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn((1 + self.eps) * x + torch.sum(x_j, dim=-1, keepdim=True))",
                            "Call"
                        ],
                        [
                            "self.nn(torch.cat((x, aggr_out), dim=1))",
                            "Call"
                        ],
                        [
                            "out + self.bias",
                            "BinOp"
                        ],
                        [
                            "F.normalize(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "tensors": {
                    "value": "(x, dense)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "[x, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "tensors": {
                    "value": "(x, aggr_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "[x_i, x_j - x_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_228": {
                "input": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "torch.max(x_j - x_i, -1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j * alpha",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j * norm",
                            "BinOp"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "batched_index_select(x, edge_index[0])",
                            "Call"
                        ],
                        [
                            "self.pre_nn(x_j - x_i)",
                            "Call"
                        ],
                        [
                            "self.pre_nn(x_j)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "[x_i, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_lib/sparse/torch_edge.py": {
        "torch": {
            "sum_62": {
                "variable": {
                    "value": "x_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "topk_81": {
                "variable": {
                    "value": "(_, nn_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-pairwise_distance(x)",
                            "UnaryOp"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ],
                        [
                            "9",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_85": {
                "variable": {
                    "value": "start_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_points * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_95": {
                "variable": {
                    "value": "center_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_points * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "center_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(nn_idx, center_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, x.shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_cache_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_19": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_21": {
                "n": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k * self.dilation",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "gcn/gcn_lib/sparse/torch_nn.py": {
        "torch": {
            "ReLU_20": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_34": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm1d_36": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_24": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "n_prelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gcn/gcn_lib/sparse/torch_vertex.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.unlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.unlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_j - x_i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tg.utils.scatter_(self.aggr, torch.index_select(x, 0, edge_index[0]) - torch.index_select(x, 0, edge_index[1]), edge_index[1], dim_size=x.shape[0])",
                            "Call"
                        ],
                        [
                            "x_j",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_113": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.unlinear(self.gconv(x, edge_index))",
                            "Call"
                        ],
                        [
                            "self.nn(torch.cat((x, aggr_out), dim=1))",
                            "Call"
                        ],
                        [
                            "out + self.bias",
                            "BinOp"
                        ],
                        [
                            "F.normalize(out, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.unlinear(self.gconv(x, edge_index))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_22": {
                "tensors": {
                    "value": "[x, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "(x, aggr_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "(x, dense)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "(x, dense)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_21": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(-1) if x.dim() == 1 else x",
                            "IfExp"
                        ],
                        [
                            "torch.matmul(x_j - x_i, self.weight)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_j, self.weight)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_point/architect.py": {
        "torch": {
            "cat_7": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_16": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.arch_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.arch_weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_28": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_92": {
                "variable": {
                    "value": "req_grads_p",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "requires_grad_arch_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.model.arch_parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grad_106": {
                "variable": {
                    "value": "req_grads_n",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "requires_grad_arch_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in self.model.arch_parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_like_27": {
                "variable": {
                    "value": "moment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_concat(self.model.parameters()).data",
                            "Attribute"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(xs, self.model.parameters())",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "g_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "g_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ],
                        [
                            "self.model.arch_parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_58": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.model.arch_parameters(), dalpha)",
                            "Call"
                        ],
                        [
                            "self.model.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.model.arch_parameters(), dalpha)",
                            "Call"
                        ],
                        [
                            "self.model.named_parameters()",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ],
                        [
                            "zip(self.model.parameters(), vector)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gcn/gcn_point/load_modelnet.py": {
        "torch": {}
    },
    "gcn/gcn_point/model.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv([C, 128, 768], 'relu', 'batch', bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv([in_channels, C_curr], None, 'batch', bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv([emb_dims * 2, 512], act='leakyrelu', norm='batch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "fusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pre_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s1]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_118": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "fusion",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_119": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pre_layers, dim=1)",
                            "Call"
                        ],
                        [
                            "self.fusion_conv(fusion)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[states[i] for i in self._concat]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_99": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_point/model_search.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self._ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self._bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv([in_channels, C_curr], None, 'batch', bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv([emb_dims * 2, 512], act='leakyrelu', norm='batch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "self.normal_selected_idxs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "len(self.alphas_normal) * [-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "self.normal_candidate_flags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "len(self.alphas_normal) * [True]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "fusion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pre_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s1]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_143": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "fusion",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_144": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pre_layers, dim=1)",
                            "Call"
                        ],
                        [
                            "self.fusion_conv(fusion)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(alphas, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_209": {
                "variable": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_210": {
                "variable": {
                    "value": "masked_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "importance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(mat[:, 1:], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "states[-self._multiplier:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_171": {
                "variable": {
                    "value": "num_selected_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - flags[start:end].int()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_213": {
                "variable": {
                    "value": "num_selected_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - flags[start:end].int()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_103": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_105": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_208": {
                "tensors": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_133": {
                "input": {
                    "value": "self.alphas_normal[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_216": {
                "input": {
                    "value": "masked_importance[start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "num_edges_to_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_num_edges - num_selected_edges",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_157": {
                "*size": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_227": {
                "input": {
                    "value": "alphas[j][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/gcn_point/operations.py": {
        "torch": {}
    },
    "gcn/gcn_point/random_search.py": {
        "torch": {
            "BCEWithLogitsLoss_68": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "alphas_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "model.alphas_normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_17": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(PRIMITIVES)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_28": {
                "input": {
                    "value": "alphas[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}