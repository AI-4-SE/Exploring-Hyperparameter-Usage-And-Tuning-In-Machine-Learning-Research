{
    "examples/vae/utils/vae_plots.py": {
        "sklearn": {
            "TSNE_92": {
                "variable": {
                    "value": "model_tsne",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "variable": {
                    "value": "ys[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/air/air.py": {
        "torch": {
            "cat_362": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_where.new_zeros(n, 1), z_where)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_366": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((z_where.new_zeros(n, 1), z_where), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(out, 1, ix)",
                            "Call"
                        ],
                        [
                            "out.view(n, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat((z_where.new_ones(n, 1), -z_where[:, 1:]), 1)",
                            "Call"
                        ],
                        [
                            "out / z_where[:, 0:1]",
                            "BinOp"
                        ],
                        [
                            "F.grid_sample(windows.view(n, 1, window_size, window_size), grid)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(images.view(n, 1, image_size, image_size), grid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "ix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expansion_indices",
                            "Name"
                        ],
                        [
                            "ix.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_380": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_where.new_ones(n, 1), -z_where[:, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_390": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expand_z_where(z_where)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((n, 1, image_size, image_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_391": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "windows.view(n, 1, window_size, window_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((n, 1, image_size, image_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta_inv, torch.Size((n, 1, window_size, window_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "affine_grid_399": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expand_z_where(z_where_inv(z_where))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((n, 1, window_size, window_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_400": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images.view(n, 1, image_size, image_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((n, 1, image_size, image_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta_inv, torch.Size((n, 1, window_size, window_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.z_where_loc_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([scale_prior_mean, pos_prior_mean, pos_prior_mean])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.z_where_scale_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([scale_prior_sd, pos_prior_sd, pos_prior_sd])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_95": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "rnn_input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_size ** 2 if embed_net is None else embed_net[-1]",
                            "IfExp"
                        ],
                        [
                            "rnn_input_size + (self.z_where_size + z_what_size + self.z_pres_size)",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTMCell_112": {
                "variable": {
                    "value": "self.bl_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "rnn_input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_size ** 2 if embed_net is None else embed_net[-1]",
                            "IfExp"
                        ],
                        [
                            "rnn_input_size + (self.z_where_size + z_what_size + self.z_pres_size)",
                            "BinOp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.h_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, rnn_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.c_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, rnn_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.bl_h_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, rnn_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.bl_c_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, rnn_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.z_where_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.z_where_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.z_what_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.z_what_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs['embed'], prev.z_where, prev.z_what, prev.z_pres)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "rnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs['bl_embed'], prev.z_where.detach(), prev.z_what.detach(), prev.z_pres.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_408": {
                "tensors": {
                    "value": "[torch.cat((z_where.cpu().data, z_pres.cpu().data), 1) for (z_where, z_pres) in zip(*z)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "transpose_408": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "rnn_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "rnn_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "rnn_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "rnn_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_where_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_what_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "windows.size(0)",
                            "Call"
                        ],
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_133": {
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "windows.size(0)",
                            "Call"
                        ],
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_pres_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_250": {
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "windows.size(0)",
                            "Call"
                        ],
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_pres_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_410": {
                "tensors": {
                    "value": "(z_where.cpu().data, z_pres.cpu().data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_176": {
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "windows.size(0)",
                            "Call"
                        ],
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_what_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "windows.size(0)",
                            "Call"
                        ],
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_what_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_208": {
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "z_where.size(0)",
                            "Call"
                        ],
                        [
                            "windows.size(0)",
                            "Call"
                        ],
                        [
                            "images.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ],
                        [
                            "batch.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.x_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/air/main.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "error_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "error_indicators",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "nonzero_61": {
                "variable": {
                    "value": "error_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "error_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_np",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X_np.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "X_np / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_52": {
                "input": {
                    "value": "true_counts_m.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inferred_counts_m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "count_vec_to_mat(inferred_counts, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "error_latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_204": {
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "air.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/air/modules.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "variable": {
                    "value": "z_pres_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[:, 0:self.z_pres_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_81": {
                "variable": {
                    "value": "z_where_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[:, self.z_pres_size + self.z_where_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_21": {
                "input": {
                    "value": "a[:, self.z_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ],
                        [
                            "a + self.bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "sizes[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sizes[-1][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/baseball.py": {
        "torch": {
            "tensor_182": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pd_dataframe[['At-Bats', 'Hits']].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor().device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pd_dataframe[['SeasonAt-Bats', 'SeasonHits']].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Tensor().device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_421": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/capture_recapture/cjs.py": {
        "torch": {
            "ones_93": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "first_capture_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_141": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "first_capture_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_233": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "first_capture_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_60": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "first_capture_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_153": {
                "variable": {
                    "value": "phi_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_logit_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('phi_logit_{}'.format(t), dist.Normal(phi_logit_mean, phi_sigma)) if t > 0 else torch.tensor(0.0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_189": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "first_capture_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_243": {
                "variable": {
                    "value": "phi_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_beta + phi_gamma_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "data": {
                    "value": "np.genfromtxt(capture_history_file, delimiter=',')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_130": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log1p_130": {
                "input": {
                    "value": "-p",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_298": {
                "data": {
                    "value": "np.genfromtxt(sex_file, delimiter=',')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/autoname/mixture.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 2.0, 20.0, 30.0, 40.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_27": {
                "*size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_25": {
                "*size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_50": {
                "*size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/contrib/autoname/scoping_mixture.py": {
        "torch": {
            "tensor_54": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 2.0, 20.0, 30.0, 40.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_19": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_37": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/contrib/autoname/tree_data.py": {
        "torch": {
            "tensor_80": {
                "variable": {
                    "value": "one",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_32": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'foo': one, 'bar': [0 * one, 1 * one, 2 * one], 'baz': {'noun': {'concrete': 4 * one, 'abstract': 6 * one}, 'verb': 2 * one}}",
                            "Dict"
                        ]
                    ]
                }
            },
            "is_tensor_59": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'foo': one, 'bar': [0 * one, 1 * one, 2 * one], 'baz': {'noun': {'concrete': 4 * one, 'abstract': 6 * one}, 'verb': 2 * one}}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/cevae/synthetic.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "t0_t1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0], [1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_48": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/epidemiology/regional.py": {
        "torch": {
            "full_17": {
                "variable": {
                    "value": "population",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.num_regions,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(args.population)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_18": {
                "variable": {
                    "value": "coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "args.num_regions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_18": {
                "variable": {
                    "value": "coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "args.coupling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_127": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "args.duration + args.forecast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_209": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_211": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_213": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/epidemiology/sir.py": {
        "torch": {
            "cat_244": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v for (_, v) in covariates]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "ticks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] + [v.size(-1) for (_, v) in covariates]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_252": {
                "variable": {
                    "value": "ticks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_279": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "args.duration + args.forecast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inv_231": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "biject_to(constraint).inv(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_395": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_397": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_399": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/forecast/bart.py": {
        "torch": {
            "stack_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[arrivals, departures]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_113": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "poisson_136": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.clamp(min=0.0001).expm1()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_57": {
                "size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-3.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/funsor/hmm.py": {
        "torch": {
            "tensor_407": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_441": {
                "variable": {
                    "value": "self.x_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_442": {
                "variable": {
                    "value": "self.y_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.nn_channels * data_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_443": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.nn_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_444": {
                "variable": {
                    "value": "self.hidden_to_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.nn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_445": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_489": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_560": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "data_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_671": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_533": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_543": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_548": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_552": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_566": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_103": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_196": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_283": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_334": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_337": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_389": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_484": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_598": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_393": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "examples/contrib/gp/sv-dkl.py": {
        "torch": {
            "clone_150": {
                "variable": {
                    "value": "Xu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_178": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gpmodule.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv1(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.max_pool2d(self.conv2(x), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_54": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_55": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_150": {
                "tensors": {
                    "value": "batches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "examples/contrib/mue/FactorMuE.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_68": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_87": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sum(data_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_182": {
                "variable": {
                    "value": "insert_expect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "insert - insert.logsumexp(-1, True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_196": {
                "variable": {
                    "value": "delete_expect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delete - delete.logsumexp(-1, True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_432": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_434": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_89": {
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BiosequenceDataset(seqs, 'list', 'AB', include_stop=include_stop, device=device)",
                            "Call"
                        ],
                        [
                            "generate_data(args.small, args.include_stop, device)",
                            "Call"
                        ],
                        [
                            "BiosequenceDataset(args.file, 'fasta', args.alphabet, include_stop=args.include_stop, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[offset - length:offset]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/mue/ProfileHMM.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_93": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sum(data_lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_152": {
                "variable": {
                    "value": "insert_expect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "insert - insert.logsumexp(-1, True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_166": {
                "variable": {
                    "value": "delete_expect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delete - delete.logsumexp(-1, True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_321": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_323": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Subset_95": {
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BiosequenceDataset(seqs, 'list', 'AB', include_stop=include_stop, device=device)",
                            "Call"
                        ],
                        [
                            "generate_data(args.small, args.include_stop, device)",
                            "Call"
                        ],
                        [
                            "BiosequenceDataset(args.file, 'fasta', args.alphabet, include_stop=args.include_stop, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[offset - length:offset]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/oed/ab_test.py": {
        "torch": {
            "tensor_54": {
                "variable": {
                    "value": "prior_sds",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[10.0, 2.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "designs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[group_assignment_matrix(torch.tensor([n1, N - n1])) for n1 in ns]",
                            "ListComp"
                        ],
                        [
                            "[group_assignment_matrix(torch.tensor([n1, N - n1])) for n1 in ns]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "diag_85": {
                "variable": {
                    "value": "prior_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_sds ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "true_ape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[25.0, 75.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[n1, N - n1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "[n1, N - n1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logdet_90": {
                "input": {
                    "value": "2 * np.pi * np.e * posterior_cov",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/contrib/oed/gp_bayes_opt.py": {
        "torch": {
            "cat_37": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.gpmodel.X, X]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.gpmodel.y, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gpmodel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "inv_60": {
                "variable": {
                    "value": "unconstrained_x_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "x_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty(1, dtype=self.gpmodel.X.dtype, device=self.gpmodel.X.device).uniform_(self.constraints.lower_bound, self.constraints.upper_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "LBFGS_63": {
                "variable": {
                    "value": "minimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[unconstrained_x]",
                    "type": "List",
                    "possible_values": []
                },
                "max_eval": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_107": {
                "variable": {
                    "value": "(mvalue, argmin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_123": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_acquisitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "*X.shape[1:]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_98": {
                "variable": {
                    "value": "x_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.gpmodel.X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.gpmodel.X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_71": {
                "tensors": {
                    "value": "unconstrained_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unconstrained_x_init.detach().clone().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_tensors": {
                    "value": "autograd.grad(y, unconstrained_x, retain_graph=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_102": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([self.gpmodel.y, y])",
                            "Call"
                        ],
                        [
                            "differentiable(x)",
                            "Call"
                        ],
                        [
                            "loss(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "data": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_72": {
                "outputs": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([self.gpmodel.y, y])",
                            "Call"
                        ],
                        [
                            "differentiable(x)",
                            "Call"
                        ],
                        [
                            "loss(X)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "unconstrained_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unconstrained_x_init.detach().clone().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "torch.abs(unconstrained_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "unconstrained_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unconstrained_x_init.detach().clone().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/contrib/timeseries/gp_models.py": {
        "torch": {
            "Adam_63": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.init_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialLR_73": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "adam",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(gp.parameters(), lr=args.init_learning_rate, betas=(args.beta1, 0.999), amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.final_learning_rate / args.init_learning_rate) ** (1.0 / args.num_steps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data[::20, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "dts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_114": {
                "start": {
                    "value": "T_multistep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "49",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_51": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "num_gps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "9",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/cvae/baseline.py": {
        "torch": {
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "baseline_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_37": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.view(input.shape)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "baseline_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_grad_enabled_79": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "examples/cvae/cvae.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_36": {
                "variable": {
                    "value": "z_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc32(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_51": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_189": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "cvae_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/cvae/main.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/cvae/mnist.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "sample[digit]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.asarray(sample['digit'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "dataloaders[mode]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets[mode]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/cvae/util.py": {
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "num_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "separator_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 5, originals_tensor.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "grid_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs_tensor, separator_tensor, originals_tensor, separator_tensor, baseline_tensor, separator_tensor, cvae_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dmm.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "self.lin_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emission_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.lin_hidden_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emission_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emission_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.lin_hidden_to_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emission_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "88",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_hidden_to_input(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.lin_gate_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "transition_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.lin_gate_hidden_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "transition_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.lin_proposed_mean_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "transition_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.lin_proposed_mean_hidden_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "transition_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.lin_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.lin_z_to_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_86": {
                "variable": {
                    "value": "self.lin_z_to_loc.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "self.lin_z_to_loc.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_89": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_90": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_100": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_gate_hidden_to_z(_gate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.lin_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "600",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.lin_hidden_to_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "600",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.lin_hidden_to_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "600",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_128": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_129": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RNN_173": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "88",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "600",
                            "MethodArgument"
                        ]
                    ]
                },
                "nonlinearity": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "rnn_dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0 if num_layers == 1 else rnn_dropout_rate",
                            "IfExp"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_187": {
                "variable": {
                    "value": "self.iafs_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.iafs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_192": {
                "variable": {
                    "value": "self.z_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.z_q_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.h_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, rnn_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_550": {
                "variable": {
                    "value": "shuffled_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "N_train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(training_seq_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_354": {
                "input": {
                    "value": "training_seq_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['train']['sequence_lengths']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_392": {
                "start": {
                    "value": "n_eval_samples * val_data_sequences.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_403": {
                "start": {
                    "value": "n_eval_samples * test_data_sequences.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_459": {
                "obj": {
                    "value": "dmm.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_193": {
                "*size": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "600",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_470": {
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_525": {
                "input": {
                    "value": "val_seq_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['valid']['sequence_lengths']",
                            "Subscript"
                        ],
                        [
                            "rep(val_seq_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_528": {
                "input": {
                    "value": "test_seq_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['test']['sequence_lengths']",
                            "Subscript"
                        ],
                        [
                            "rep(test_seq_lengths)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/eight_schools/data.py": {
        "torch": {
            "tensor_7": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[28, 8, -3, 7, -1, 1, 18, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_8": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[15, 10, 16, 11, 9, 11, 10, 18]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/eight_schools/mcmc.py": {
        "torch": {
            "zeros_20": {
                "*size": {
                    "value": "data.J",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_20": {
                "*size": {
                    "value": "data.J",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_22": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/eight_schools/svi.py": {
        "torch": {
            "stack_17": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y, sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "loc_eta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "loc_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "loc_logtau",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_37": {
                "*size": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_39": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_41": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExpTransform_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_25": {
                "*size": {
                    "value": "J",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/einsum.py": {
        "torch": {
            "trace_51": {
                "variable": {
                    "value": "_CACHE[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "_einsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_71": {
                "variable": {
                    "value": "_CACHE[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "_einsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_91": {
                "variable": {
                    "value": "_CACHE[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "_einsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_143": {
                "variable": {
                    "value": "_CACHE[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "_forward_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_181": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_183": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_103": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "operands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_205": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([plate_size if d in plates else args.dim_size for d in dims])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/hmm.py": {
        "torch": {
            "tensor_396": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_430": {
                "variable": {
                    "value": "self.x_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_431": {
                "variable": {
                    "value": "self.y_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.nn_channels * data_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.nn_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_432": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.nn_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.hidden_to_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.nn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "data_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_434": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_478": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_599": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_600": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_601": {
                "variable": {
                    "value": "init_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.hidden_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_549": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "data_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_622": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_522": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_532": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_537": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_541": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_555": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_92": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_185": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_272": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_323": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_326": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_378": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_473": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_594": {
                "n": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_382": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "int(args.hidden_dim ** 0.5)",
                            "Call"
                        ],
                        [
                            "args.hidden_dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "examples/inclined_plane.py": {
        "torch": {
            "tensor_76": {
                "variable": {
                    "value": "observed_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[simulate(torch.tensor(mu0), noise_sigma=time_measurement_sigma) for _ in range(N_obs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "velocity",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "displacement",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "little_g * np.cos(phi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "100000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "mu0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.12",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "data": {
                    "value": "time_measurement_sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.02",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_59": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/lda.py": {
        "torch": {
            "Linear_87": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "ind.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_add_118": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "data",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyro.sample('doc_words', dist.Categorical(topic_words[word_topics]), obs=data)",
                            "Call"
                        ],
                        [
                            "data[:, ind]",
                            "Subscript"
                        ],
                        [
                            "data[:, ind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "index": {
                    "value": "torch.ones(data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_92": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sigmoid_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_100": {
                "*size": {
                    "value": "args.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "args.num_topics",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.num_words",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "args.num_words",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/lkj.py": {
        "torch": {
            "ones_29": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_34": {
                "variable": {
                    "value": "L_Omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(theta.sqrt())",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "L_omega",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('L_omega', dist.LKJCholesky(d, concentration))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_46": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.num_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_34": {
                "input": {
                    "value": "theta.sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/minipyro.py": {
        "torch": {
            "manual_seed_35": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/mixed_hmm/experiment.py": {
        "torch": {
            "Adam_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[site['value'].unconstrained() for site in param_capture.trace.nodes.values()]",
                            "ListComp"
                        ],
                        [
                            "[site['value'].unconstrained() for site in param_capture.trace.nodes.values()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args['learnrate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MultiStepLR_73": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.LBFGS(params, lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "schedule",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[] if not args['schedule'] else [int(i) for i in args['schedule'].split(',')]",
                            "IfExp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_78": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.LBFGS(params, lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LBFGS_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[site['value'].unconstrained() for site in param_capture.trace.nodes.values()]",
                            "ListComp"
                        ],
                        [
                            "[site['value'].unconstrained() for site in param_capture.trace.nodes.values()]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args['learnrate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MultiStepLR_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.LBFGS(params, lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "schedule",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[] if not args['schedule'] else [int(i) for i in args['schedule'].split(',')]",
                            "IfExp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_112": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.LBFGS(params, lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/mixed_hmm/model.py": {
        "torch": {
            "zeros_157": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N_state ** 2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "loc_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N_state ** 2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "scale_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N_state ** 2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "loc_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N_c, N_state ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_114": {
                "variable": {
                    "value": "scale_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N_c, N_state ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_123": {
                "*size": {
                    "value": "(N_state, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_126": {
                "*size": {
                    "value": "(N_state,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_131": {
                "*size": {
                    "value": "(N_state,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_138": {
                "*size": {
                    "value": "(N_state,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_141": {
                "*size": {
                    "value": "(N_state,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "(N_state, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_147": {
                "*size": {
                    "value": "(N_state,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "(N_state,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "(N_state ** 2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_22": {
                "*size": {
                    "value": "(N_state ** 2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "(N_c, N_state ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "(N_c, N_state ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_83": {
                "*size": {
                    "value": "(N_v,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_86": {
                "*size": {
                    "value": "(N_v, N_state ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_96": {
                "*size": {
                    "value": "(N_c, N_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "(N_c, N_v, N_state ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "data": {
                    "value": "MISSING",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['MISSING']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_267": {
                "data": {
                    "value": "MISSING",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['MISSING']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/mixed_hmm/seal_data.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "observations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(20, 2, 1800, len(obs_keys))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_37": {
                "input": {
                    "value": "observations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((20, 2, 1800, len(obs_keys))).fill_(float('-inf'))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_49": {
                "input": {
                    "value": "observations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros((20, 2, 1800, len(obs_keys))).fill_(float('-inf'))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "observations[i, g, 0:len(ind_df), o]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ind_df[obs_key].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/neutra.py": {
        "torch": {
            "meshgrid_114": {
                "variable": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.linspace(*xlim, 100), torch.linspace(*ylim, 100)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_116": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d.log_prob(torch.stack([x1, x2], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_71": {
                "tensors": {
                    "value": "[u0, u1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_114": {
                "start": {
                    "value": "*ylim",
                    "type": "Starred",
                    "possible_values": []
                },
                "end": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_116": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[[1.0, self.rho], [self.rho, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rsa/generics.py": {
        "torch": {
            "set_default_dtype_23": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "list(map(lambda x: x ** (shape_alpha - 1) * (1.0 - x) ** (shape_beta - 1), bins))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "len(threshold_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "len(utterances)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "s1Optimality",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5.0",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "examples/rsa/hyperbole.py": {
        "torch": {
            "set_default_dtype_20": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.4205, 0.3865, 0.0533, 0.0538, 0.0223, 0.0211, 0.0112, 0.0111, 0.0083, 0.012]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "list(map(utterance_cost, utterances))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "data": {
                    "value": "[0.0018655171404222354, 0.1512643329444101, 0.0030440475496016296, 0.23182161303428897, 3.854830096338984e-05, 0.01502495595927897, 3.889558295405101e-05, 0.015160315922876075, 0.00016425635615857924, 0.026788637869123822, 0.00017359794987375924, 0.028312162297699582, 0.0008164336950199063, 0.060558944822420434, 0.0008088460212743665, 0.05999612935009309, 0.01925106279557206, 0.17429720083660782, 0.02094455861717477, 0.18962994295418778]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_86": {
                "*size": {
                    "value": "len(values)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rsa/schelling.py": {
        "torch": {
            "tensor_57": {
                "variable": {
                    "value": "shared_preference",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[args.preference]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rsa/schelling_false.py": {
        "torch": {
            "tensor_72": {
                "variable": {
                    "value": "shared_preference",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[args.preference]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rsa/search_inference.py": {
        "torch": {
            "stack_80": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(logits.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self._dist_and_values()[1].values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self._dist_and_values()[1].values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_129": {
                "variable": {
                    "value": "deviation_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples - self.mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_92": {
                "obj": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logit)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_65": {
                "obj": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tr.nodes[self.sites]['value']",
                            "Subscript"
                        ],
                        [
                            "{site: tr.nodes[site]['value'] for site in self.sites}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[list(values_map.keys()).index(value_hash)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_62": {
                "obj": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logit)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_74": {
                "tensors": {
                    "value": "[logits[value_hash], logit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_217": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_193": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/rsa/semantic_parsing.py": {
        "torch": {
            "set_default_dtype_19": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "prev_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "data": {
                    "value": "-100.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_258": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(possible_combos)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_301": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/scanvi/scanvi.py": {
        "torch": {
            "Sequential_47": {
                "*args": {
                    "value": "*layers[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "z1_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z1, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_79": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softplus(scale)",
                            "Call"
                        ],
                        [
                            "softplus(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softmax(mu, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "z2_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z2_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_inputs([z2, y])",
                            "Call"
                        ],
                        [
                            "torch.cat(z2_y, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_131": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "softplus(scale)",
                            "Call"
                        ],
                        [
                            "softplus(scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_45": {
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_109": {
                "input": {
                    "value": "h2[..., :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softplus_110": {
                "input": {
                    "value": "h2[..., -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_350": {
                "input": {
                    "value": "y_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "scanvi.classifier(latent_rep)",
                            "Call"
                        ],
                        [
                            "self.classifier(z2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/sir_hmc.py": {
        "torch": {
            "tensor_80": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.population - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "S_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.population - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "I_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_293": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lb + q - 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(-1) + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_294": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lb + q - 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(-1) + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "S_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.population - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "I_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_360": {
                "variable": {
                    "value": "recovery",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "30.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_360": {
                "variable": {
                    "value": "recovery",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "args.recovery_time",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "neg_360": {
                "variable": {
                    "value": "recovery",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_360": {
                "variable": {
                    "value": "recovery",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_407": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_410": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lb + q - 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(-1) + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_411": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lb + q - 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(-1) + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_439": {
                "variable": {
                    "value": "S_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_curr[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "args.population - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_442": {
                "variable": {
                    "value": "I_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I_curr[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[site['value'] for (name, site) in tr.trace.nodes.items() if re.match('obs_[0-9]+', name)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "S2I",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[site['value'] for (name, site) in tr.trace.nodes.items() if re.match('S2I_[0-9]+', name)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_567": {
                "variable": {
                    "value": "samples[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "series",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[value for (name, value) in samples.items() if re.match(pattern, name)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_581": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "args.duration + args.forecast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "args.basic_reproduction_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "args.response_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_281": {
                "tensors": {
                    "value": "[t * tt, 4 + ss * (3 * s - 6), 4 + tt * (3 * t - 6), s * ss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_397": {
                "tensors": {
                    "value": "[t * tt, 4 + ss * (3 * s - 6), 4 + tt * (3 * t - 6), s * ss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_667": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_669": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_671": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/smcfilter.py": {
        "torch": {
            "tensor_72": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [-1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "self.sigma_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "process_noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "self.sigma_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "measurement_noise",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/sparse_gamma_def.py": {
        "torch": {
            "set_default_tensor_type_34": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.loadtxt(dataset_path, delimiter=',')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "self.alpha_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "self.beta_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "self.alpha_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "self.beta_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_185": {
                "variable": {
                    "value": "global_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pyro.param('w_scale', lambda : rand_tensor(global_group.event_shape, 0.0, 0.1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "mean_mid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_top",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('z_top', Gamma(self.alpha_z, self.beta_z).expand([self.top_width]).to_event(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_top",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('w_top', Gamma(self.alpha_w, self.beta_w))",
                            "Call"
                        ],
                        [
                            "w_top.reshape(self.top_width, self.mid_width) if w_top.dim() == 1 else w_top.reshape(-1, self.top_width, self.mid_width)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "mean_bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('z_mid', Gamma(self.alpha_z, self.beta_z / mean_mid).to_event(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_mid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('w_mid', Gamma(self.alpha_w, self.beta_w))",
                            "Call"
                        ],
                        [
                            "w_mid.reshape(self.mid_width, self.bottom_width) if w_mid.dim() == 1 else w_mid.reshape(-1, self.mid_width, self.bottom_width)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "mean_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_bottom",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('z_bottom', Gamma(self.alpha_z, self.beta_z / mean_bottom).to_event(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_bottom",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('w_bottom', Gamma(self.alpha_w, self.beta_w))",
                            "Call"
                        ],
                        [
                            "w_bottom.reshape(self.bottom_width, self.image_size) if w_bottom.dim() == 1 else w_bottom.reshape(-1, self.bottom_width, self.image_size)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softplus_199": {
                "variable": {
                    "value": "local_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pyro.param('z_scale', lambda : rand_tensor(x_shape, 0.0, 0.1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_126": {
                "input": {
                    "value": "mean_z_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('mean_z_q_%s' % name, lambda : rand_tensor((x_size, width), self.mean_init, self.sigma_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_141": {
                "input": {
                    "value": "mean_w_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('mean_w_q_%s' % name, lambda : rand_tensor(width, self.mean_init, self.sigma_init))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/sparse_regression.py": {
        "torch": {
            "set_default_tensor_type_44": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "probe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(P, 2, P)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_107": {
                "variable": {
                    "value": "probe[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.num_dimensions",
                            "Attribute"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_121": {
                "variable": {
                    "value": "k_xx_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_xx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel(kX, kX, eta1, eta2, c) + (jitter + sigma ** 2) * torch.eye(N, dtype=X.dtype, device=X.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, -0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "input": {
                    "value": "k_xx_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.inverse(k_xx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Y_mean",
                            "Name"
                        ],
                        [
                            "Y / Y_std2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.num_dimensions",
                            "Attribute"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_159": {
                "variable": {
                    "value": "(left_dims, right_dims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*size": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(active_dims)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(active_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_159": {
                "variable": {
                    "value": "(left_dims, right_dims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_159": {
                "variable": {
                    "value": "(left_dims, right_dims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_159": {
                "variable": {
                    "value": "(left_dims, right_dims)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "probe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "left_dims.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.25, -0.25, -0.25, 0.25]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "input": {
                    "value": "k_xx_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.inverse(k_xx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Y_mean",
                            "Name"
                        ],
                        [
                            "Y / Y_std2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_dims.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_223": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.num_dimensions",
                            "Attribute"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_226": {
                "variable": {
                    "value": "Y_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ni,i->n",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "X[:, 0:S]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "quadratic_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "quadratic_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(quadratic_weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_307": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list([pyro.param(name).unconstrained() for name in param_capture.trace])",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_48": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(N, P)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_221": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_108": {
                "n": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.num_dimensions",
                            "Attribute"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "input": {
                    "value": "k_xx_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.inverse(k_xx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k_probeX.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "input": {
                    "value": "k_xx_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.inverse(k_xx)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k_probeX.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_244": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_337": {
                "data": {
                    "value": "hypers['c']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_81": {
                "n": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_118": {
                "n": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_225": {
                "*size": {
                    "value": "S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.active_dimensions",
                            "Attribute"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.num_dimensions",
                            "Attribute"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_179": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_235": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/svi_horovod.py": {
        "torch": {
            "randn_68": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_99": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "covariates",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(covariates, data)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_102": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(covariates, data)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "hvd.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "rank": {
                    "value": "hvd.rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_106": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(covariates, data)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_num_threads_77": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_81": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "{'model': model, 'guide': guide}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.outfile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_79": {
                "device": {
                    "value": "hvd.local_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "svi.step(covariates_batch.to(device), data_batch.to(device))",
                            "Call"
                        ],
                        [
                            "torch.tensor(loss)",
                            "Call"
                        ],
                        [
                            "hvd.allreduce(loss, 'loss')",
                            "Call"
                        ],
                        [
                            "loss.item()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/toy_mixture_model_discrete_enumeration.py": {
        "torch": {
            "Bernoulli_61": {
                "variable": {
                    "value": "data[B]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.gather(CPDs['p_B'], 0, data['A'].type(torch.long))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bernoulli_64": {
                "variable": {
                    "value": "data[C]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.gather(CPDs['p_C'], 0, data['B'].type(torch.long))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[1.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "[[10.0, 1.0], [1.0, 10.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "[[10.0, 1.0], [1.0, 10.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Beta_56": {
                "concentration1": {
                    "value": "prior['A'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "prior['A'][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Beta_57": {
                "concentration1": {
                    "value": "prior['B'][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "prior['B'][:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Beta_58": {
                "concentration1": {
                    "value": "prior['C'][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "prior['C'][:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Bernoulli_60": {
                "probs": {
                    "value": "torch.ones(num_obs) * CPDs['p_A']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_62": {
                "input": {
                    "value": "CPDs['p_B']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "data['A'].type(torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_65": {
                "input": {
                    "value": "CPDs['p_C']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "data['B'].type(torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "num_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.num_obs",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "examples/vae/ss_vae_M2.py": {
        "torch": {
            "topk_196": {
                "variable": {
                    "value": "(res, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encoder_y.forward(xs)",
                            "Call"
                        ],
                        [
                            "self.encoder_y.forward(xs)",
                            "Call"
                        ],
                        [
                            "self.encoder_y.forward(xs)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_199": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encoder_y.forward(xs)",
                            "Call"
                        ],
                        [
                            "self.encoder_y.forward(xs)",
                            "Call"
                        ],
                        [
                            "self.encoder_y.forward(xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "prior_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_133": {
                "variable": {
                    "value": "prior_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_289": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[i] == act[i]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_138": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/vae/utils/custom_mlp.py": {
        "torch": {
            "Sequential_205": {
                "variable": {
                    "value": "self.sequential_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*all_modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_21": {
                "input": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_42": {
                "obj": {
                    "value": "input_args",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_args[0]",
                            "Subscript"
                        ],
                        [
                            "[s.expand(shape) for s in input_args]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "cur_linear_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_layer_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size if type(input_size) == int else sum(input_size)",
                            "IfExp"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "input_args",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_args[0]",
                            "Subscript"
                        ],
                        [
                            "[s.expand(shape) for s in input_args]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_125": {
                "variable": {
                    "value": "cur_linear_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "cur_linear_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Linear(last_layer_size, layer_size)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(cur_linear_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_163": {
                "in_features": {
                    "value": "last_layer_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size if type(input_size) == int else sum(input_size)",
                            "IfExp"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "in_features": {
                    "value": "last_layer_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_size if type(input_size) == int else sum(input_size)",
                            "IfExp"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "*args": {
                    "value": "*split_layer",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/vae/utils/mnist_cached.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "yp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_245": {
                "variable": {
                    "value": "loaders[mode]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cached_data[mode]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/vae/vae.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softplus_30": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_41": {
                "variable": {
                    "value": "z_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc22(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softplus_54": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "loc_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc21(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "z_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_90": {
                "variable": {
                    "value": "z_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/vae/vae_comparison.py": {
        "torch": {
            "Linear_38": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_159": {
                "variable": {
                    "value": "binary_cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model_eval(x)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "x.reshape(-1, 784)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "input": {
                    "value": "self.fc4(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_178": {
                "params": {
                    "value": "model_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "itertools.chain(self.vae_encoder.parameters(), self.vae_decoder.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_46": {
                "input": {
                    "value": "self.fc22(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "comparison",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:n], recon_x.reshape(self.args.batch_size, 1, 28, 28)[:n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "1 + z_var.log() - z_mean.pow(2) - z_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "*size": {
                    "value": "[data.size(0), 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_194": {
                "*size": {
                    "value": "[data.size(0), 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "profiler/distributions.py": {
        "torch": {}
    },
    "pyro/contrib/bnn/hidden_layer.py": {
        "torch": {
            "pow_94": {
                "variable": {
                    "value": "KL_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A_mean / self.A_prior_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_94": {
                "variable": {
                    "value": "KL_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_96": {
                "input": {
                    "value": "self.A_scale / self.A_prior_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.A_mean + torch.randn(sample_shape + self.A_scale.shape).type_as(self.A_mean) * self.A_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.A_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_111": {
                "variable": {
                    "value": "X_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_111": {
                "variable": {
                    "value": "X_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_112": {
                "variable": {
                    "value": "A_scale_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_97": {
                "input": {
                    "value": "self.A_scale / self.A_prior_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "sample_shape + self.A_scale.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_115": {
                "*size": {
                    "value": "sample_shape + _std.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/bnn/utils.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "D_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_16": {
                "tensors": {
                    "value": "[x, torch.ones(x.shape[:-1] + (1,)).type_as(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_20": {
                "tensors": {
                    "value": "[x, torch.zeros(x.shape[:-1] + (1,)).type_as(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_16": {
                "*size": {
                    "value": "x.shape[:-1] + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "x.shape[:-1] + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/cevae/__init__.py": {
        "torch": {
            "softplus_128": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(x).squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_128": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_160": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_scale[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_160": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_191": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_scale[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_191": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_218": {
                "variable": {
                    "value": "self.df_unconstrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_223": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_scale[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_223": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_224": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.df_unconstrained",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_224": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_260": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_scale[..., self.dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_260": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_260": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "y_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y.unsqueeze(-1), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_576": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_577": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(x, t, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_652": {
                "variable": {
                    "value": "fake_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_641": {
                "tensors": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.jit.trace_module(self, {'ite': (fake_x,)}, check_trace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_module_655": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "mod": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "{'ite': (fake_x,)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_348": {
                "condition": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('t', self.t_dist(z), obs=t)",
                            "Call"
                        ],
                        [
                            "pyro.sample('t', self.t_dist(z), obs=t)",
                            "Call"
                        ],
                        [
                            "t.bool()",
                            "Call"
                        ],
                        [
                            "pyro.sample('t', self.t_dist(x), obs=t, infer={'is_auxiliary': True})",
                            "Call"
                        ],
                        [
                            "t.bool()",
                            "Call"
                        ],
                        [
                            "t.bool().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "x": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_420": {
                "condition": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('t', self.t_dist(z), obs=t)",
                            "Call"
                        ],
                        [
                            "pyro.sample('t', self.t_dist(z), obs=t)",
                            "Call"
                        ],
                        [
                            "t.bool()",
                            "Call"
                        ],
                        [
                            "pyro.sample('t', self.t_dist(x), obs=t, infer={'is_auxiliary': True})",
                            "Call"
                        ],
                        [
                            "t.bool()",
                            "Call"
                        ],
                        [
                            "t.bool().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "x": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_431": {
                "condition": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('t', self.t_dist(z), obs=t)",
                            "Call"
                        ],
                        [
                            "pyro.sample('t', self.t_dist(z), obs=t)",
                            "Call"
                        ],
                        [
                            "t.bool()",
                            "Call"
                        ],
                        [
                            "pyro.sample('t', self.t_dist(x), obs=t, infer={'is_auxiliary': True})",
                            "Call"
                        ],
                        [
                            "t.bool()",
                            "Call"
                        ],
                        [
                            "t.bool().unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "x": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_625": {
                "dataset": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('x', self.x_dist(z), obs=x)",
                            "Call"
                        ],
                        [
                            "pyro.sample('x', self.x_dist(z), obs=x)",
                            "Call"
                        ],
                        [
                            "self.whiten(x)",
                            "Call"
                        ],
                        [
                            "dataloader",
                            "Name"
                        ],
                        [
                            "self.whiten(x)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_633": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_635": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/conjugate/infer.py": {
        "torch": {
            "stack_244": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/easyguide/easyguide.py": {
        "torch": {
            "numel_213": {
                "variable": {
                    "value": "site_event_numel",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_168": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "plate.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "init_value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/epidemiology/compartmental.py": {
        "torch": {
            "no_grad_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_660": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_782": {
                "variable": {
                    "value": "aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init[name] for name in self.compartments]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_734": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_828": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_tensors_820": {
                "variable": {
                    "value": "series",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*map(torch.as_tensor, series)",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_371": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_823": {
                "variable": {
                    "value": "samples[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "series",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.broadcast_tensors(*map(torch.as_tensor, series))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "time_dim - trace.nodes[name + '_0']['fn'].event_dim",
                            "BinOp"
                        ],
                        [
                            "particle_dims - curr[name].dim()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_825": {
                "variable": {
                    "value": "samples[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "series",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.broadcast_tensors(*map(torch.as_tensor, series))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_837": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1236": {
                "variable": {
                    "value": "samples[name + _haar]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[samples.pop(name + '_haar_split_0'), samples.pop(name + '_haar_split_1')]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "time_dim - trace.nodes[name + '_0']['fn'].event_dim",
                            "BinOp"
                        ],
                        [
                            "particle_dims - curr[name].dim()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_931": {
                "data": {
                    "value": "float(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_915": {
                "input": {
                    "value": "state[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "curr[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/epidemiology/distributions.py": {
        "torch": {
            "as_tensor_326": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R / N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_326": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_319": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R / k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_319": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/epidemiology/models.py": {
        "torch": {
            "cat_738": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rho0.unsqueeze(-1).expand(rho0.shape + (14,)), rho1.unsqueeze(-1).expand(rho1.shape + (7,)), rho2.unsqueeze(-1).expand(rho2.shape + (60,))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_952": {
                "variable": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rho0.unsqueeze(-1).expand(rho0.shape + (self.pre_obs_window,)), rho1.unsqueeze(-1).expand(rho1.shape + (self.post_obs_window,))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_1100": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.population",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_1205": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.population",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_938": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.0] * self.pre_obs_window + data",
                            "BinOp"
                        ],
                        [
                            "pad(data, (self.pre_obs_window, 0), value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pre_obs_window, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_755": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1211": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1212": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_685": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/epidemiology/util.py": {
        "torch": {
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_357": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_real.detach().round()",
                            "Call"
                        ],
                        [
                            "lb + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(-1) + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * _unsqueeze(min) - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * _unsqueeze(max) + 1 - x)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_358": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_real.detach().round()",
                            "Call"
                        ],
                        [
                            "lb + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(-1) + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * _unsqueeze(min) - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * _unsqueeze(max) + 1 - x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_373": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "arange_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - num_quant_bins // 2",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "arange_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 + num_quant_bins // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_376": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_real.detach().round()",
                            "Call"
                        ],
                        [
                            "lb + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(-1) + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * _unsqueeze(min) - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * _unsqueeze(max) + 1 - x)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_377": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_real.detach().round()",
                            "Call"
                        ],
                        [
                            "lb + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * min - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * max + 1 - x)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(-1) + q",
                            "BinOp"
                        ],
                        [
                            "torch.max(x, 2 * _unsqueeze(min) - 1 - x)",
                            "Call"
                        ],
                        [
                            "torch.min(x, 2 * _unsqueeze(max) + 1 - x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_20": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.max(tensor, min)",
                            "Call"
                        ],
                        [
                            "torch.min(tensor, max)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_23": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.max(tensor, min)",
                            "Call"
                        ],
                        [
                            "torch.min(tensor, max)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[lhs.expand(shape), rhs.expand(shape)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_184": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t, s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_319": {
                "variable": {
                    "value": "w16",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "W16",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1562511562511555e-07], [1.1562511562511557e-07, 1.04062604062604e-06, 4.16250416250416e-06, 9.712509712509707e-06, 1.456876456876456e-05, 1.4568764568764562e-05, 9.712509712509707e-06, 4.16250416250416e-06, 1.04062604062604e-06, -6.937506937506934e-07], [5.839068339068337e-05, 0.0002591158841158841, 0.0005036630036630038, 0.0005536130536130536, 0.00036421911421911425, 0.00013111888111888106, 9.712509712509736e-06, -1.2487512487512482e-05, -5.2031302031302014e-06, 1.6187516187516182e-06], [0.0018637612387612374, 0.004983558108558107, 0.005457042957042955, 0.0029234654234654212, 0.000568181818181818, -0.0001602564102564102, -8.741258741258739e-05, 4.162504162504162e-06, 9.365634365634364e-06, -1.7536475869809201e-06], [0.015560115039281694, 0.025703289765789755, 0.015009296259296255, 0.0023682336182336166, -0.000963966588966589, -0.00029380341880341857, 5.6656306656306665e-05, 1.5956265956265953e-05, -6.417193917193917e-06, 7.515632515632516e-07], [0.057450111616778265, 0.05790875790875791, 0.014424464424464418, -0.0030303030303030303, -0.0013791763791763793, 0.00011655011655011669, 5.180005180005181e-05, -8.325008325008328e-06, 3.4687534687534703e-07, 0.0], [0.12553422657589322, 0.072988122988123, -0.0011641136641136712, -0.006617456617456618, -0.00028651903651903725, 0.00027195027195027195, 3.2375032375032334e-06, -5.550005550005552e-06, 3.4687534687534703e-07, 0.0], [0.21761806865973532, 1.7482707128494565e-17, -0.028320290820290833, 0.0, 0.0014617327117327117, 0.0, -3.561253561253564e-05, 0.0, 3.4687534687534714e-07, 0.0]]",
                            "List"
                        ],
                        [
                            "numpy.array(W16)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_325": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[splines_t, splines_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_39": {
                "input": {
                    "value": "rhs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rhs.expand((1,) * diff + rhs.shape)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(0, 0) * (-1 - dim) + (1, 0)",
                            "BinOp"
                        ],
                        [
                            "(0, 0) * (-1 - dim) + (0, 1)",
                            "BinOp"
                        ],
                        [
                            "event_dim - particle_dim - value.dim()",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "lhs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lhs.expand((1,) * diff + lhs.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_42": {
                "input": {
                    "value": "lhs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lhs.expand((1,) * diff + lhs.shape)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(0, 0) * (-1 - dim) + (1, 0)",
                            "BinOp"
                        ],
                        [
                            "(0, 0) * (-1 - dim) + (0, 1)",
                            "BinOp"
                        ],
                        [
                            "event_dim - particle_dim - value.dim()",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "rhs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rhs.expand((1,) * diff + rhs.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_193": {
                "tensors": {
                    "value": "[t * tt, 4 + ss * (3 * s - 6), 4 + tt * (3 * t - 6), s * ss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_215": {
                "tensors": {
                    "value": "[2 * t5, 2 + 10 * t + 20 * tt + 20 * t3 + 10 * t4 - 7 * t5, 55 + 115 * t + 70 * tt - 9 * t3 - 25 * t4 + 7 * t5, 302 - 100 * ss + 10 * s4, 302 - 100 * tt + 10 * t4, 55 + 115 * s + 70 * ss - 9 * s3 - 25 * s4 + 7 * s5, 2 + 10 * s + 20 * ss + 20 * s3 + 10 * s4 - 7 * s5, 2 * s5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_244": {
                "tensors": {
                    "value": "[693 * t7, 693 + 4851 * t + 14553 * tt + 24255 * t3 + 24255 * t4 + 14553 * t5 + 4851 * t6 - 3267 * t7, 84744 + 282744 * t + 382536 * tt + 249480 * t3 + 55440 * t4 - 24948 * t5 - 18018 * t6 + 5445 * t7, 1017423 + 1823283 * t + 1058211 * tt + 51975 * t3 - 148995 * t4 - 18711 * t5 + 20097 * t6 - 3267 * t7, 3800016 + 3503808 * t + 365904 * tt - 443520 * t3 - 55440 * t4 + 33264 * t5 - 2772 * t6, 8723088 - 1629936 * ss + 110880.0 * s4 - 2772 * s6, 8723088 - 1629936 * tt + 110880.0 * t4 - 2772 * t6, 3800016 + 3503808 * s + 365904 * ss - 443520 * s3 - 55440 * s4 + 33264 * s5 - 2772 * s6, 1017423 + 1823283 * s + 1058211 * ss + 51975 * s3 - 148995 * s4 - 18711 * s5 + 20097 * s6 - 3267 * s7, 84744 + 282744 * s + 382536 * ss + 249480 * s3 + 55440 * s4 - 24948 * s5 - 18018 * s6 + 5445 * s7, 693 + 4851 * s + 14553 * ss + 24255 * s3 + 24255 * s4 + 14553 * s5 + 4851 * s6 - 3267 * s7, 693 * s7]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_320": {
                "start": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_321": {
                "start": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "data": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3, 4, 5, 6, 15, 7, 14, 13, 12, 11, 10, 9, 8]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/examples/bart.py": {
        "torch": {
            "empty_61": {
                "variable": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rows, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_rows",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((1 for _ in open(csv_filename)))",
                            "Call"
                        ],
                        [
                            "max_time - min_time + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "len(stations)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(stations)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_84": {
                "obj": {
                    "value": "dataset",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'basename': basename, 'start_date': start_date, 'stations': stations, 'rows': rows, 'schema': ['time_hours', 'origin', 'destin', 'trip_count']}",
                            "Dict"
                        ],
                        [
                            "datasets",
                            "Name"
                        ],
                        [
                            "{'stations': stations, 'start_date': start_date, 'counts': result}",
                            "Dict"
                        ],
                        [
                            "{'stations': ['12TH', 'EMBR', 'SFIA'], 'start_date': datetime.datetime.strptime('2000-01-01', '%Y-%m-%d'), 'counts': torch.distributions.Poisson(100).sample([24 * 7 * 8, 3, 3])}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(DATA, basename.replace('.csv.gz', '.pkl'))",
                            "Call"
                        ],
                        [
                            "os.path.join(DATA, 'bart_full.pkl.bz2')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "part_to_whole",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(stations.index, part_stations))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "dataset",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{'basename': basename, 'start_date': start_date, 'stations': stations, 'rows': rows, 'schema': ['time_hours', 'origin', 'destin', 'trip_count']}",
                            "Dict"
                        ],
                        [
                            "datasets",
                            "Name"
                        ],
                        [
                            "{'stations': stations, 'start_date': start_date, 'counts': result}",
                            "Dict"
                        ],
                        [
                            "{'stations': ['12TH', 'EMBR', 'SFIA'], 'start_date': datetime.datetime.strptime('2000-01-01', '%Y-%m-%d'), 'counts': torch.distributions.Poisson(100).sample([24 * 7 * 8, 3, 3])}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "pkl_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filename.rsplit('.', 1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_123": {
                "f": {
                    "value": "pkl_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filename.rsplit('.', 1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Poisson_171": {
                "rate": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/examples/nextstrain.py": {
        "torch": {
            "load_44": {
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gz_filename.replace('.gz', '')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_43": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/examples/polyphonic_data_loader.py": {
        "torch": {
            "zeros_like_120": {
                "variable": {
                    "value": "reversed_mini_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequences[sorted_mini_batch_indices, 0:T_max, :]",
                            "Subscript"
                        ],
                        [
                            "mini_batch.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_132": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch.shape[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_155": {
                "variable": {
                    "value": "(_, sorted_seq_length_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq_lengths[mini_batch_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_161": {
                "variable": {
                    "value": "T_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq_lengths[mini_batch_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_176": {
                "variable": {
                    "value": "mini_batch_reversed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch_reversed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "reverse_sequences(mini_batch, sorted_seq_lengths)",
                            "Call"
                        ],
                        [
                            "mini_batch_reversed.cuda()",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(mini_batch_reversed, sorted_seq_lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_seq_lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq_lengths[sorted_seq_length_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "processed_dataset[split][sequence_lengths]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_seqs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(data_split)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_123": {
                "variable": {
                    "value": "time_slice",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "mini_batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_124": {
                "variable": {
                    "value": "reversed_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "time_slice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(T - 1, -1, -1, device=mini_batch.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_142": {
                "variable": {
                    "value": "mask[b, 0:seq_lengths[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_lengths[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "processed_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seq_length, note_range)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_sequence_108": {
                "variable": {
                    "value": "dset[k][sequences]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sequences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v['sequences']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "processed_sequence[t, note_slice]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "slice_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(note_slice)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_84": {
                "data": {
                    "value": "list(data_split[seq][t])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/examples/scanvi_data.py": {
        "torch": {
            "from_numpy_204": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seed_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-np.ones(cd4_mem_mask.shape[0])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse.csr_matrix.todense(adata.X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labeled, unlabeled]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "variable": {
                    "value": "batch_order",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Poisson_117": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_216": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_217": {
                "condition": {
                    "value": "Y != -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_218": {
                "condition": {
                    "value": "Y == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_31": {
                "condition": {
                    "value": "data_y == missing_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_35": {
                "condition": {
                    "value": "data_y != missing_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randperm_51": {
                "n": {
                    "value": "self.num_unlabeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_52": {
                "n": {
                    "value": "self.num_labeled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_219": {
                "n": {
                    "value": "unlabeled.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_73": {
                "tensor": {
                    "value": "self.data_y[_slice[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/examples/util.py": {
        "torch": {
            "DataLoader_36": {
                "dataset": {
                    "value": "dset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset(root=data_dir, train=is_training_set, transform=trans, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/forecast/evaluate.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/forecast/forecaster.py": {
        "torch": {
            "ones_525": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_526": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(self._num_samples, device=data.device)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_samples - batch_size",
                            "BinOp"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "replacement": {
                    "value": "num_samples > self._num_samples",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_372": {
                "tensors": {
                    "value": "batches",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_519": {
                "tensors": {
                    "value": "batches",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/forecast/util.py": {
        "torch": {
            "cat_109": {
                "variable": {
                    "value": "new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[old, new[index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "frame.dim - msg['fn'].event_dim",
                            "BinOp"
                        ],
                        [
                            "frame.dim - msg['fn'].event_dim",
                            "BinOp"
                        ],
                        [
                            "t.event_dim",
                            "Attribute"
                        ],
                        [
                            "range(new.dim())",
                            "Call"
                        ],
                        [
                            "range(model_value.dim())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "msg[value]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[guide_value, model_value[index]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "frame.dim - msg['fn'].event_dim",
                            "BinOp"
                        ],
                        [
                            "frame.dim - msg['fn'].event_dim",
                            "BinOp"
                        ],
                        [
                            "t.event_dim",
                            "Attribute"
                        ],
                        [
                            "range(new.dim())",
                            "Call"
                        ],
                        [
                            "range(model_value.dim())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/funsor/handlers/enum_messenger.py": {
        "torch": {
            "zeros_123": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/funsor/handlers/trace_messenger.py": {
        "torch": {
            "as_tensor_15": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/gp/kernels/brownian.py": {
        "torch": {
            "where_46": {
                "condition": {
                    "value": "X.sign() == Zt.sign()",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.variance * torch.min(X.abs(), Zt.abs())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "X.data.new_zeros(X.size(0), Z.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_48": {
                "input": {
                    "value": "X.abs()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/kernels/coregionalize.py": {
        "torch": {
            "Parameter_65": {
                "variable": {
                    "value": "self.components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(input_dim, rank) * (0.5 / rank) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_56": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dim if rank is None else rank",
                            "IfExp"
                        ],
                        [
                            "components.size(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/gp/kernels/dot_product.py": {
        "torch": {
            "tensor_19": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/kernels/isotropic.py": {
        "torch": {
            "tensor_115": {
                "variable": {
                    "value": "scale_mixture",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_90": {
                "input": {
                    "value": "-0.5 * r2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_143": {
                "input": {
                    "value": "-r",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_163": {
                "input": {
                    "value": "-sqrt3_r",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_184": {
                "input": {
                    "value": "-sqrt5_r",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/kernels/periodic.py": {
        "torch": {
            "cos_31": {
                "input": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._scaled_dist(X, Z)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_56": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_77": {
                "input": {
                    "value": "math.pi * d / self.period",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_78": {
                "input": {
                    "value": "-2 * (scaled_sin ** 2).sum(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/kernels/static.py": {
        "torch": {
            "tensor_21": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/likelihoods/binary.py": {
        "torch": {}
    },
    "pyro/contrib/gp/likelihoods/gaussian.py": {
        "torch": {
            "tensor_26": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/likelihoods/multi_class.py": {
        "torch": {
            "softmax_12": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/likelihoods/poisson.py": {
        "torch": {}
    },
    "pyro/contrib/gp/models/gpr.py": {
        "torch": {
            "cholesky_89": {
                "variable": {
                    "value": "Lff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kernel(self.X)",
                            "Call"
                        ],
                        [
                            "self.kernel(self.X).contiguous()",
                            "Call"
                        ],
                        [
                            "self.kernel(X).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_136": {
                "variable": {
                    "value": "Lff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kernel(self.X)",
                            "Call"
                        ],
                        [
                            "self.kernel(self.X).contiguous()",
                            "Call"
                        ],
                        [
                            "self.kernel(X).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_200": {
                "variable": {
                    "value": "Lff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kernel(self.X)",
                            "Call"
                        ],
                        [
                            "self.kernel(self.X).contiguous()",
                            "Call"
                        ],
                        [
                            "self.kernel(X).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_210": {
                "variable": {
                    "value": "ynew",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc + self.mean_function(xnew)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "cov.sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "outside_vars[X]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, xnew)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "outside_vars[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, ynew)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/models/model.py": {
        "torch": {}
    },
    "pyro/contrib/gp/models/sgpr.py": {
        "torch": {
            "Parameter_115": {
                "variable": {
                    "value": "self.Xu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Xu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cholesky_147": {
                "variable": {
                    "value": "Luu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kuu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kernel(self.Xu).contiguous()",
                            "Call"
                        ],
                        [
                            "self.kernel(self.Xu).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_triangular_149": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "Luu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(Kuu)",
                            "Call"
                        ],
                        [
                            "torch.linalg.cholesky(Kuu)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "Kuf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kernel(self.Xu, self.X)",
                            "Call"
                        ],
                        [
                            "self.kernel(self.Xu, self.X)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_149": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cholesky_226": {
                "variable": {
                    "value": "Luu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kuu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kernel(self.Xu).contiguous()",
                            "Call"
                        ],
                        [
                            "self.kernel(self.Xu).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_triangular_230": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "Luu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(Kuu)",
                            "Call"
                        ],
                        [
                            "torch.linalg.cholesky(Kuu)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "Kuf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.kernel(self.Xu, self.X)",
                            "Call"
                        ],
                        [
                            "self.kernel(self.Xu, self.X)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cholesky_240": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W_Dinv.matmul(W.t()).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_triangular_250": {
                "variable": {
                    "value": "Ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "Luu",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(Kuu)",
                            "Call"
                        ],
                        [
                            "torch.linalg.cholesky(Kuu)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "Kus",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(self.Xu, Xnew)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(W_Dinv_y, Ws)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_triangular_252": {
                "variable": {
                    "value": "Linv_pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "L",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "pack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((W_Dinv_y, Ws), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/gp/models/vgp.py": {
        "torch": {
            "Parameter_90": {
                "variable": {
                    "value": "self.f_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "f_loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.X.new_zeros(self.latent_shape + (N,))",
                            "Call"
                        ],
                        [
                            "Lff.matmul(self.f_loc.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.f_loc",
                            "Attribute"
                        ],
                        [
                            "f_loc + self.mean_function(self.X)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cholesky_106": {
                "variable": {
                    "value": "Lff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(self.X).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/gp/models/vsgp.py": {
        "torch": {
            "Parameter_109": {
                "variable": {
                    "value": "self.Xu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Xu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.u_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "u_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Xu.new_zeros(self.latent_shape + (M,))",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_133": {
                "variable": {
                    "value": "Luu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kuu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(self.Xu).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/gp/parameterized.py": {
        "torch": {
            "Parameter_155": {
                "variable": {
                    "value": "p_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "biject_to(self._priors[name].support).inv(p).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_167": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "biject_to(self._priors[name].support).inv(p).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inv_161": {
                "A": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._priors[name]()",
                            "Call"
                        ]
                    ]
                }
            },
            "inv_167": {
                "A": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._priors[name]()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/gp/util.py": {
        "torch": {
            "cholesky_95": {
                "variable": {
                    "value": "Lff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel(X).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_triangular_110": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "Lff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(Kff)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "B": {
                    "value": "Kfs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel(X, Xnew)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_110": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f_loc_2D, Kfs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_triangular_118": {
                "variable": {
                    "value": "Lffinv_pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "Lff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(Kff)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "B": {
                    "value": "pack",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((f_loc_2D, Kfs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((pack, f_scale_tril_2D), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pack, f_scale_tril_2D)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_177": {
                "params": {
                    "value": "gpmodule.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/minipyro.py": {
        "torch": {
            "manual_seed_129": {
                "seed": {
                    "value": "self.rng_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_rng_state_134": {
                "new_state": {
                    "value": "self.old_state['torch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_318": {
                "variable": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ]
                    ]
                }
            },
            "get_rng_state_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inv_227": {
                "variable": {
                    "value": "unconstrained_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "constrained_value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.distributions.transform_to(constraint)(unconstrained_value)",
                            "Call"
                        ],
                        [
                            "init_value.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_284": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[param]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trace_401": {
                "variable": {
                    "value": "self._compiled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "compiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/mue/dataloaders.py": {
        "torch": {
            "cat_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, torch.zeros(list(x.shape[:2]) + [1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([x, torch.zeros(list(x.shape[:2]) + [1])], -1)",
                            "Call"
                        ],
                        [
                            "x * (1 - mask).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([oh, torch.zeros([length - len(seq), len(alphabet)], device=self.device)])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.arange(x.shape[-1], dtype=torch.double)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "self.L_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(len(seq)) for seq in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(0.0).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "self.seq_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._one_hot(seq, alphabet, self.max_length).unsqueeze(0) for seq in seqs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "oh",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(np.array(list(seq))[:, None] == alphabet[None, :]).astype(np.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[oh, torch.zeros([length - len(seq), len(alphabet)], device=self.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "*size": {
                    "value": "list(x.shape[:2]) + [1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_83": {
                "input": {
                    "value": "self.L_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "*size": {
                    "value": "[length - len(seq), len(alphabet)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_167": {
                "input": {
                    "value": "torch.matmul(x, torch.tensor(print_alphabet == '*', dtype=torch.double))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_178": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([x, torch.zeros(list(x.shape[:2]) + [1])], -1)",
                            "Call"
                        ],
                        [
                            "x * (1 - mask).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([oh, torch.zeros([length - len(seq), len(alphabet)], device=self.device)])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([x, torch.zeros(list(x.shape[:2]) + [1])], -1)",
                            "Call"
                        ],
                        [
                            "x * (1 - mask).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([oh, torch.zeros([length - len(seq), len(alphabet)], device=self.device)])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(print_alphabet == '*', dtype=torch.double)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "print_alphabet == '*'",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_180": {
                "start": {
                    "value": "x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/mue/missingdatahmm.py": {
        "torch": {
            "matmul_100": {
                "variable": {
                    "value": "value_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(self.observation_logits, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "OneHotCategorical_128": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.initial_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(initial_logits.shape[:-1], transition_logits.shape[:-2], observation_logits.shape[:-2])",
                            "Call"
                        ],
                        [
                            "torch.Size([1])",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(sample_shape) + [1]), torch.Size((1, 1, self.event_shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(list(self.batch_shape) + [1, 1], list(states.shape[:-1]) + [1, 1], [1, 1, self.observation_logits.shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(initial_logits.shape[:-1], transition_logits.shape[:-2], observation_logits.shape[:-2])",
                            "Call"
                        ],
                        [
                            "torch.Size([1])",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(sample_shape) + [1]), torch.Size((1, 1, self.event_shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(list(self.batch_shape) + [1, 1], list(states.shape[:-1]) + [1, 1], [1, 1, self.observation_logits.shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_167": {
                "variable": {
                    "value": "value_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(self.observation_logits, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "backfilter",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(initial_logits.shape[:-1], transition_logits.shape[:-2], observation_logits.shape[:-2])",
                            "Call"
                        ],
                        [
                            "torch.Size([1])",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(sample_shape) + [1]), torch.Size((1, 1, self.event_shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(list(self.batch_shape) + [1, 1], list(states.shape[:-1]) + [1, 1], [1, 1, self.observation_logits.shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_204": {
                "variable": {
                    "value": "value_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(self.observation_logits, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_233": {
                "variable": {
                    "value": "states[..., -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "filter[..., -1, :]",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(shape)",
                            "Call"
                        ],
                        [
                            "self.filter(value)",
                            "Call"
                        ],
                        [
                            "self.filter(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "state_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(initial_logits.shape[:-1], transition_logits.shape[:-2], observation_logits.shape[:-2])",
                            "Call"
                        ],
                        [
                            "torch.Size([1])",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(sample_shape) + [1]), torch.Size((1, 1, self.event_shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(list(self.batch_shape) + [1, 1], list(states.shape[:-1]) + [1, 1], [1, 1, self.observation_logits.shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "state_traceback",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(initial_logits.shape[:-1], transition_logits.shape[:-2], observation_logits.shape[:-2])",
                            "Call"
                        ],
                        [
                            "torch.Size([1])",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(sample_shape) + [1]), torch.Size((1, 1, self.event_shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(list(self.batch_shape) + [1, 1], list(states.shape[:-1]) + [1, 1], [1, 1, self.observation_logits.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_266": {
                "variable": {
                    "value": "value_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(self.observation_logits, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "map_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_283": {
                "variable": {
                    "value": "map_states[..., -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "state_logits[..., -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_305": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(state.unsqueeze(-2), self.observation_logits).squeeze(-2)",
                            "Call"
                        ],
                        [
                            "self.observation_logits * torch.ones(shape)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "states_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "states.unsqueeze(-1) * torch.ones(shape, dtype=torch.long)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "obs_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.observation_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "obs_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "OneHotCategorical_137": {
                "variable": {
                    "value": "sample[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "obs_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(state.unsqueeze(-2), self.observation_logits).squeeze(-2)",
                            "Call"
                        ],
                        [
                            "self.observation_logits * torch.ones(shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_140": {
                "variable": {
                    "value": "trans_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.transition_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "trans_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "OneHotCategorical_143": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "trans_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(state.unsqueeze(-2), self.transition_logits).squeeze(-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_180": {
                "variable": {
                    "value": "filter[..., i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "filter[..., i - 1, :, None] + result[..., i - 1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_211": {
                "variable": {
                    "value": "backfilter[..., i - 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "backfilter[..., i, None, :] + result[..., i - 1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_235": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint[..., i - 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "states[..., i, None, None] * torch.ones([shape[-1], 1], dtype=torch.long)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_235": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_241": {
                "variable": {
                    "value": "states[..., i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(joint[..., i - 1, :, :], -1, states[..., i, None, None] * torch.ones([shape[-1], 1], dtype=torch.long)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(obs_logits, -2, states_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_278": {
                "variable": {
                    "value": "(state_logits[..., i, :], state_traceback[..., i, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "transit_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state_logits[..., i - 1, :, None] + result[..., i - 1, :, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_285": {
                "variable": {
                    "value": "map_states[..., i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "state_traceback[..., i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "map_states[..., i].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_285": {
                "variable": {
                    "value": "map_states[..., i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "OneHotCategorical_306": {
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(joint[..., i - 1, :, :], -1, states[..., i, None, None] * torch.ones([shape[-1], 1], dtype=torch.long)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(obs_logits, -2, states_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_101": {
                "input": {
                    "value": "self.observation_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_168": {
                "input": {
                    "value": "self.observation_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_176": {
                "input": {
                    "value": "filter[..., 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_205": {
                "input": {
                    "value": "self.observation_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_217": {
                "input": {
                    "value": "smooth",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "filter + backfilter",
                            "BinOp"
                        ],
                        [
                            "smooth - torch.logsumexp(smooth, -1, True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_267": {
                "input": {
                    "value": "self.observation_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_303": {
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(initial_logits.shape[:-1], transition_logits.shape[:-2], observation_logits.shape[:-2])",
                            "Call"
                        ],
                        [
                            "torch.Size([1])",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(sample_shape) + [1]), torch.Size((1, 1, self.event_shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(list(self.batch_shape) + [1, 1], list(states.shape[:-1]) + [1, 1], [1, 1, self.observation_logits.shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_304": {
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(initial_logits.shape[:-1], transition_logits.shape[:-2], observation_logits.shape[:-2])",
                            "Call"
                        ],
                        [
                            "torch.Size([1])",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(sample_shape) + [1]), torch.Size((1, 1, self.event_shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "filter.shape",
                            "Attribute"
                        ],
                        [
                            "broadcast_shape(torch.Size(list(self.batch_shape) + [1, 1]), torch.Size(list(value.shape[:-1]) + [1]), torch.Size((1, 1, self.initial_logits.shape[-1])))",
                            "Call"
                        ],
                        [
                            "broadcast_shape(list(self.batch_shape) + [1, 1], list(states.shape[:-1]) + [1, 1], [1, 1, self.observation_logits.shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_183": {
                "input": {
                    "value": "filter[..., i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_239": {
                "*size": {
                    "value": "[shape[-1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/mue/models.py": {
        "torch": {
            "tensor_74": {
                "variable": {
                    "value": "self.indel_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[indel_prior_bias, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "dataload",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "torch.Generator(device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "dataload_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.f1_mn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.f1_sd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_322": {
                "variable": {
                    "value": "z_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f1_sd(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_431": {
                "variable": {
                    "value": "self.indel_prior_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "indel_prior_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_433": {
                "variable": {
                    "value": "self.indel_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[indel_prior_bias, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "variable": {
                    "value": "self.inverse_temp_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "inverse_temp_prior",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_437": {
                "variable": {
                    "value": "self.weights_prior_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights_prior_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_439": {
                "variable": {
                    "value": "self.offset_prior_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "offset_prior_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_441": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_443": {
                "variable": {
                    "value": "self.substitution_prior_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "substitution_prior_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_727": {
                "variable": {
                    "value": "dataload",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "torch.Generator(device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_784": {
                "variable": {
                    "value": "dataload_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_855": {
                "variable": {
                    "value": "dataload",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_209": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_211": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "dataload_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_501": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_724": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_726": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_772": {
                "data": {
                    "value": "min([anneal_frac, 1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_786": {
                "variable": {
                    "value": "dataload_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "self.precursor_seq_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "self.precursor_seq_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "self.insert_seq_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "*size": {
                    "value": "self.insert_seq_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_457": {
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('latent', dist.Normal(torch.zeros(self.z_dim), torch.ones(self.z_dim)).to_event(1))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent', dist.Laplace(torch.zeros(self.z_dim), torch.ones(self.z_dim)).to_event(1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('W', dist.Normal(torch.zeros([self.z_dim, self.total_factor_size]), torch.ones([self.z_dim, self.total_factor_size]) * self.weights_prior_scale / (alpha[:, None] + self.epsilon)).to_event(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_627": {
                "*size": {
                    "value": "[self.z_dim, self.total_factor_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_628": {
                "*size": {
                    "value": "[self.z_dim, self.total_factor_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_630": {
                "*size": {
                    "value": "self.total_factor_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_631": {
                "*size": {
                    "value": "self.total_factor_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_652": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_653": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_770": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_820": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_856": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_865": {
                "tensors": {
                    "value": "z_scales",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_869": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_876": {
                "input": {
                    "value": "decoded['precursor_seq_logits']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_158": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Generator_219": {
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_542": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_620": {
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_621": {
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_639": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_646": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_655": {
                "input": {
                    "value": "inverse_temp_q_sd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('inverse_temp_q_sd', torch.tensor(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_662": {
                "*size": {
                    "value": "[self.latent_alphabet_length, self.alphabet_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_666": {
                "*size": {
                    "value": "[self.latent_alphabet_length, self.alphabet_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Generator_732": {
                "device": {
                    "value": "device",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_738": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_791": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "data": {
                    "value": "len(dataset) / seq_data.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_478": {
                "input": {
                    "value": "inverse_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('inverse_temp', dist.Normal(self.inverse_temp_prior, torch.tensor(1.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_484": {
                "input": {
                    "value": "inverse_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('inverse_temp', dist.Normal(self.inverse_temp_prior, torch.tensor(1.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_637": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_644": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_757": {
                "data": {
                    "value": "len(dataset) / seq_data.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_827": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "self.precursor_seq_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "self.insert_seq_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_143": {
                "input": {
                    "value": "precursor_seq_q_sd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('precursor_seq_q_sd', torch.zeros(self.precursor_seq_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_153": {
                "input": {
                    "value": "insert_seq_q_sd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('insert_seq_q_sd', torch.zeros(self.insert_seq_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_163": {
                "input": {
                    "value": "insert_q_sd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('insert_q_sd', torch.zeros(self.indel_shape))",
                            "Call"
                        ],
                        [
                            "pyro.param('insert_q_sd', torch.zeros(self.indel_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_171": {
                "input": {
                    "value": "delete_q_sd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('delete_q_sd', torch.zeros(self.indel_shape))",
                            "Call"
                        ],
                        [
                            "pyro.param('delete_q_sd', torch.zeros(self.indel_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_507": {
                "*size": {
                    "value": "[self.z_dim, self.total_factor_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_516": {
                "*size": {
                    "value": "self.total_factor_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_629": {
                "input": {
                    "value": "W_q_sd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('W_q_sd', torch.ones([self.z_dim, self.total_factor_size]))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_632": {
                "input": {
                    "value": "B_q_sd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('B_q_sd', torch.ones(self.total_factor_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_86": {
                "*size": {
                    "value": "self.precursor_seq_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "self.insert_seq_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_104": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_111": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_112": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_498": {
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_517": {
                "*size": {
                    "value": "self.total_factor_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_550": {
                "*size": {
                    "value": "[self.latent_alphabet_length, self.alphabet_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_624": {
                "input": {
                    "value": "alpha_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('alpha_rate', torch.randn(self.z_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_641": {
                "input": {
                    "value": "insert_q_sd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('insert_q_sd', torch.zeros(self.indel_shape))",
                            "Call"
                        ],
                        [
                            "pyro.param('insert_q_sd', torch.zeros(self.indel_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_648": {
                "input": {
                    "value": "delete_q_sd",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('delete_q_sd', torch.zeros(self.indel_shape))",
                            "Call"
                        ],
                        [
                            "pyro.param('delete_q_sd', torch.zeros(self.indel_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_670": {
                "input": {
                    "value": "substitute_q_sd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('substitute_q_sd', torch.zeros([self.latent_alphabet_length, self.alphabet_length]))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_508": {
                "*size": {
                    "value": "[self.z_dim, self.total_factor_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_526": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_527": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_534": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_535": {
                "*size": {
                    "value": "self.indel_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_552": {
                "*size": {
                    "value": "[self.latent_alphabet_length, self.alphabet_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_564": {
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_564": {
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_571": {
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_571": {
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/mue/statearrangers.py": {
        "torch": {
            "cat_192": {
                "variable": {
                    "value": "seq_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[precursor_seq_logits, insert_seq_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_196": {
                "variable": {
                    "value": "observation_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_logits.unsqueeze(-1) + substitute_logits.unsqueeze(-3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "(M, 3, 2, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "(M, 3, 2, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "(K,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "(M, 3, 2, K, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "(M, 3, 2, K, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "(K, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "(M, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "*size": {
                    "value": "(M + 1, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_174": {
                "equation": {
                    "value": "...ijk,ijkl->...l",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "delete_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_175": {
                "equation": {
                    "value": "...ijk,ijkl->...l",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "insert_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_179": {
                "equation": {
                    "value": "...ijk,ijklf->...lf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "delete_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_180": {
                "equation": {
                    "value": "...ijk,ijklf->...lf",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "insert_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/oed/eig.py": {
        "torch": {
            "max_919": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T_independent - math.log(num_particles)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_372": {
                "input": {
                    "value": "terms",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "conditional_lp - marginal_lp",
                            "BinOp"
                        ],
                        [
                            "-sum((cond_trace.nodes[l]['log_prob'] for l in target_labels))",
                            "UnaryOp"
                        ],
                        [
                            "-sum((cond_trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "UnaryOp"
                        ],
                        [
                            "terms + sum((trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "BinOp"
                        ],
                        [
                            "-sum((marginal_trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "UnaryOp"
                        ],
                        [
                            "torch.nn.functional.softplus(-h_joint) + torch.nn.functional.softplus(h_independent)",
                            "BinOp"
                        ],
                        [
                            "-sum((guide_trace.nodes[l]['log_prob'] for l in target_labels))",
                            "UnaryOp"
                        ],
                        [
                            "-terms.logsumexp(0) + math.log(M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_853": {
                "input": {
                    "value": "agg_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-loss.sum()",
                            "UnaryOp"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_1151": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_866": {
                "tensors": {
                    "value": "history",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "isnan_1131": {
                "input": {
                    "value": "terms",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "conditional_lp - marginal_lp",
                            "BinOp"
                        ],
                        [
                            "-sum((cond_trace.nodes[l]['log_prob'] for l in target_labels))",
                            "UnaryOp"
                        ],
                        [
                            "-sum((cond_trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "UnaryOp"
                        ],
                        [
                            "terms + sum((trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "BinOp"
                        ],
                        [
                            "-sum((marginal_trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "UnaryOp"
                        ],
                        [
                            "torch.nn.functional.softplus(-h_joint) + torch.nn.functional.softplus(h_independent)",
                            "BinOp"
                        ],
                        [
                            "-sum((guide_trace.nodes[l]['log_prob'] for l in target_labels))",
                            "UnaryOp"
                        ],
                        [
                            "-terms.logsumexp(0) + math.log(M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_1072": {
                "input": {
                    "value": "-h_joint",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_1074": {
                "input": {
                    "value": "h_independent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h(expanded_design, model_marginal_trace, observation_labels, target_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_371": {
                "input": {
                    "value": "terms",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "conditional_lp - marginal_lp",
                            "BinOp"
                        ],
                        [
                            "-sum((cond_trace.nodes[l]['log_prob'] for l in target_labels))",
                            "UnaryOp"
                        ],
                        [
                            "-sum((cond_trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "UnaryOp"
                        ],
                        [
                            "terms + sum((trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "BinOp"
                        ],
                        [
                            "-sum((marginal_trace.nodes[l]['log_prob'] for l in observation_labels))",
                            "UnaryOp"
                        ],
                        [
                            "torch.nn.functional.softplus(-h_joint) + torch.nn.functional.softplus(h_independent)",
                            "BinOp"
                        ],
                        [
                            "-sum((guide_trace.nodes[l]['log_prob'] for l in target_labels))",
                            "UnaryOp"
                        ],
                        [
                            "-terms.logsumexp(0) + math.log(M)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_1199": {
                "input": {
                    "value": "self.s - s",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/oed/glmm/glmm.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2 ** (-24)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_421": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prior_cov.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_436": {
                "variable": {
                    "value": "participant_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_443": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X1, X2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X, participant_matrix.expand(n_designs, n, n)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_468": {
                "tensors": {
                    "value": "expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[w.expand(target + (w.shape[-1],)) for w in ws]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_377": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pyro.param('invsoftplus_alpha', 20.0 * torch.ones(tau_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_380": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pyro.param('invsoftplus_beta', 20.0 * torch.ones(tau_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_459": {
                "input": {
                    "value": "SigmaXX + obs_sd ** 2 * torch.eye(p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_459": {
                "input": {
                    "value": "SigmaXX.mm(prior_cov)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_420": {
                "input": {
                    "value": "design",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_439": {
                "data": {
                    "value": "[i, n // 2 - i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "data": {
                    "value": "[n // 2 - i, i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_tensors_466": {
                "*tensors": {
                    "value": "*(w[..., 0] for w in ws)",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_158": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_290": {
                "input": {
                    "value": "tau",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('tau', tau_prior)",
                            "Call"
                        ],
                        [
                            "pyro.sample('tau', tau_prior)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_314": {
                "input": {
                    "value": "pyro.sample('G_' + name, G_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_386": {
                "input": {
                    "value": "tau",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('tau', tau_prior)",
                            "Call"
                        ],
                        [
                            "pyro.sample('tau', tau_prior)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_394": {
                "*size": {
                    "value": "w_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tau_shape + size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_397": {
                "n": {
                    "value": "*size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AffineTransform_338": {
                "loc": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "k",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample(sigmoid_label, dist.Gamma(sigmoid_alpha.expand(k_shape), sigmoid_beta.expand(k_shape)).to_event(1))",
                            "Call"
                        ],
                        [
                            "k.expand(prediction_mean.shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SigmoidTransform_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_378": {
                "*size": {
                    "value": "tau_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "design.shape[:-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_381": {
                "*size": {
                    "value": "tau_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "design.shape[:-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_460": {
                "n": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prior_cov.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_338": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/oed/glmm/guides.py": {
        "torch": {
            "ParameterDict_53": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{l: nn.Parameter(regressor_init * torch.ones(*d + (p, sum(y_sizes.values())))) for (l, p) in w_sizes.items()}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ParameterDict_61": {
                "variable": {
                    "value": "self.scale_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{l: nn.Parameter(scale_tril_init * lexpand(torch.eye(p), *d)) for (l, p) in w_sizes.items()}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "Softplus_69": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(y_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ParameterDict_116": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(H, -1).reshape(*x.shape + event_shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "*x.shape + event_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.inverse_sigmoid_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_221": {
                "variable": {
                    "value": "self.h1_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_222": {
                "variable": {
                    "value": "self.h1_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(y_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_251": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha_init * torch.ones(d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_252": {
                "variable": {
                    "value": "self.b0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b0_init * torch.ones(d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(y_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "mu_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(mu.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.means[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "mu_l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cholesky_183": {
                "variable": {
                    "value": "self.scale_trils[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "cov_l.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_183": {
                "variable": {
                    "value": "self.scale_trils[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_131": {
                "outputs": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(list(y_dict.values()), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(list(y_dict.values()), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(list(y_dict.values()), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_220": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_221": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "data": {
                    "value": "regressor_init * torch.ones(*d + (p, sum(y_sizes.values())))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "data": {
                    "value": "scale_tril_init * lexpand(torch.eye(p), *d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "data": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_155": {
                "outputs": {
                    "value": "[dyi]",
                    "type": "List",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "[torch.ones_like(dyi)]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_251": {
                "*size": {
                    "value": "d",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(d,)",
                            "Tuple"
                        ],
                        [
                            "(d,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ones_252": {
                "*size": {
                    "value": "d",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(d,)",
                            "Tuple"
                        ],
                        [
                            "(d,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "ones_56": {
                "*size": {
                    "value": "*d + (p, sum(y_sizes.values()))",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "*d + (sum(w_sizes.values()),)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "eye_63": {
                "n": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_160": {
                "input": {
                    "value": "dyi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "flat_dy.index_select(-1, torch.tensor([i]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/oed/util.py": {
        "torch": {
            "cat_19": {
                "variable": {
                    "value": "w_sd",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(model.w_sds.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_20": {
                "variable": {
                    "value": "prior_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_sd ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5 * torch.logdet(2 * math.pi * math.e * C) for C in target_posterior_covs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unbind_24": {
                "input": {
                    "value": "design.reshape(-1, design_shape[-2], design_shape[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logdet_31": {
                "input": {
                    "value": "2 * math.pi * math.e * C",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/randomvariable/random_variable.py": {
        "torch": {}
    },
    "pyro/contrib/timeseries/gp.py": {
        "torch": {
            "MultivariateNormal_92": {
                "variable": {
                    "value": "trans_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.obs_matrix.new_zeros(self.obs_dim, 1, self.kernel.state_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "process_covar.unsqueeze(-3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_233": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.3 * torch.randn(self.num_gps, self.obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_271": {
                "variable": {
                    "value": "trans_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.A.new_zeros(self.full_state_dim)",
                            "Call"
                        ],
                        [
                            "self.A.new_zeros(self.obs_dim)",
                            "Call"
                        ],
                        [
                            "self.A.new_zeros(self.full_state_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "process_covar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "block_diag_embed(process_covar)",
                            "Call"
                        ],
                        [
                            "block_diag_embed(process_covar)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_315": {
                "variable": {
                    "value": "trans_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "block_diag_embed(trans_mat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "obs_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[1.0] + [0.0] * (self.kernel.state_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.full_state_dim, obs_dim)",
                            "Call"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_316": {
                "variable": {
                    "value": "predicted_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtering_state.loc.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "trans_obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(trans_mat, obs_matrix)",
                            "Call"
                        ],
                        [
                            "torch.matmul(trans_matrix, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_316": {
                "variable": {
                    "value": "predicted_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_319": {
                "variable": {
                    "value": "predicted_function_covar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_obs.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(filtering_state.covariance_matrix, trans_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_451": {
                "variable": {
                    "value": "wiener_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chol",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.wiener_noise_tril",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "chol.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_451": {
                "variable": {
                    "value": "wiener_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_535": {
                "variable": {
                    "value": "trans_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "trans_matrix.unsqueeze(-3)",
                            "Call"
                        ],
                        [
                            "trans_matrix[..., 0:1]",
                            "Subscript"
                        ],
                        [
                            "block_diag_embed(trans_matrix)",
                            "Call"
                        ],
                        [
                            "self.kernel.transition_matrix(dt=dts)",
                            "Call"
                        ],
                        [
                            "block_diag_embed(trans_matrix)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "obs_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[1.0] + [0.0] * (self.kernel.state_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.full_state_dim, obs_dim)",
                            "Call"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_537": {
                "variable": {
                    "value": "predicted_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtering_state.loc.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "trans_obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(trans_mat, obs_matrix)",
                            "Call"
                        ],
                        [
                            "torch.matmul(trans_matrix, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_537": {
                "variable": {
                    "value": "predicted_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultivariateNormal_69": {
                "loc": {
                    "value": "self.obs_matrix.new_zeros(self.obs_dim, self.kernel.state_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.kernel.stationary_covariance().squeeze(-3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_168": {
                "loc": {
                    "value": "predicted_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_matrix).squeeze(-2)[..., 0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_obs).squeeze(-2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_obs).squeeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "predicted_covar.sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_250": {
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.A.new_zeros(self.full_state_dim)",
                            "Call"
                        ],
                        [
                            "self.A.new_zeros(self.obs_dim)",
                            "Call"
                        ],
                        [
                            "self.A.new_zeros(self.full_state_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "self._stationary_covariance()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_353": {
                "loc": {
                    "value": "predicted_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_matrix).squeeze(-2)[..., 0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_obs).squeeze(-2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_obs).squeeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "predicted_covar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_420": {
                "variable": {
                    "value": "self.obs_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.3 * torch.randn(self.obs_dim, self.obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_424": {
                "variable": {
                    "value": "obs_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.full_state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultivariateNormal_440": {
                "loc": {
                    "value": "self.obs_matrix.new_zeros(self.full_state_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "stationary_covariance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._stationary_covariance()",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_476": {
                "loc": {
                    "value": "covar.new_zeros(self.full_state_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "stationary_covariance - torch.matmul(trans_matrix.transpose(-1, -2), torch.matmul(stationary_covariance, trans_matrix))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MultivariateNormal_569": {
                "loc": {
                    "value": "predicted_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_matrix).squeeze(-2)[..., 0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_obs).squeeze(-2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(filtering_state.loc.unsqueeze(-2), trans_obs).squeeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "predicted_covar",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "obs_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[1.0] + [0.0] * (self.kernel.state_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.full_state_dim, obs_dim)",
                            "Call"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "input": {
                    "value": "filtering_state.loc.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "trans_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "trans_matrix.unsqueeze(-3)",
                            "Call"
                        ],
                        [
                            "trans_matrix[..., 0:1]",
                            "Subscript"
                        ],
                        [
                            "block_diag_embed(trans_matrix)",
                            "Call"
                        ],
                        [
                            "self.kernel.transition_matrix(dt=dts)",
                            "Call"
                        ],
                        [
                            "block_diag_embed(trans_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_136": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "input": {
                    "value": "filtering_state.covariance_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "trans_obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(trans_mat, obs_matrix)",
                            "Call"
                        ],
                        [
                            "torch.matmul(trans_matrix, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_323": {
                "input": {
                    "value": "obs_matrix.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(process_covar, obs_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_409": {
                "*size": {
                    "value": "obs_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_472": {
                "input": {
                    "value": "trans_matrix.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(stationary_covariance, trans_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_540": {
                "input": {
                    "value": "trans_obs.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(filtering_state.covariance_matrix, trans_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_543": {
                "input": {
                    "value": "obs_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(trans_dist.covariance_matrix, obs_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "obs_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_140": {
                "input": {
                    "value": "trans_matrix.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(filtering_state.covariance_matrix, trans_matrix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_213": {
                "*size": {
                    "value": "obs_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_233": {
                "*size": {
                    "value": "self.num_gps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_324": {
                "input": {
                    "value": "process_covar",
                    "type": "Call",
                    "possible_values": [
                        [
                            "block_diag_embed(process_covar)",
                            "Call"
                        ],
                        [
                            "block_diag_embed(process_covar)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "obs_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[1.0] + [0.0] * (self.kernel.state_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.full_state_dim, obs_dim)",
                            "Call"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_396": {
                "*size": {
                    "value": "obs_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_415": {
                "n": {
                    "value": "obs_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_474": {
                "input": {
                    "value": "stationary_covariance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._stationary_covariance()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "trans_matrix.unsqueeze(-3)",
                            "Call"
                        ],
                        [
                            "trans_matrix[..., 0:1]",
                            "Subscript"
                        ],
                        [
                            "block_diag_embed(trans_matrix)",
                            "Call"
                        ],
                        [
                            "self.kernel.transition_matrix(dt=dts)",
                            "Call"
                        ],
                        [
                            "block_diag_embed(trans_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_542": {
                "input": {
                    "value": "filtering_state.covariance_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "trans_obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(trans_mat, obs_matrix)",
                            "Call"
                        ],
                        [
                            "torch.matmul(trans_matrix, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_544": {
                "input": {
                    "value": "trans_dist.covariance_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "obs_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[1.0] + [0.0] * (self.kernel.state_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.full_state_dim, obs_dim)",
                            "Call"
                        ],
                        [
                            "self._get_obs_matrix()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "input": {
                    "value": "filtering_state.covariance_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "trans_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "trans_matrix.unsqueeze(-3)",
                            "Call"
                        ],
                        [
                            "trans_matrix[..., 0:1]",
                            "Subscript"
                        ],
                        [
                            "block_diag_embed(trans_matrix)",
                            "Call"
                        ],
                        [
                            "self.kernel.transition_matrix(dt=dts)",
                            "Call"
                        ],
                        [
                            "block_diag_embed(trans_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_415": {
                "*size": {
                    "value": "obs_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "obs_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tril_415": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_421": {
                "*size": {
                    "value": "self.obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/timeseries/lgssm.py": {
        "torch": {
            "Parameter_48": {
                "variable": {
                    "value": "self.trans_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(state_dim) + 0.03 * torch.randn(state_dim, state_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.obs_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.3 * torch.randn(state_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "N_trans_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N_trans_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "repeated_matmul(self.trans_matrix, N_timesteps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.obs_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "predicted_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtering_state.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "N_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(N_trans_matrix, self.obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "predicted_covar1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N_trans_obs.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(filtering_state.covariance_matrix, N_trans_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "N_trans_obs_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.obs_matrix.unsqueeze(0), N_trans_obs[:-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "predicted_covar2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N_trans_obs_shift.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(process_covar, N_trans_obs_shift)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.obs_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(obs_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_63": {
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.obs_matrix.new_zeros(self.state_dim)",
                            "Call"
                        ],
                        [
                            "self.obs_matrix.new_zeros(self.state_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "self.init_noise_scale_sq.diag_embed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_70": {
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.obs_matrix.new_zeros(self.state_dim)",
                            "Call"
                        ],
                        [
                            "self.obs_matrix.new_zeros(self.state_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "self.trans_noise_scale_sq.diag_embed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_156": {
                "loc": {
                    "value": "predicted_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(filtering_state.loc, N_trans_obs)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "predicted_covar",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "predicted_covar1 + torch.cumsum(predicted_covar2, dim=0)",
                            "BinOp"
                        ],
                        [
                            "predicted_covar + self.obs_noise_scale.pow(2.0).diag_embed()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_46": {
                "*size": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_53": {
                "*size": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "input": {
                    "value": "filtering_state.covariance_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "N_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(N_trans_matrix, self.obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_129": {
                "input": {
                    "value": "process_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._get_trans_dist().covariance_matrix",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "N_trans_obs_shift",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([self.obs_matrix.unsqueeze(0), N_trans_obs[:-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_132": {
                "input": {
                    "value": "predicted_covar2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(N_trans_obs_shift.transpose(-1, -2), torch.matmul(process_covar, N_trans_obs_shift))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_49": {
                "n": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_51": {
                "*size": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_49": {
                "*size": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/timeseries/lgssmgp.py": {
        "torch": {
            "Parameter_80": {
                "variable": {
                    "value": "self.z_trans_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(state_dim) + 0.03 * torch.randn(state_dim, state_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.z_obs_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.3 * torch.randn(state_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "gp_obs_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.kernel.state_dim * obs_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "self.obs_selector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.kernel.state_dim * d for d in range(obs_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_143": {
                "variable": {
                    "value": "trans_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "trans_covar.new_zeros(self.full_state_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "trans_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.z_trans_matrix.new_zeros(self.full_state_dim, self.full_state_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_206": {
                "variable": {
                    "value": "N_trans_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N_trans_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "repeated_matmul(self.z_trans_matrix, N_timesteps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.z_obs_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "predicted_mean1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtering_state.loc[-self.state_dim:].unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "N_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(N_trans_matrix, self.z_obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_209": {
                "variable": {
                    "value": "predicted_mean1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "predicted_mean2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtering_state.loc[:self.full_gp_state_dim].unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "gp_trans_matrix[..., self.obs_selector]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_212": {
                "variable": {
                    "value": "predicted_mean2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "predicted_covar1z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N_trans_obs.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(fs_cov[self.full_gp_state_dim:, self.full_gp_state_dim:], N_trans_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_227": {
                "variable": {
                    "value": "predicted_covar1gp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gp_trans.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(fs_cov[:self.full_gp_state_dim, :self.full_gp_state_dim], gp_trans)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "N_trans_obs_shift",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.z_obs_matrix.unsqueeze(0), N_trans_obs[0:-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "predicted_covar2z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N_trans_obs_shift.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.matmul(z_process_covar, N_trans_obs_shift)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.obs_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(obs_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "[self.gp_obs_matrix, self.z_obs_matrix]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultivariateNormal_115": {
                "loc": {
                    "value": "loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.z_trans_matrix.new_zeros(self.full_state_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.z_trans_matrix.new_zeros(self.full_state_dim, self.full_state_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_274": {
                "loc": {
                    "value": "predicted_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predicted_mean1 + predicted_mean2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "predicted_covar",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "predicted_covar1z + predicted_covar1gp + gp_process_covar + torch.cumsum(predicted_covar2z, dim=0)",
                            "BinOp"
                        ],
                        [
                            "predicted_covar + self.obs_noise_scale.pow(2.0).diag_embed()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_78": {
                "*size": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_85": {
                "*size": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_189": {
                "start": {
                    "value": "N_timesteps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z_trans_matrix.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.z_trans_matrix.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_222": {
                "input": {
                    "value": "fs_cov[self.full_gp_state_dim:, self.full_gp_state_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "N_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(N_trans_matrix, self.z_obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_229": {
                "input": {
                    "value": "fs_cov[:self.full_gp_state_dim, :self.full_gp_state_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "gp_trans",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gp_trans_matrix[..., self.obs_selector]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_242": {
                "input": {
                    "value": "z_process_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trans_noise_scale_sq.diag_embed()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "N_trans_obs_shift",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([self.z_obs_matrix.unsqueeze(0), N_trans_obs[0:-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_249": {
                "input": {
                    "value": "predicted_covar2z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(N_trans_obs_shift.transpose(-1, -2), torch.matmul(z_process_covar, N_trans_obs_shift))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_81": {
                "n": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_83": {
                "*size": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_81": {
                "*size": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "state_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/contrib/tracking/assignment.py": {
        "torch": {
            "zeros_219": {
                "variable": {
                    "value": "exists_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_objects",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "assign_logits.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "assign_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "assign_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_objects + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "assign_logits.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "assign_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_261": {
                "variable": {
                    "value": "message_e_to_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ],
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ],
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_262": {
                "variable": {
                    "value": "message_a_to_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ],
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ],
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_309": {
                "variable": {
                    "value": "message_e_to_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ],
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ],
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_310": {
                "variable": {
                    "value": "message_a_to_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ],
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ],
                        [
                            "assign_logits.clamp(min=-40, max=40)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_347": {
                "variable": {
                    "value": "exists_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_objects",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "assign_logits.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "assign_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "assign_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "assign_logits.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "assign_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_418": {
                "variable": {
                    "value": "message_b_to_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "assign_logits.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "assign_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_421": {
                "variable": {
                    "value": "message_a_to_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "assign_logits.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "assign_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_424": {
                "variable": {
                    "value": "message_b_to_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_objects",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "assign_logits.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "assign_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_425": {
                "variable": {
                    "value": "message_e_to_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_objects",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "exists_logits.dtype",
                            "Attribute"
                        ],
                        [
                            "assign_logits.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "exists_logits.device",
                            "Attribute"
                        ],
                        [
                            "assign_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_76": {
                "variable": {
                    "value": "padded_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "itertools.product(range(num_objects + 1), repeat=num_detections)",
                            "Call"
                        ],
                        [
                            "assign_probs.log()",
                            "Call"
                        ],
                        [
                            "assign[:, :-1] - assign[:, -1:]",
                            "BinOp"
                        ],
                        [
                            "assign_logits + message_e_to_a",
                            "BinOp"
                        ],
                        [
                            "assign_logits + message_e_to_a",
                            "BinOp"
                        ],
                        [
                            "assign_probs.log() - (total - assign_probs.sum(-1, True)).log()",
                            "BinOp"
                        ],
                        [
                            "tuple(zip(objects, detections))",
                            "Call"
                        ],
                        [
                            "assign_logits + message_b_to_a",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_130": {
                "variable": {
                    "value": "padded_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_detections, num_objects + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "assign.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "assign.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_200": {
                "variable": {
                    "value": "padded_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "itertools.product(range(num_objects + 1), repeat=num_detections)",
                            "Call"
                        ],
                        [
                            "assign_probs.log()",
                            "Call"
                        ],
                        [
                            "assign[:, :-1] - assign[:, -1:]",
                            "BinOp"
                        ],
                        [
                            "assign_logits + message_e_to_a",
                            "BinOp"
                        ],
                        [
                            "assign_logits + message_e_to_a",
                            "BinOp"
                        ],
                        [
                            "assign_probs.log() - (total - assign_probs.sum(-1, True)).log()",
                            "BinOp"
                        ],
                        [
                            "tuple(zip(objects, detections))",
                            "Call"
                        ],
                        [
                            "assign_logits + message_b_to_a",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_objects, num_detections][dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log1p_271": {
                "input": {
                    "value": "joint.sum(1, True) - joint",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_319": {
                "input": {
                    "value": "sparse_sum(joint, 1, True) - joint",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/tracking/distributions.py": {
        "torch": {
            "zeros_92": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.event_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/tracking/dynamic_models.py": {
        "torch": {
            "Parameter_164": {
                "variable": {
                    "value": "self.sv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(sv2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_250": {
                "variable": {
                    "value": "self.sa2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sa2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(sa2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "sv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(sv2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "x_pv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self._dimension",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "P_pv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "2 * self._dimension",
                            "BinOp"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "2 * self._dimension",
                            "BinOp"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "P.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "P.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "sa2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sa2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(sa2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "Q.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Q.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_385": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "2 * self._dimension",
                            "BinOp"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "2 * self._dimension",
                            "BinOp"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sa2.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.sa2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_460": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "2 * self._dimension",
                            "BinOp"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "2 * self._dimension",
                            "BinOp"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ],
                        [
                            "self._dimension",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sa2.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.sa2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_455": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/tracking/extended_kalman_filter.py": {
        "torch": {
            "solve_216": {
                "variable": {
                    "value": "S_inv_R",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "H.mm(self._cov).mm(H.transpose(-1, -2)) + R",
                            "BinOp"
                        ],
                        [
                            "H.mm(P).mm(H.transpose(-1, -2)) + R",
                            "BinOp"
                        ]
                    ]
                },
                "A": {
                    "value": "R",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "measurement.cov",
                            "Attribute"
                        ],
                        [
                            "measurement.cov",
                            "Attribute"
                        ]
                    ]
                }
            },
            "solve_214": {
                "input": {
                    "value": "S",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "H.mm(self._cov).mm(H.transpose(-1, -2)) + R",
                            "BinOp"
                        ],
                        [
                            "H.mm(P).mm(H.transpose(-1, -2)) + R",
                            "BinOp"
                        ]
                    ]
                },
                "A": {
                    "value": "H",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "measurement.jacobian(x_pv)[:, :self.dimension]",
                            "Subscript"
                        ],
                        [
                            "measurement.jacobian(x_pv)[:, :self.dimension]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "solve_218": {
                "input": {
                    "value": "S",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "H.mm(self._cov).mm(H.transpose(-1, -2)) + R",
                            "BinOp"
                        ],
                        [
                            "H.mm(P).mm(H.transpose(-1, -2)) + R",
                            "BinOp"
                        ]
                    ]
                },
                "A": {
                    "value": "K_prefix.mm(S_inv_R).transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "S.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "S.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_210": {
                "input": {
                    "value": "S",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "H.mm(self._cov).mm(H.transpose(-1, -2)) + R",
                            "BinOp"
                        ],
                        [
                            "H.mm(P).mm(H.transpose(-1, -2)) + R",
                            "BinOp"
                        ]
                    ]
                },
                "A": {
                    "value": "dz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/tracking/hashing.py": {
        "torch": {
            "stack_216": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points[i] for i in ids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/tracking/measurements.py": {
        "torch": {
            "cat_122": {
                "variable": {
                    "value": "self._jacobian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[eye_like(mean, self.dimension), torch.zeros(self.dimension, self.dimension, dtype=mean.dtype, device=mean.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "self.dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mean.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/contrib/util.py": {
        "torch": {
            "tensor_21": {
                "data": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_39": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_44": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "input": {
                    "value": "a.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "b.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "v.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_71": {
                "input": {
                    "value": "torch.ones(M.shape[-2], M.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "diagonal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_71": {
                "*size": {
                    "value": "M.shape[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "M.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/affine_beta.py": {
        "torch": {
            "Beta_40": {
                "variable": {
                    "value": "base_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "validate_args": {
                    "value": "validate_args",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x, self.low + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x, self.low + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_102": {
                "data": {
                    "value": "self.transforms[0].loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_106": {
                "data": {
                    "value": "self.transforms[0].scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AffineTransform_43": {
                "loc": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_81": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.base_dist.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "transform(x)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, self.low + eps), self.high - eps)",
                            "Call"
                        ],
                        [
                            "self.base_dist.rsample(sample_shape)",
                            "Call"
                        ],
                        [
                            "transform(x)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, self.low + eps), self.high - eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_68": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.base_dist.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "transform(x)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, self.low + eps), self.high - eps)",
                            "Call"
                        ],
                        [
                            "self.base_dist.rsample(sample_shape)",
                            "Call"
                        ],
                        [
                            "transform(x)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(x, self.low + eps), self.high - eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/asymmetriclaplace.py": {
        "torch": {
            "where_62": {
                "condition": {
                    "value": "z < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.left_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.right_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logaddexp_174": {
                "input": {
                    "value": "(SS / 2 + Lx) / L ** 2 + _logerfc((SS + Lx) / (L * S2))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(SS / 2 - Rx) / R ** 2 + _logerfc((SS - Rx) / (R * S2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/avf_mvn.py": {
        "torch": {
            "randn_73": {
                "variable": {
                    "value": "white",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "loc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "white",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(shape, dtype=loc.dtype, device=loc.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale_tril.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "gL",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_output",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tril_97": {
                "variable": {
                    "value": "L_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_L_ab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum_leftmost(g_ja * epsilon_jb, -2)",
                            "Call"
                        ],
                        [
                            "diff_L_ab + (xi_ab.unsqueeze(0) * BC_lab).sum(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_104": {
                "variable": {
                    "value": "diff_CV",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[diff_B, diff_C]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/coalescent.py": {
        "torch": {
            "tensor_369": {
                "variable": {
                    "value": "leaf_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "leaf_times",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(leaf_times)",
                            "Call"
                        ],
                        [
                            "leaf_times.expand(batch_shape + (N,))",
                            "Call"
                        ],
                        [
                            "leaf_times.detach()",
                            "Call"
                        ],
                        [
                            "leaf_times.sort(dim=-1, descending=True).values.tolist()",
                            "Call"
                        ],
                        [
                            "self.leaf_times.expand(shape + (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_370": {
                "variable": {
                    "value": "coal_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "coal_times",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(coal_times)",
                            "Call"
                        ],
                        [
                            "coal_times.expand(batch_shape + (N - 1,))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "value",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_464": {
                "variable": {
                    "value": "times",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coal_times, leaf_times]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_465": {
                "variable": {
                    "value": "signs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.5 - N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "N - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "2 * N - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_465": {
                "variable": {
                    "value": "signs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_66": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(rate, dtype=leaf_times.dtype, device=leaf_times.device)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "leaf_times.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "leaf_times.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_195": {
                "variable": {
                    "value": "cumsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumsum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.rate_grid.cumsum(-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(cumsum, (1, 0), value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "self._linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_linear, new_zeros(pre_linear.shape[:-1] + (duration - 2,)), post_linear]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_497": {
                "variable": {
                    "value": "flat_coal_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(_sample_coalescent_times, flat_leaf_times))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_473": {
                "start": {
                    "value": "2 * N - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/conditional.py": {
        "torch": {
            "TransformedDistribution_78": {
                "base_distribution": {
                    "value": "base_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.base_dist.condition(context)",
                            "Call"
                        ]
                    ]
                },
                "transforms": {
                    "value": "transforms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[t.condition(context) for t in self.transforms]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/conjugate.py": {
        "torch": {
            "broadcast_tensors_20": {
                "variable": {
                    "value": "(value, alpha, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "value",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_21": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "value[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Beta_70": {
                "variable": {
                    "value": "self._beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_128": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1 + total_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.concentration1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.concentration1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dirichlet_170": {
                "variable": {
                    "value": "self._dirichlet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration": {
                    "value": "concentration",
                    "type": "Name",
                    "possible_values": [
                        [
                            "concentration.expand(batch_shape + (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_252": {
                "variable": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration": {
                    "value": "concentration",
                    "type": "Name",
                    "possible_values": [
                        [
                            "concentration.expand(batch_shape + (-1,))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._gamma.sample(sample_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Binomial_93": {
                "total_count": {
                    "value": "self.total_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._beta.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "self._dirichlet.sample(sample_shape)",
                            "Call"
                        ]
                    ]
                },
                "validate_args": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Multinomial_204": {
                "total_count": {
                    "value": "total_count",
                    "type": "Call",
                    "possible_values": [
                        [
                            "int(self.total_count.max())",
                            "Call"
                        ],
                        [
                            "concentration.new_tensor(total_count)",
                            "Call"
                        ],
                        [
                            "total_count.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "int(self.total_count.max())",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "probs": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._beta.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "self._dirichlet.sample(sample_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Poisson_273": {
                "rate": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._gamma.sample(sample_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "lgamma_25": {
                "input": {
                    "value": "alpha",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "alpha[mask]",
                            "Subscript"
                        ],
                        [
                            "self.concentration",
                            "Attribute"
                        ],
                        [
                            "self.concentration",
                            "Attribute"
                        ]
                    ]
                }
            },
            "lgamma_30": {
                "input": {
                    "value": "alpha",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "alpha[mask]",
                            "Subscript"
                        ],
                        [
                            "self.concentration",
                            "Attribute"
                        ],
                        [
                            "self.concentration",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/constraints.py": {
        "torch": {
            "norm_44": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_61": {
                "variable": {
                    "value": "unit_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(torch.diagonal(value, dim1=-2, dim2=-1) - 1) < 1e-06",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "torch.diagonal(value, dim1=-2, dim2=-1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_80": {
                "input": {
                    "value": "value[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_82": {
                "input": {
                    "value": "value[..., 1:] > value[..., :-1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diagonal_62": {
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/delta.py": {
        "torch": {
            "full_43": {
                "variable": {
                    "value": "log_density",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "batch_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.shape[:batch_dim]",
                            "Subscript"
                        ],
                        [
                            "torch.Size(batch_shape)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "log_density",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.full(batch_shape, log_density, dtype=v.dtype, device=v.device)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "input": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/diag_normal_mixture.py": {
        "torch": {
            "Categorical_79": {
                "variable": {
                    "value": "self.categorical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "component_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logsumexp_115": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.categorical.logits + (-eps_sqr + eps_sqr_min.unsqueeze(-1)) - coord_scale_prod_log_sum",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(result, dim=-1)",
                            "Call"
                        ],
                        [
                            "result - 0.5 * math.log(2.0 * math.pi) * float(self.dim)",
                            "BinOp"
                        ],
                        [
                            "result - eps_sqr_min",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_141": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "which_expand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "which.expand(tuple(which.shape[:-1] + (dim,)))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_141": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_142": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "which_expand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "which.expand(tuple(which.shape[:-1] + (dim,)))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_142": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_164": {
                "variable": {
                    "value": "mu_cd_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_cd",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "locs.unsqueeze(-2) - locs.unsqueeze(-3)",
                            "BinOp"
                        ],
                        [
                            "mu_cd / mu_cd_norm.unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "mu_cd_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_164": {
                "variable": {
                    "value": "mu_cd_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_166": {
                "variable": {
                    "value": "diagonals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(K,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_175": {
                "variable": {
                    "value": "z_perp_cd_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_perp_cd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z.unsqueeze(-2).unsqueeze(-2) - z_ll_cd.unsqueeze(-1) * mu_cd",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_175": {
                "variable": {
                    "value": "z_perp_cd_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_177": {
                "variable": {
                    "value": "shift_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_182": {
                "variable": {
                    "value": "z_shift_cumsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_shift",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(z.unsqueeze(-2) - locs) / sigma_0",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_186": {
                "variable": {
                    "value": "z_tilde_cumsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(z_tilde, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_187": {
                "variable": {
                    "value": "z_tilde_cumsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_tilde_cumsum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cumsum(torch.pow(z_tilde, 2.0), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(z_tilde_cumsum, -1, shift_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "shift_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty((dim,), dtype=torch.long, device=z.device)",
                            "Call"
                        ],
                        [
                            "shift_indices - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_191": {
                "variable": {
                    "value": "log_scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_192": {
                "variable": {
                    "value": "epsilons_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_tilde",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z.unsqueeze(-2) / scales - locs_tilde",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_197": {
                "variable": {
                    "value": "q_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_qs.sum(-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_204": {
                "variable": {
                    "value": "sigma_products",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shift_log_scales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_scales[..., shift_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_204": {
                "variable": {
                    "value": "sigma_products",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "reverse_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(dim - 1, -1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_226": {
                "variable": {
                    "value": "mu_ll_dc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_ll_cd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(locs.unsqueeze(-2) * mu_cd).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_167": {
                "start": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "diagonals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty((K,), dtype=torch.long, device=z.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_178": {
                "start": {
                    "value": "dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "scales.size(-1)",
                            "Call"
                        ],
                        [
                            "scales.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "shift_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty((dim,), dtype=torch.long, device=z.device)",
                            "Call"
                        ],
                        [
                            "shift_indices - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_219": {
                "input": {
                    "value": "-0.5 * r_sqr_ji",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_230": {
                "input": {
                    "value": "-0.5 * z_perp_cd_sqr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_107": {
                "input": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(value.unsqueeze(-2) - self.locs) / self.coord_scale",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_107": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_108": {
                "input": {
                    "value": "eps_sqr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * torch.pow(epsilon, 2.0).sum(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_159": {
                "input": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_183": {
                "input": {
                    "value": "z_shift_cumsum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.pow(z_shift, 2.0)",
                            "Call"
                        ],
                        [
                            "z_shift_cumsum.sum(-1, keepdim=True) - torch.cumsum(z_shift_cumsum, dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_186": {
                "input": {
                    "value": "z_tilde",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z.unsqueeze(-2) / scales - locs_tilde",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_210": {
                "input": {
                    "value": "reverse_log_sigma_0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sigma_0.log()[..., reverse_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "erf_216": {
                "input": {
                    "value": "z_shift / root_two",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_227": {
                "input": {
                    "value": "(z_ll_cd + mu_ll_dc) / root_two",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/diag_normal_mixture_shared_cov.py": {
        "torch": {
            "Categorical_78": {
                "variable": {
                    "value": "self.categorical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "component_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logsumexp_115": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.categorical.logits + (-eps_sqr + eps_sqr_min.unsqueeze(-1))",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(result, dim=-1)",
                            "Call"
                        ],
                        [
                            "result - 0.5 * math.log(2.0 * math.pi) * float(self.dim)",
                            "BinOp"
                        ],
                        [
                            "result - torch.log(self.coord_scale).sum(-1)",
                            "BinOp"
                        ],
                        [
                            "result - eps_sqr_min",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_137": {
                "variable": {
                    "value": "white",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "noise_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "locs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "locs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_142": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "which.expand(expand_tuple)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_142": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_159": {
                "variable": {
                    "value": "mu_ab_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_ab",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "locs_tilde.unsqueeze(-2) - locs_tilde.unsqueeze(-3)",
                            "BinOp"
                        ],
                        [
                            "mu_ab / mu_ab_norm.unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_159": {
                "variable": {
                    "value": "mu_ab_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_159": {
                "variable": {
                    "value": "mu_ab_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_161": {
                "variable": {
                    "value": "diagonals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(K,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_170": {
                "variable": {
                    "value": "z_perp_ab_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_perp_ab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_tilde.unsqueeze(-2).unsqueeze(-2) - z_ll_ab.unsqueeze(-1) * mu_ab",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "z_perp_ab_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_176": {
                "variable": {
                    "value": "q_j_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_j - log_q_j_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_177": {
                "variable": {
                    "value": "q_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_qs.sum(-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_183": {
                "variable": {
                    "value": "mu_ll_ba",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_ll_ab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(locs_tilde.unsqueeze(-2) * mu_ab).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_162": {
                "start": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "component_logits.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "diagonals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.empty((K,), dtype=torch.long, device=z.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_187": {
                "input": {
                    "value": "-0.5 * z_perp_ab_sqr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_110": {
                "input": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(value.unsqueeze(-2) - self.locs) / coord_scale",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_111": {
                "input": {
                    "value": "eps_sqr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * torch.pow(epsilon, 2.0).sum(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_117": {
                "input": {
                    "value": "self.coord_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_173": {
                "input": {
                    "value": "epsilons",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_tilde.unsqueeze(-2) - locs_tilde",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_175": {
                "input": {
                    "value": "log_q_j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_qs.sum(-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "erf_184": {
                "input": {
                    "value": "(z_ll_ab + mu_ll_ba) / root_two",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/empirical.py": {
        "torch": {
            "pow_167": {
                "variable": {
                    "value": "deviation_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._samples - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/extended.py": {
        "torch": {}
    },
    "pyro/distributions/folded.py": {
        "torch": {
            "AbsTransform_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/gaussian_scale_mixture.py": {
        "torch": {
            "Categorical_80": {
                "variable": {
                    "value": "self.categorical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "component_logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_88": {
                "variable": {
                    "value": "coeffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dimov2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(self.dim / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_95": {
                "variable": {
                    "value": "epsilon_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value / self.coord_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "epsilon_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_98": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "component_scale_log_power + self.categorical.logits + -0.5 * epsilon_sqr / torch.pow(self.component_scale, 2.0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_149": {
                "variable": {
                    "value": "component_scale_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "component_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_151": {
                "variable": {
                    "value": "epsilons_sqr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epsilons",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z / coord_scale",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_155": {
                "variable": {
                    "value": "component_scale_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "component_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "float(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_163": {
                "variable": {
                    "value": "Phi_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * r_sqr_j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_157": {
                "input": {
                    "value": "-0.5 * r_sqr_j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_164": {
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "int(dim / 2) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_169": {
                "input": {
                    "value": "r_j_poly",
                    "type": "Call",
                    "possible_values": [
                        [
                            "r_sqr_j.unsqueeze(-1).expand(-1, -1, int(dim / 2))",
                            "Call"
                        ],
                        [
                            "r_sqr_j.unsqueeze(-1).expand(-1, int(dim / 2))",
                            "Call"
                        ],
                        [
                            "coeffs * torch.pow(r_j_poly, exponents)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "exponents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-torch.arange(1.0, int(dim / 2) + 1.0, 1.0)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "pow_178": {
                "input": {
                    "value": "r_sqr_j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "r_sqr / component_scale_sqr",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5 * float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_101": {
                "input": {
                    "value": "self.component_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "erf_176": {
                "input": {
                    "value": "r_sqr_j.sqrt() / root_two",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/hmm.py": {
        "torch": {
            "finfo_53": {
                "variable": {
                    "value": "finfo",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(1 * state_dim, 2 * state_dim, device=device), torch.arange(0 * state_dim, 1 * state_dim, device=device), torch.arange(2 * state_dim, 3 * state_dim, device=device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Categorical(logits=trans_logits).sample()",
                            "Call"
                        ],
                        [
                            "_sequential_index(xs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_514": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "init_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.initial_logits.expand(init_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_521": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "trans_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transition_logits.expand(trans_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Gamma_1032": {
                "variable": {
                    "value": "scale_post",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "gamma_dist.concentration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "gamma_dist.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "validate_args": {
                    "value": "self._validate_args",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_1038": {
                "variable": {
                    "value": "mvn",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cholesky_solve(logp.info_vec.unsqueeze(-1), cholesky(precision)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "cholesky_solve(logp.info_vec.unsqueeze(-1), scale_tril).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "scale_tril": {
                    "value": "scale_tril",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cholesky(logp.precision)",
                            "Call"
                        ]
                    ]
                },
                "validate_args": {
                    "value": "self._validate_args",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "input": {
                    "value": "(x - x_shift).exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(y - y_shift).exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "contracted",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(contracted, logits[..., -1:, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_153": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples[..., -1:, :, :]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "samples.unsqueeze(-2)",
                            "Call"
                        ],
                        [
                            "contracted",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, contracted.size(-2) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "contracted",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(contracted, padded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_241": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "joint.condition(cond).rsample()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(sample, (0, 0, 0, 1))",
                            "Call"
                        ],
                        [
                            "joint.condition(cond).rsample()",
                            "Call"
                        ],
                        [
                            "torch.cat([sample, result[..., -1:, :]], dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result, sample]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample, result[..., -1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_259": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result[..., :-1, :], sample]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_504": {
                "logits": {
                    "value": "logp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.transition_logits + observation_logits.unsqueeze(-2)",
                            "BinOp"
                        ],
                        [
                            "_sequential_logmatmulexp(logp)",
                            "Call"
                        ],
                        [
                            "(self.initial_logits.unsqueeze(-1) + logp).logsumexp(-2)",
                            "Call"
                        ],
                        [
                            "self._trans + self._obs.condition(value).event_pad(left=self.hidden_dim)",
                            "BinOp"
                        ],
                        [
                            "_sequential_gaussian_tensordot(logp.expand(logp.batch_shape))",
                            "Call"
                        ],
                        [
                            "gaussian_tensordot(self._init, logp, dims=self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "new._trans + new._obs.marginalize(right=new.obs_dim).event_pad(left=new.hidden_dim)",
                            "BinOp"
                        ],
                        [
                            "_sequential_gaussian_tensordot(logp.expand(logp.batch_shape))",
                            "Call"
                        ],
                        [
                            "gaussian_tensordot(new._init, logp, dims=new.hidden_dim)",
                            "Call"
                        ],
                        [
                            "self._trans + self._obs.condition(value).event_pad(left=self.hidden_dim)",
                            "BinOp"
                        ],
                        [
                            "_sequential_gamma_gaussian_tensordot(logp.expand(logp.batch_shape))",
                            "Call"
                        ],
                        [
                            "gamma_gaussian_tensordot(self._init, logp, dims=self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "Gaussian.cat([logp_oh.expand(batch_shape), logp_h.expand(batch_shape)])",
                            "Call"
                        ],
                        [
                            "_sequential_gaussian_tensordot(logp)",
                            "Call"
                        ],
                        [
                            "gaussian_tensordot(self._init, logp, dims=self.hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "validate_args": {
                    "value": "self._validate_args",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_739": {
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cholesky_solve(logp.info_vec.unsqueeze(-1), cholesky(precision)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "cholesky_solve(logp.info_vec.unsqueeze(-1), scale_tril).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "precision_matrix": {
                    "value": "precision",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logp.precision",
                            "Attribute"
                        ]
                    ]
                },
                "validate_args": {
                    "value": "self._validate_args",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Independent_1186": {
                "variable": {
                    "value": "observation_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "observation_dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "observation_dist.expand(batch_shape + time_shape)",
                            "Call"
                        ],
                        [
                            "observation_dist.base_dist",
                            "Attribute"
                        ],
                        [
                            "observation_dist.base_dist",
                            "Attribute"
                        ],
                        [
                            "Independent(observation_dist, 1)",
                            "Call"
                        ]
                    ]
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_202": {
                "start": {
                    "value": "1 * state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trans.precision.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_203": {
                "start": {
                    "value": "0 * state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1 * state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trans.precision.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_204": {
                "start": {
                    "value": "2 * state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3 * state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trans.precision.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/improper_uniform.py": {
        "torch": {
            "zeros_65": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/inverse_gamma.py": {
        "torch": {
            "PowerTransform_32": {
                "exponent": {
                    "value": "-base_dist.rate.new_ones(())",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/kl.py": {
        "torch": {
            "Independent_29": {
                "base_distribution": {
                    "value": "p.base_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "p_ndims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.reinterpreted_batch_ndims - shared_ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Independent_30": {
                "base_distribution": {
                    "value": "q.base_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "q_ndims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q.reinterpreted_batch_ndims - shared_ndims",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/lkj.py": {
        "torch": {
            "eye_61": {
                "n": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/log_normal_negative_binomial.py": {
        "torch": {
            "logsumexp_115": {
                "input": {
                    "value": "self.log_weights + nb_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_139": {
                "input": {
                    "value": "self.logits + self.total_count.log() + 0.5 * self.multiplicative_noise_scale.pow(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_148": {
                "input": {
                    "value": "self.multiplicative_noise_scale.pow(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/logistic.py": {
        "torch": {
            "logsigmoid_57": {
                "input": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "value.pow(self.asymmetry.reciprocal()).logit()",
                            "Call"
                        ]
                    ]
                }
            },
            "logsigmoid_143": {
                "input": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "value.pow(self.asymmetry.reciprocal()).logit()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/mixture.py": {
        "torch": {
            "where_121": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask.expand(result.shape) if result.shape != self.mask.shape else self.mask",
                            "IfExp"
                        ],
                        [
                            "mask.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "self.mask.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "self.mask.reshape(self.mask.shape + (1,) * self.event_dim)",
                            "Call"
                        ],
                        [
                            "mask.expand(sample_shape + self.shape())",
                            "Call"
                        ],
                        [
                            "self.mask.reshape(self.mask.shape + (1,) * self.event_dim)",
                            "Call"
                        ],
                        [
                            "mask.expand(sample_shape + self.shape())",
                            "Call"
                        ],
                        [
                            "self.mask",
                            "Attribute"
                        ],
                        [
                            "mask.expand(mask_shape)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.component1.sample(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.component0.sample(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_131": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask.expand(result.shape) if result.shape != self.mask.shape else self.mask",
                            "IfExp"
                        ],
                        [
                            "mask.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "self.mask.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "self.mask.reshape(self.mask.shape + (1,) * self.event_dim)",
                            "Call"
                        ],
                        [
                            "mask.expand(sample_shape + self.shape())",
                            "Call"
                        ],
                        [
                            "self.mask.reshape(self.mask.shape + (1,) * self.event_dim)",
                            "Call"
                        ],
                        [
                            "mask.expand(sample_shape + self.shape())",
                            "Call"
                        ],
                        [
                            "self.mask",
                            "Attribute"
                        ],
                        [
                            "mask.expand(mask_shape)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.component1.rsample(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.component0.rsample(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_148": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask.expand(result.shape) if result.shape != self.mask.shape else self.mask",
                            "IfExp"
                        ],
                        [
                            "mask.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "self.mask.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "self.mask.reshape(self.mask.shape + (1,) * self.event_dim)",
                            "Call"
                        ],
                        [
                            "mask.expand(sample_shape + self.shape())",
                            "Call"
                        ],
                        [
                            "self.mask.reshape(self.mask.shape + (1,) * self.event_dim)",
                            "Call"
                        ],
                        [
                            "mask.expand(sample_shape + self.shape())",
                            "Call"
                        ],
                        [
                            "self.mask",
                            "Attribute"
                        ],
                        [
                            "mask.expand(mask_shape)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "self.component1.log_prob(value)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.component0.log_prob(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_67": {
                "obj": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mask.expand(result.shape) if result.shape != self.mask.shape else self.mask",
                            "IfExp"
                        ],
                        [
                            "mask.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "self.mask.expand(batch_shape)",
                            "Call"
                        ],
                        [
                            "self.mask.reshape(self.mask.shape + (1,) * self.event_dim)",
                            "Call"
                        ],
                        [
                            "mask.expand(sample_shape + self.shape())",
                            "Call"
                        ],
                        [
                            "self.mask.reshape(self.mask.shape + (1,) * self.event_dim)",
                            "Call"
                        ],
                        [
                            "mask.expand(sample_shape + self.shape())",
                            "Call"
                        ],
                        [
                            "self.mask",
                            "Attribute"
                        ],
                        [
                            "mask.expand(mask_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/multivariate_studentt.py": {
        "torch": {
            "broadcast_shapes_39": {
                "variable": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "*shapes": {
                    "value": "df.shape",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_66": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.loc.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.loc.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_102": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._extended_shape(sample_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.df.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.df.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_triangular_111": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "self.scale_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "B": {
                    "value": "(value - self.loc).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "input": {
                    "value": "self._unbroadcasted_scale_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self._unbroadcasted_scale_tril.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_solve_69": {
                "input": {
                    "value": "identity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(self.loc.size(-1), device=self.loc.device, dtype=self.loc.dtype)",
                            "Call"
                        ]
                    ]
                },
                "input2": {
                    "value": "self._unbroadcasted_scale_tril",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_104": {
                "input": {
                    "value": "Z / self.df",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "lgamma_119": {
                "input": {
                    "value": "0.5 * (self.df + n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_118": {
                "input": {
                    "value": "0.5 * self.df",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_121": {
                "input": {
                    "value": "y.pow(2).sum(-1) / self.df",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/nanmasked.py": {
        "torch": {
            "broadcast_tensors_30": {
                "variable": {
                    "value": "(value, ok, loc, scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "value",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_tensors_72": {
                "variable": {
                    "value": "(value, ok, loc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "value",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_35": {
                "variable": {
                    "value": "marginal",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc[ok]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale[ok]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "validate_args": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "col_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pattern",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted(set(map(tuple, ok.tolist())))",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_95": {
                "variable": {
                    "value": "marginal",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "ok_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loc[row_mask][:, col_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "ok_cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cov[row_mask][:, col_mask][:, :, col_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "validate_args": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/omt_mvn.py": {
        "torch": {
            "randn_46": {
                "variable": {
                    "value": "white",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "loc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "white",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(shape, dtype=loc.dtype, device=loc.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "scale_tril.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "solve_triangular_62": {
                "variable": {
                    "value": "R_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "L.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "B": {
                    "value": "identity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eye_like(g, dim)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "g_R_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_output",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "R_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.solve_triangular(L.t(), identity, upper=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "g_R_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_70": {
                "variable": {
                    "value": "Sigma_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.solve_triangular(L.t(), identity, upper=True)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_inv.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_71": {
                "variable": {
                    "value": "(V, D, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Sigma_inv + jitter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_81": {
                "input": {
                    "value": "Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sum_leftmost(torch.matmul(z_tilde, torch.matmul(1.0 / D_outer, g_tilde)), -2)",
                            "Call"
                        ],
                        [
                            "torch.mm(V, torch.mm(Y, V.t()))",
                            "Call"
                        ],
                        [
                            "Y + Y.t()",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "V.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tril_88": {
                "variable": {
                    "value": "L_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_L_ab",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * sum_leftmost(g_ja * epsilon_jb + g_R_inv * z_ja, -2)",
                            "BinOp"
                        ],
                        [
                            "diff_L_ab + 0.5 * Tr_xi_Y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_75": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(white, scale_tril.t())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grad_output",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "input": {
                    "value": "1.0 / D_outer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "g_tilde",
                    "type": "Name",
                    "possible_values": [
                        [
                            "identity * torch.matmul(g, V).unsqueeze(-1).expand(*expand_tuple)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_84": {
                "input": {
                    "value": "Sigma_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(R_inv, R_inv.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sum_leftmost(torch.matmul(z_tilde, torch.matmul(1.0 / D_outer, g_tilde)), -2)",
                            "Call"
                        ],
                        [
                            "torch.mm(V, torch.mm(Y, V.t()))",
                            "Call"
                        ],
                        [
                            "Y + Y.t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_85": {
                "input": {
                    "value": "Sigma_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(R_inv, R_inv.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.solve_triangular(L.t(), identity, upper=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/one_one_matching.py": {
        "torch": {
            "tensor_177": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lap.lapjv(cost.numpy())[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(value, dtype=torch.long, device=logits.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (self.num_nodes,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "finfo_110": {
                "variable": {
                    "value": "finfo",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_136": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "d.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_104": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "d.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_129": {
                "input": {
                    "value": "log_Z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shift.sum() - free_energy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_140": {
                "data": {
                    "value": "list(itertools.permutations(range(self.num_nodes)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_146": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "d.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_148": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.logits - shift",
                            "BinOp"
                        ],
                        [
                            "logits.clamp(min=-1 / finfo.eps)",
                            "Call"
                        ],
                        [
                            "self.logits[s, d].sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_25": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_152": {
                "tensors": {
                    "value": "[self.sample(sample_shape[1:]) for _ in range(sample_shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/one_two_matching.py": {
        "torch": {
            "empty_186": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "subsize * num_sources * (num_sources - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_sources",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_destins * 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cost, cost]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lap.lapjv(cost.numpy())[1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(value, dtype=torch.long, device=logits.device)",
                            "Call"
                        ],
                        [
                            "value % logits.size(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (self.num_destins,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "finfo_111": {
                "variable": {
                    "value": "finfo",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_145": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "d.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_105": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "d.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_138": {
                "input": {
                    "value": "log_Z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shift.sum() - free_energy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_155": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "d.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "d.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_157": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.logits - shift",
                            "BinOp"
                        ],
                        [
                            "self.logits[s, d].sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_181": {
                "data": {
                    "value": "[[0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_161": {
                "tensors": {
                    "value": "[self.sample(sample_shape[1:]) for _ in range(sample_shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/ordered_logistic.py": {
        "torch": {
            "sigmoid_43": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cutpoints - predictor.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q.shape[:-1] + (q.shape[-1] + 1,)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "q.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/polya_gamma.py": {
        "torch": {
            "arange_57": {
                "variable": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_gamma_variates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prototype.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_57": {
                "variable": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_78": {
                "variable": {
                    "value": "sum_even",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "even_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_terms[..., ::2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_78": {
                "variable": {
                    "value": "sum_even",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_79": {
                "variable": {
                    "value": "sum_odd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "odd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_terms[..., 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_79": {
                "variable": {
                    "value": "sum_odd",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_63": {
                "input": {
                    "value": "x * (0.5 / math.pi ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.truncation_point",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_log_prob_terms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.prototype.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/projected_normal.py": {
        "torch": {}
    },
    "pyro/distributions/rejector.py": {
        "torch": {
            "exp_55": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob_accept",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.log_prob_accept(x)",
                            "Call"
                        ],
                        [
                            "self.log_prob_accept(proposed_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_56": {
                "variable": {
                    "value": "done",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(log_prob_accept).clamp_(0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_60": {
                "variable": {
                    "value": "prob_accept",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob_accept",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.log_prob_accept(x)",
                            "Call"
                        ],
                        [
                            "self.log_prob_accept(proposed_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_61": {
                "input": {
                    "value": "prob_accept",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(log_prob_accept).clamp_(0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/relaxed_straight_through.py": {
        "torch": {
            "zeros_like_49": {
                "variable": {
                    "value": "hard_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/sine_bivariate_von_mises.py": {
        "torch": {
            "stack_134": {
                "variable": {
                    "value": "conc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.phi_concentration, self.psi_concentration)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_137": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.phi_loc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "conc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.phi_concentration, self.psi_concentration)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "eig",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(eig), eig)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_175": {
                "variable": {
                    "value": "eigmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "eig[1] < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "eig[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(eig[1], dtype=eig.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_185": {
                "variable": {
                    "value": "start",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "missing",
                    "type": "Name",
                    "possible_values": [
                        [
                            "total * torch.ones((self.batch_shape.numel(),), dtype=torch.int, device=conc.device)",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "conc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_186": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, *missing.shape, total)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "corr.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "conc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_199": {
                "variable": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_shape.numel()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "conc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan2_260": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "phi[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_262": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conc[1] ** 2 + (corr * torch.sin(phi)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_263": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr / conc[1] * torch.sin(phi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "VonMises_265": {
                "variable": {
                    "value": "psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.atan(corr / conc[1] * torch.sin(phi))",
                            "Call"
                        ]
                    ]
                },
                "concentration": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(conc[1] ** 2 + (corr * torch.sin(phi)) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_267": {
                "variable": {
                    "value": "phi_psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((phi + self.phi_loc.reshape((-1, 1)) + pi) % (2 * pi) - pi, (psi + self.psi_loc.reshape((-1, 1)) + pi) % (2 * pi) - pi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_267": {
                "variable": {
                    "value": "phi_psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_303": {
                "variable": {
                    "value": "g1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / (b + 2 * eig) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_304": {
                "variable": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2 / (b + 2 * eig) ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_309": {
                "variable": {
                    "value": "ns",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lgamma_310": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * ns + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_311": {
                "variable": {
                    "value": "den",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ns + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_208": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(1 + 2 * curr_eig / curr_b0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "phi_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(*missing.shape, total)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "conc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_243": {
                "variable": {
                    "value": "phi_mask[missing > 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths < (start[missing > 0] + accepted.sum(-1)).view(-1, 1)",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "lengths >= start[missing > 0].view(-1, 1)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_278": {
                "tensors": {
                    "value": "(self.phi_loc, self.psi_loc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_305": {
                "condition": {
                    "value": "eig.norm(0) != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "b - g1 / g2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eig.shape[0] / 2 * torch.ones(self.batch_shape, dtype=eig.dtype, device=eig.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_122": {
                "input": {
                    "value": "phi_concentration * psi_concentration <= correlation ** 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sin_157": {
                "input": {
                    "value": "value[..., 1] - self.psi_loc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_176": {
                "input": {
                    "value": "eig[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eig.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_182": {
                "*size": {
                    "value": "(self.batch_shape.numel(),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "conc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_201": {
                "input": {
                    "value": "missing > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_254": {
                "input": {
                    "value": "missing > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_301": {
                "*size": {
                    "value": "self.batch_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "eig.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "eig.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_141": {
                "input": {
                    "value": "4 * torch.prod(conc, dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_151": {
                "input": {
                    "value": "value[..., 0] - self.phi_loc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_153": {
                "input": {
                    "value": "value[..., 1] - self.psi_loc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_156": {
                "input": {
                    "value": "value[..., 0] - self.phi_loc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_174": {
                "input": {
                    "value": "eig",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (conc[0] - corr ** 2 / conc[1])",
                            "BinOp"
                        ],
                        [
                            "torch.stack((torch.zeros_like(eig), eig))",
                            "Call"
                        ],
                        [
                            "eig - eigmin",
                            "BinOp"
                        ],
                        [
                            "eig.view(2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_227": {
                "input": {
                    "value": "curr_b0.view(-1, 1) / 2 + (curr_eig.view(2, -1, 1) * x ** 2).sum(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Uniform_234": {
                "low": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones((), device=conc.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_263": {
                "input": {
                    "value": "phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty((2, *missing.shape, total), dtype=corr.dtype, device=conc.device)",
                            "Call"
                        ],
                        [
                            "torch.atan2(phi[1], phi[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_140": {
                "input": {
                    "value": "corr",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.correlation.view(1, -1) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "self.correlation * torch.sin(value[..., 0] - self.phi_loc) * torch.sin(value[..., 1] - self.psi_loc)",
                            "BinOp"
                        ],
                        [
                            "self.correlation",
                            "Attribute"
                        ],
                        [
                            "corr.reshape(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_145": {
                "input": {
                    "value": "torch.tensor(2 * pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_141": {
                "input": {
                    "value": "conc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack((self.phi_concentration, self.psi_concentration), dim=-1).view(-1, 2)",
                            "Call"
                        ],
                        [
                            "torch.stack((self.phi_concentration, self.psi_concentration))",
                            "Call"
                        ],
                        [
                            "conc.view(2, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "2 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_262": {
                "input": {
                    "value": "phi",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty((2, *missing.shape, total), dtype=corr.dtype, device=conc.device)",
                            "Call"
                        ],
                        [
                            "torch.atan2(phi[1], phi[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_235": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "conc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_208": {
                "input": {
                    "value": "1 + 2 * curr_eig / curr_b0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_218": {
                "input": {
                    "value": "curr_conc[1] ** 2 + (curr_corr * x[1]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/sine_skewed.py": {
        "torch": {
            "broadcast_shapes_100": {
                "variable": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "*shapes": {
                    "value": "base_dist.batch_shape",
                    "type": null,
                    "possible_values": []
                }
            },
            "Uniform_135": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.skewness.new_ones(())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_152": {
                "variable": {
                    "value": "skew_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(self.skewness * torch.sin((value - self.base_dist.mean) % (2 * pi))).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_144": {
                "condition": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u <= 0.5 + 0.5 * (self.skewness * torch.sin((ys - bd.mean) % (2 * pi))).sum(-1)",
                            "Compare"
                        ],
                        [
                            "mask[..., None]",
                            "Subscript"
                        ]
                    ]
                },
                "x": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bd.sample(sample_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-ys + 2 * bd.mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_153": {
                "input": {
                    "value": "(value - self.base_dist.mean) % (2 * pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_141": {
                "input": {
                    "value": "(ys - bd.mean) % (2 * pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/softlaplace.py": {
        "torch": {
            "logaddexp_52": {
                "input": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ],
                        [
                            "(value - self.loc) / self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/spanning_tree.py": {
        "torch": {
            "arange_266": {
                "variable": {
                    "value": "v1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "num_vertices",
                            "Name"
                        ],
                        [
                            "E + 1",
                            "BinOp"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_267": {
                "variable": {
                    "value": "v2",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "num_vertices",
                            "Name"
                        ],
                        [
                            "E + 1",
                            "BinOp"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_267": {
                "variable": {
                    "value": "v2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_tensors_268": {
                "variable": {
                    "value": "(v1, v2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "v1",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_272": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1[mask], v2[mask])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_343": {
                "variable": {
                    "value": "edge_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "E",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(edges)",
                            "Call"
                        ],
                        [
                            "V - 1",
                            "BinOp"
                        ],
                        [
                            "V - 1",
                            "BinOp"
                        ],
                        [
                            "V - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_347": {
                "variable": {
                    "value": "components",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "num_vertices",
                            "Name"
                        ],
                        [
                            "E + 1",
                            "BinOp"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_355": {
                "variable": {
                    "value": "valid_edges_buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Call",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "len(edge_logits)",
                            "Call"
                        ],
                        [
                            "len(edge_logits)",
                            "Call"
                        ],
                        [
                            "len(edge_logits)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_375": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_424": {
                "variable": {
                    "value": "edge_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "components",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "num_vertices",
                            "Name"
                        ],
                        [
                            "E + 1",
                            "BinOp"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_446": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_492": {
                "variable": {
                    "value": "edge_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "variable": {
                    "value": "components",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "num_vertices",
                            "Name"
                        ],
                        [
                            "E + 1",
                            "BinOp"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_513": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(E, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_238": {
                "variable": {
                    "value": "_cpp_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cpp_spanning_tree",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[path]",
                    "type": "List",
                    "possible_values": []
                },
                "extra_cflags": {
                    "value": "['-O2']",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_358": {
                "n": {
                    "value": "E",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(edges)",
                            "Call"
                        ],
                        [
                            "V - 1",
                            "BinOp"
                        ],
                        [
                            "V - 1",
                            "BinOp"
                        ],
                        [
                            "V - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_110": {
                "variable": {
                    "value": "connected",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "num_vertices",
                            "Name"
                        ],
                        [
                            "E + 1",
                            "BinOp"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "trees",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "enumerate_spanning_trees(self.num_vertices)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_430": {
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(edge_logits - edge_logits.max()).exp()",
                            "Call"
                        ],
                        [
                            "(valid_logits - valid_logits.max()).exp()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_132": {
                "n": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "num_vertices",
                            "Name"
                        ],
                        [
                            "E + 1",
                            "BinOp"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "int(round(0.5 + (0.25 + 2 * K) ** 0.5))",
                            "Call"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ],
                        [
                            "self.num_vertices",
                            "Attribute"
                        ]
                    ]
                }
            },
            "multinomial_369": {
                "input": {
                    "value": "valid_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(valid_logits - valid_logits.max()).exp()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_440": {
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(edge_logits - edge_logits.max()).exp()",
                            "Call"
                        ],
                        [
                            "(valid_logits - valid_logits.max()).exp()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cholesky_139": {
                "input": {
                    "value": "truncated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "laplacian[:-1, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "diag_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/stable.py": {
        "torch": {
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_70": {
                "condition": {
                    "value": "alpha == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "Z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v.sin() / ((1 + b * b).rsqrt() * V.cos()).pow(inv_alpha) * ((v - V).cos().clamp(min=eps) / W).pow(inv_alpha - 1)",
                            "BinOp"
                        ],
                        [
                            "_standard_stable(alpha, beta, aux_uniform, aux_exponential, 'S0')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Z + beta * (math.pi / 2 * alpha).tan()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/testing/gof.py": {
        "torch": {
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bin_count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(round(len(samples) ** 0.333))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_152": {
                "*size": {
                    "value": "bin_count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(round(len(samples) ** 0.333))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_155": {
                "*size": {
                    "value": "binned.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "ndarray": {
                    "value": "distances[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cdist_219": {
                "variable": {
                    "value": "(distances, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x1": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "samples.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "samples.reshape(samples.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "samples.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "samples.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "samples.reshape(samples.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "samples.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "kthvalue_219": {
                "variable": {
                    "value": "(distances, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "k": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/testing/naive_dirichlet.py": {
        "torch": {
            "stack_41": {
                "variable": {
                    "value": "alpha_beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[concentration1, concentration0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_22": {
                "input": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_42": {
                "input": {
                    "value": "alpha_beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([concentration1, concentration0], -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/testing/rejection_exponential.py": {
        "torch": {}
    },
    "pyro/distributions/testing/rejection_gamma.py": {
        "torch": {
            "randn_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + self.concentration.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.concentration.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.concentration.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_89": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "y * y * y",
                            "BinOp"
                        ],
                        [
                            "value / self._d",
                            "BinOp"
                        ],
                        [
                            "value / self._d",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1.0 / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_215": {
                "variable": {
                    "value": "alpha_beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[concentration1, concentration0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_78": {
                "input": {
                    "value": "3 * y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_159": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "input": {
                    "value": "9.0 * self._d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_119": {
                "input": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_186": {
                "input": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_217": {
                "input": {
                    "value": "alpha_beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([concentration1, concentration0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_82": {
                "input": {
                    "value": "self.concentration",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_82": {
                "input": {
                    "value": "self.concentration",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_91": {
                "input": {
                    "value": "v",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "y * y * y",
                            "BinOp"
                        ],
                        [
                            "value / self._d",
                            "BinOp"
                        ],
                        [
                            "value / self._d",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/torch.py": {
        "torch": {
            "broadcast_tensors_266": {
                "variable": {
                    "value": "(rate, value, nonzero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.rate",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExpTransform_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_270": {
                "input": {
                    "value": "rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.rate + other.rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "poisson_65": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variance.expand(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_66": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result + shift",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_67": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "p < q",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.poisson(variance.expand(shape))",
                            "Call"
                        ],
                        [
                            "torch.min(result + shift, self.total_count)",
                            "Call"
                        ],
                        [
                            "super().enumerate_support(expand=expand)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.total_count - result",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_70": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "exact",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.total_count <= self.approx_sample_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "self.total_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(self.total_count)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Binomial_73": {
                "variable": {
                    "value": "exact_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "total_count",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(exact, self.total_count, torch.zeros_like(self.total_count))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "probs": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "validate_args": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_76": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "exact",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.total_count <= self.approx_sample_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "exact_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.distributions.Binomial(total_count, self.probs, validate_args=False).sample(sample_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(p < q, result, self.total_count - result)",
                            "Call"
                        ],
                        [
                            "torch.where(exact, exact_sample, sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_183": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_62": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.probs",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_71": {
                "input": {
                    "value": "self.total_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/torch_distribution.py": {
        "torch": {
            "where_376": {
                "variable": {
                    "value": "log_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "log_normalizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(self._mask, log_normalizer, torch.zeros_like(log_normalizer))",
                            "Call"
                        ],
                        [
                            "log_normalizer.expand(self.batch_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(log_normalizer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_377": {
                "input": {
                    "value": "log_normalizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(self._mask, log_normalizer, torch.zeros_like(log_normalizer))",
                            "Call"
                        ],
                        [
                            "log_normalizer.expand(self.batch_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/torch_patch.py": {
        "torch": {
            "as_tensor_68": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(value, dtype=self.base_dist.scale.dtype, device=self.base_dist.scale.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.base_dist.scale.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.base_dist.scale.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_89": {
                "variable": {
                    "value": "row_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_82": {
                "tensors": {
                    "value": "[torch.linalg.eigvalsh(v)[:1] > 0.0 for v in flattened_value]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "eigvalsh_83": {
                "A": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/torch_transform.py": {
        "torch": {}
    },
    "pyro/distributions/transforms/__init__.py": {
        "torch": {
            "ComposeTransform_102": {
                "parts": {
                    "value": "[CorrLCholeskyTransform(), CorrMatrixCholeskyTransform().inv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ComposeTransform_116": {
                "parts": {
                    "value": "[OrderedTransform(), ExpTransform()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ComposeTransform_122": {
                "parts": {
                    "value": "[LowerCholeskyTransform(), CholeskyTransform().inv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ExpTransform_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LowerCholeskyTransform_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/affine_autoregressive.py": {
        "torch": {
            "Sigmoid_113": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSigmoid_114": {
                "variable": {
                    "value": "self.logsigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_136": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clamp_preserve_gradients(log_scale, self.log_scale_min_clip, self.log_scale_max_clip)",
                            "Call"
                        ],
                        [
                            "clamp_preserve_gradients(log_scale, min=self.log_scale_min_clip, max=self.log_scale_max_clip)",
                            "Call"
                        ],
                        [
                            "self._cached_log_scale",
                            "Attribute"
                        ],
                        [
                            "clamp_preserve_gradients(log_scale, self.log_scale_min_clip, self.log_scale_max_clip)",
                            "Call"
                        ],
                        [
                            "self.logsigmoid(logit_scale + self.sigmoid_bias)",
                            "Call"
                        ],
                        [
                            "self.logsigmoid(logit_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[torch.zeros(x_size, device=y.device)] * input_dim",
                            "BinOp"
                        ],
                        [
                            "torch.stack(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(x_size, device=y.device)] * input_dim",
                            "BinOp"
                        ],
                        [
                            "torch.stack(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[torch.zeros(x_size, device=y.device)] * input_dim",
                            "BinOp"
                        ],
                        [
                            "torch.stack(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(x_size, device=y.device)] * input_dim",
                            "BinOp"
                        ],
                        [
                            "torch.stack(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_157": {
                "variable": {
                    "value": "inverse_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-clamp_preserve_gradients(log_scale[..., idx], min=self.log_scale_min_clip, max=self.log_scale_max_clip)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "x_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "y.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_156": {
                "tensors": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[torch.zeros(x_size, device=y.device)] * input_dim",
                            "BinOp"
                        ],
                        [
                            "torch.stack(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(x_size, device=y.device)] * input_dim",
                            "BinOp"
                        ],
                        [
                            "torch.stack(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "x_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "y.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_228": {
                "tensors": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[torch.zeros(x_size, device=y.device)] * input_dim",
                            "BinOp"
                        ],
                        [
                            "torch.stack(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(x_size, device=y.device)] * input_dim",
                            "BinOp"
                        ],
                        [
                            "torch.stack(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_229": {
                "input": {
                    "value": "-logit_scale[..., idx] - self.sigmoid_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/affine_coupling.py": {
        "torch": {
            "cat_144": {
                "tensors": {
                    "value": "[y1, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "-log_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_143": {
                "input": {
                    "value": "log_scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_scale.reshape(log_scale.shape[:-1] + x2.shape[self.dim:])",
                            "Call"
                        ],
                        [
                            "clamp_preserve_gradients(log_scale, self.log_scale_min_clip, self.log_scale_max_clip)",
                            "Call"
                        ],
                        [
                            "log_scale.reshape(log_scale.shape[:-1] + y2.shape[self.dim:])",
                            "Call"
                        ],
                        [
                            "clamp_preserve_gradients(log_scale, self.log_scale_min_clip, self.log_scale_max_clip)",
                            "Call"
                        ],
                        [
                            "self._cached_log_scale",
                            "Attribute"
                        ],
                        [
                            "log_scale.reshape(log_scale.shape[:-1] + x2.shape[self.dim:])",
                            "Call"
                        ],
                        [
                            "clamp_preserve_gradients(log_scale, self.log_scale_min_clip, self.log_scale_max_clip)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/transforms/basic.py": {
        "torch": {
            "TanhTransform_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "elu_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_64": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_67": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_70": {
                "condition": {
                    "value": "x >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(x) * math.log(0.01)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_31": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_31": {
                "input": {
                    "value": "torch.log1p(y + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_31": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log1p_32": {
                "input": {
                    "value": "y + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_71": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/batchnorm.py": {
        "torch": {
            "Parameter_81": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "var_136": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_91": {
                "input": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_103": {
                "input": {
                    "value": "self.moving_variance + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_127": {
                "input": {
                    "value": "var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_140": {
                "input": {
                    "value": "var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/block_autoregressive.py": {
        "torch": {
            "logsumexp_25": {
                "input": {
                    "value": "A.unsqueeze(-1) + B.unsqueeze(-3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MaskedBlockLinear(input_dim, input_dim * hidden_factors[0], input_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_224": {
                "variable": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(out_features, in_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_225": {
                "variable": {
                    "value": "self._diag_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.nn.init.uniform_(torch.Tensor(out_features, 1)).log()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_243": {
                "variable": {
                    "value": "mask_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_243": {
                "variable": {
                    "value": "mask_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tril_251": {
                "variable": {
                    "value": "mask_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(dim, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_251": {
                "variable": {
                    "value": "mask_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.nn.init.normal_(torch.Tensor(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_162": {
                "variable": {
                    "value": "self._cached_logDetJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._cached_logDetJ",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_165": {
                "variable": {
                    "value": "term1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate.sigmoid() + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_166": {
                "variable": {
                    "value": "log1p_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps - self.gate.sigmoid()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_167": {
                "variable": {
                    "value": "log_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate.sigmoid() + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_168": {
                "variable": {
                    "value": "term2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log1p_gate - log_gate + self._cached_logDetJ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_230": {
                "data": {
                    "value": "torch.nn.init.uniform_(torch.Tensor(out_features), -1 / math.sqrt(out_features), 1 / math.sqrt(out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_264": {
                "input": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_275": {
                "input": {
                    "value": "w_squared_norm + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_251": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_283": {
                "input": {
                    "value": "w",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.exp(self._weight) * self.mask_d + self._weight * self.mask_o",
                            "BinOp"
                        ],
                        [
                            "self._diag_weight.exp() * w / (w_squared_norm.sqrt() + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/cholesky.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.shape[:-1] + (D, D)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "last_squared_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.shape[:-1] + (D,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "z_tri",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape[:-2] + (D - 2, D - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_stack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[y[..., 1:, 0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_111": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_133": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_103": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(z.shape[:-1] + (D, D), dtype=z.dtype, device=z.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(y, -2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_79": {
                "input": {
                    "value": "2 * z / (1 - z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diagonal_113": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diagonal_134": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/discrete_cosine.py": {
        "torch": {
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_60": {
                "variable": {
                    "value": "freq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "size - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/generalized_channel_permute.py": {
        "torch": {
            "solve_triangular_89": {
                "variable": {
                    "value": "Ux",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "B": {
                    "value": "LUx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(y_flat.unsqueeze(-3) * self.permutation.T.unsqueeze(-1)).sum(-2)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_triangular_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "B": {
                    "value": "Ux",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.solve_triangular(self.L, LUx, upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "qr_174": {
                "variable": {
                    "value": "(W, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(channels, channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_196": {
                "variable": {
                    "value": "self.LU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "LU",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nn(context)",
                            "Call"
                        ],
                        [
                            "LU.view(LU.shape[:-1] + (self.channels, self.channels))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "lu_unpack_181": {
                "variable": {
                    "value": "(P, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "LU",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nn(context)",
                            "Call"
                        ],
                        [
                            "LU.view(LU.shape[:-1] + (self.channels, self.channels))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "LU_pivots": {
                    "value": "pivots",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_272": {
                "variable": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_33": {
                "n": {
                    "value": "self.LU.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.LU.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.LU.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "x.size()[:-3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_174": {
                "*size": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_275": {
                "n": {
                    "value": "len(permutation)",
                    "type": "Call",
                    "possible_values": []
                },
                "m": {
                    "value": "len(permutation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_189": {
                "n": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "m": {
                    "value": "channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/haar.py": {
        "torch": {}
    },
    "pyro/distributions/transforms/householder.py": {
        "torch": {
            "norm_32": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_unnormed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.u_unnormed() if callable(self.u_unnormed) else self.u_unnormed",
                            "IfExp"
                        ],
                        [
                            "self.nn(context)",
                            "Call"
                        ],
                        [
                            "u_unnormed.unsqueeze(-2)",
                            "Call"
                        ],
                        [
                            "torch.stack(u_unnormed, dim=-2)",
                            "Call"
                        ],
                        [
                            "partial(self._u_unnormed, context)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "variable": {
                    "value": "self.u_unnormed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(count_transforms, input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_33": {
                "input": {
                    "value": "u_unnormed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.u_unnormed() if callable(self.u_unnormed) else self.u_unnormed",
                            "IfExp"
                        ],
                        [
                            "self.nn(context)",
                            "Call"
                        ],
                        [
                            "u_unnormed.unsqueeze(-2)",
                            "Call"
                        ],
                        [
                            "torch.stack(u_unnormed, dim=-2)",
                            "Call"
                        ],
                        [
                            "partial(self._u_unnormed, context)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(u_unnormed, p=2, dim=-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "x.size()[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_243": {
                "variable": {
                    "value": "u_unnormed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "u_unnormed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.u_unnormed() if callable(self.u_unnormed) else self.u_unnormed",
                            "IfExp"
                        ],
                        [
                            "self.nn(context)",
                            "Call"
                        ],
                        [
                            "u_unnormed.unsqueeze(-2)",
                            "Call"
                        ],
                        [
                            "torch.stack(u_unnormed, dim=-2)",
                            "Call"
                        ],
                        [
                            "partial(self._u_unnormed, context)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/lower_cholesky_affine.py": {
        "torch": {
            "solve_triangular_60": {
                "A": {
                    "value": "self.scale_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "B": {
                    "value": "(y - self.loc).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "input": {
                    "value": "self.scale_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_51": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "x.size()[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/matrix_exponential.py": {
        "torch": {
            "Parameter_159": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim, input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "input": {
                    "value": "M",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "self.weights() if callable(self.weights) else self.weights",
                            "IfExp"
                        ],
                        [
                            "self.weights() if callable(self.weights) else self.weights",
                            "IfExp"
                        ],
                        [
                            "self.weights() if callable(self.weights) else self.weights",
                            "IfExp"
                        ]
                    ]
                },
                "other": {
                    "value": "power_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(M, power_term) / (idx + 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/transforms/neural_autoregressive.py": {
        "torch": {
            "LogSoftmax_84": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_105": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softplus(A)",
                            "Call"
                        ],
                        [
                            "self._cached_A",
                            "Attribute"
                        ]
                    ]
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_pre",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._cached_W_pre",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_133": {
                "variable": {
                    "value": "log_dDdx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(A + self.eps) + self.logsoftmax(W_pre) + T.log_abs_det_jacobian(C, T_C)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_134": {
                "input": {
                    "value": "A + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/normalize.py": {
        "torch": {}
    },
    "pyro/distributions/transforms/ordered.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[..., :1], x[..., 1:].exp()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_25": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([x[..., :1], x[..., 1:].exp()], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_29": {
                "tensors": {
                    "value": "[y[..., :1], x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "x[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/permute.py": {
        "torch": {
            "empty_like_68": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.permutation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "result[self.permutation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "self.permutation.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.permutation.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_140": {
                "variable": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dim[dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "x.size()[:-self.event_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/planar.py": {
        "torch": {
            "matmul_32": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_32": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(w.unsqueeze(-2), x.unsqueeze(-1)).squeeze(-1) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_56": {
                "variable": {
                    "value": "self._cached_logDetJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(1 + torch.matmul(psi_z.unsqueeze(-2), u_hat.unsqueeze(-1)).squeeze(-1).squeeze(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_33": {
                "input": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(u.unsqueeze(-2), w.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_57": {
                "input": {
                    "value": "1 + torch.matmul(psi_z.unsqueeze(-2), u_hat.unsqueeze(-1)).squeeze(-1).squeeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "input": {
                    "value": "w.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "input": {
                    "value": "psi_z.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u_hat.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/polynomial.py": {
        "torch": {
            "Parameter_85": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "powers",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "count_degree + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_136": {
                "variable": {
                    "value": "self._cached_logDetJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "(coefs * x_pow_matrix).sum((1, 2, 3)).view_as(x) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "self._cached_logDetJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_93": {
                "start": {
                    "value": "count_degree + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_default_dtype_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/power.py": {
        "torch": {
            "as_tensor_29": {
                "variable": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "exponent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "float(exponent)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(exponent)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_shapes_57": {
                "*shapes": {
                    "value": "shape",
                    "type": null,
                    "possible_values": []
                }
            },
            "broadcast_shapes_60": {
                "*shapes": {
                    "value": "shape",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/radial.py": {
        "torch": {
            "matmul_32": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_32": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_50": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_prime",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_137": {
                "variable": {
                    "value": "self.x0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.alpha_prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.beta_prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_33": {
                "input": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(u.unsqueeze(-2), w.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.softplus(alpha_prime)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_51": {
                "input": {
                    "value": "beta_prime",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log1p_62": {
                "input": {
                    "value": "beta_h + beta * h_prime * r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_61": {
                "input": {
                    "value": "beta_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beta * h",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/transforms/softplus.py": {
        "torch": {
            "softplus_50": {
                "variable": {
                    "value": "diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.diagonal(dim1=-2, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_27": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_33": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/spline.py": {
        "torch": {
            "cumsum_66": {
                "variable": {
                    "value": "knots",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "knots[..., 1:] - knots[..., :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_69": {
                "variable": {
                    "value": "knots",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "knots",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cumsum(lengths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(knots, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ],
                        [
                            "(upper - lower) * knots + lower",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_142": {
                "variable": {
                    "value": "derivatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "derivatives",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min_derivative + derivatives",
                            "BinOp"
                        ],
                        [
                            "F.pad(derivatives, pad=(1, 1), mode='constant', value=1.0 - min_derivative)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 - min_derivative",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_418": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.input_dim, self.count_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_421": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.input_dim, self.count_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_424": {
                "variable": {
                    "value": "self.unnormalized_derivatives",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.input_dim, self.count_bins - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_442": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_443": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_444": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.unnormalized_derivatives",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_560": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(self.unnormalized_widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "w.transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "w.reshape(w.shape[:-1] + (self.input_dim, self.count_bins))",
                            "Call"
                        ],
                        [
                            "F.softmax(w, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_561": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(self.unnormalized_heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "h.transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "h.reshape(h.shape[:-1] + (self.input_dim, self.count_bins))",
                            "Call"
                        ],
                        [
                            "F.softmax(h, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_562": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softplus(self.unnormalized_derivatives)",
                            "Call"
                        ],
                        [
                            "d.transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "d.reshape(d.shape[:-1] + (self.input_dim, self.count_bins - 1))",
                            "Call"
                        ],
                        [
                            "F.softplus(d)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_34": {
                "input": {
                    "value": "values[..., None] >= sorted_sequence",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_430": {
                "variable": {
                    "value": "self.unnormalized_lambdas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.input_dim, self.count_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_446": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.unnormalized_lambdas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_538": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.unnormalized_lambdas)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "l.transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "l.reshape(l.shape[:-1] + (self.input_dim, self.count_bins))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.sigmoid(l)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_173": {
                "input": {
                    "value": "input_derivatives / input_derivatives_plus_one",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_419": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.count_bins",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_422": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.count_bins",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_425": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.count_bins - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_211": {
                "input": {
                    "value": "torch.abs(denominator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_241": {
                "input": {
                    "value": "torch.abs(denominator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_292": {
                "input": {
                    "value": "denominator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "((wc - wa) * inputs + wa * ya - wc * yc) * (inputs <= yc).float() + ((wc - wb) * inputs + wb * yb - wc * yc) * (inputs > yc).float()",
                            "BinOp"
                        ],
                        [
                            "(wa * (input_lambdas - theta) + wc * theta) * (theta <= input_lambdas).float() + (wc * (1 - theta) + wb * (theta - input_lambdas)) * (theta > input_lambdas).float()",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_431": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.count_bins",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_259": {
                "input": {
                    "value": "discriminant",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b.pow(2) - 4 * a * c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_272": {
                "input": {
                    "value": "denominator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "((wc - wa) * inputs + wa * ya - wc * yc) * (inputs <= yc).float() + ((wc - wb) * inputs + wb * yb - wc * yc) * (inputs > yc).float()",
                            "BinOp"
                        ],
                        [
                            "(wa * (input_lambdas - theta) + wc * theta) * (theta <= input_lambdas).float() + (wc * (1 - theta) + wb * (theta - input_lambdas)) * (theta > input_lambdas).float()",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_212": {
                "input": {
                    "value": "denominator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "((wc - wa) * inputs + wa * ya - wc * yc) * (inputs <= yc).float() + ((wc - wb) * inputs + wb * yb - wc * yc) * (inputs > yc).float()",
                            "BinOp"
                        ],
                        [
                            "(wa * (input_lambdas - theta) + wc * theta) * (theta <= input_lambdas).float() + (wc * (1 - theta) + wb * (theta - input_lambdas)) * (theta > input_lambdas).float()",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_242": {
                "input": {
                    "value": "denominator",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "((wc - wa) * inputs + wa * ya - wc * yc) * (inputs <= yc).float() + ((wc - wb) * inputs + wb * yb - wc * yc) * (inputs > yc).float()",
                            "BinOp"
                        ],
                        [
                            "(wa * (input_lambdas - theta) + wc * theta) * (theta <= input_lambdas).float() + (wc * (1 - theta) + wb * (theta - input_lambdas)) * (theta > input_lambdas).float()",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/transforms/spline_autoregressive.py": {
        "torch": {
            "zeros_like_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "spline(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/transforms/spline_coupling.py": {
        "torch": {
            "cat_124": {
                "variable": {
                    "value": "log_detJ",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[log_detJ, log_detK]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "[y1, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "log_detJ",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[log_detJ, log_detK]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/sylvester.py": {
        "torch": {
            "Parameter_64": {
                "variable": {
                    "value": "self.R_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim, input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.S_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim, input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.R_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.S_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_71": {
                "variable": {
                    "value": "triangular_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(input_dim, input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_75": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.Q(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.R()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.S()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Q.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_128": {
                "variable": {
                    "value": "self._cached_logDetJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dtanh_dx(preactivation) * R.diagonal() * S.diagonal() + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "self._cached_logDetJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "partial_Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partial_Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(self.input_dim, dtype=x.dtype, layout=x.layout, device=x.device) - 2.0 * torch.ger(u[0], u[0])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(partial_Q, torch.eye(self.input_dim) - 2.0 * torch.ger(u[idx], u[idx]))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.eye(self.input_dim) - 2.0 * torch.ger(u[idx], u[idx])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "diag_84": {
                "input": {
                    "value": "self.tanh(self.R_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_88": {
                "input": {
                    "value": "self.tanh(self.S_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_93": {
                "n": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(S, Q.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_126": {
                "input": {
                    "value": "self.tanh(preactivation)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(Q, R)",
                            "Call"
                        ]
                    ]
                }
            },
            "ger_95": {
                "input": {
                    "value": "u[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec2": {
                    "value": "u[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_99": {
                "n": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ger_99": {
                "input": {
                    "value": "u[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec2": {
                    "value": "u[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/transforms/unit_cholesky.py": {
        "torch": {
            "eye_24": {
                "n": {
                    "value": "x.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/unit.py": {
        "torch": {
            "as_tensor_24": {
                "variable": {
                    "value": "log_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "log_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(log_factor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/distributions/util.py": {
        "torch": {
            "zeros_330": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_319": {
                "condition": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "x": {
                    "value": "tensor * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tensor.new_zeros(())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "data": {
                    "value": "fill_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "prototype.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "prototype.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_318": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/von_mises_3d.py": {
        "torch": {
            "abs_54": {
                "input": {
                    "value": "value.norm(2, -1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/distributions/zero_inflated.py": {
        "torch": {
            "where_76": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "value == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(gate + log_prob.exp()).log()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "log_prob",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(-gate).log1p() + self.base_dist.log_prob(value)",
                            "BinOp"
                        ],
                        [
                            "torch.where(value == 0, (gate + log_prob.exp()).log(), log_prob)",
                            "Call"
                        ],
                        [
                            "log_prob_minus_log_gate + log_gate",
                            "BinOp"
                        ],
                        [
                            "torch.where(value == 0, zero_log_prob, log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_83": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "value == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zero_log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "softplus(log_prob_minus_log_gate) + log_gate",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "log_prob",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(-gate).log1p() + self.base_dist.log_prob(value)",
                            "BinOp"
                        ],
                        [
                            "torch.where(value == 0, (gate + log_prob.exp()).log(), log_prob)",
                            "Call"
                        ],
                        [
                            "log_prob_minus_log_gate + log_gate",
                            "BinOp"
                        ],
                        [
                            "torch.where(value == 0, zero_log_prob, log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_89": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate.expand(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_91": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bernoulli(self.gate.expand(shape)).bool()",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "samples.new_zeros(())",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.base_dist.expand(shape).sample()",
                            "Call"
                        ],
                        [
                            "torch.where(mask, samples.new_zeros(()), samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_80": {
                "input": {
                    "value": "-gate_logits",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_82": {
                "input": {
                    "value": "log_prob_minus_log_gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-gate_logits + self.base_dist.log_prob(value)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/abstract_infer.py": {
        "torch": {
            "stack_306": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_likelihoods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._samples_buffer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_60": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._weights_buffer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weights_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "samples.dtype if samples.dtype.is_floating_point else torch.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_308": {
                "data": {
                    "value": "self.log_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ll.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_67": {
                "tensors": {
                    "value": "weights_by_chain",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "[tr.nodes[site]['value'] for site in sites]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "data": {
                    "value": "self.log_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_384": {
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "ocis.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(cis.size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "site['value'].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/autoguide/effect.py": {
        "torch": {
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_191": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "init_loc - init_weight * init_prior_mean",
                            "BinOp"
                        ],
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "init_loc * (1 - self._init_scale)",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_307": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "init_loc - init_weight * init_prior_mean",
                            "BinOp"
                        ],
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "init_loc * (1 - self._init_scale)",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_446": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "init_loc - init_weight * init_prior_mean",
                            "BinOp"
                        ],
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "init_loc * (1 - self._init_scale)",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_310": {
                "variable": {
                    "value": "init_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._init_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_313": {
                "variable": {
                    "value": "init_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "init_loc - init_weight * init_prior_mean",
                            "BinOp"
                        ],
                        [
                            "self._adjust_plates(unconstrained, event_dim)",
                            "Call"
                        ],
                        [
                            "init_loc * (1 - self._init_scale)",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self._init_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/autoguide/gaussian.py": {
        "torch": {
            "cholesky_555": {
                "variable": {
                    "value": "Lf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.flip(P, (-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_556": {
                "variable": {
                    "value": "L_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.flip(Lf, (-2, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "solve_triangular_557": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "L_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.transpose(torch.flip(Lf, (-2, -1)), -2, -1)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "torch.eye(P.shape[-1], dtype=P.dtype, device=P.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_425": {
                "variable": {
                    "value": "flat_info_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._dense_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "flat_precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._dense_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_219": {
                "variable": {
                    "value": "prec_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (u_size, d_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "init_loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "init_loc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_331": {
                "variable": {
                    "value": "global_indices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "pos + self._event_numel[u] * _plates_to_shape(broken_plates).numel()",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "pos + (batch_shape + event_shape).numel()",
                            "BinOp"
                        ],
                        [
                            "pos + (batch_shape + event_shape).numel()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "global_indices[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_shape + (-1,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "variable": {
                    "value": "index1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "info_vec_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prec_sqrt_shape[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_342": {
                "variable": {
                    "value": "index2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "precision_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prec_sqrt_shape[:-1] + prec_sqrt_shape[-2:-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_421": {
                "tensors": {
                    "value": "flat_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mvn.mean",
                            "Attribute"
                        ],
                        [
                            "pyro.sample(f'_{self._pyro_name}_latent', mvn, infer={'is_auxiliary': True})",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_536": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + log_prob.inputs['aux'].shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flip_555": {
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_556": {
                "input": {
                    "value": "Lf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(torch.flip(P, (-2, -1)))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_558": {
                "n": {
                    "value": "P.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "P.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "P.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inv_187": {
                "variable": {
                    "value": "init_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "site['value']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_198": {
                "input": {
                    "value": "init_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "biject_to(site['fn'].support).inv(site['value']).detach()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_shapes_410": {
                "*shapes": {
                    "value": "sample_shape",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/autoguide/guides.py": {
        "torch": {
            "no_grad_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_669": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "parts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_801": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_829": {
                "variable": {
                    "value": "quantiles",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "quantiles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(quantiles, dtype=loc.dtype, device=loc.device).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "loc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_829": {
                "variable": {
                    "value": "quantiles",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_816": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_877": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._init_loc()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_937": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._init_loc()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1001": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._init_loc()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1008": {
                "variable": {
                    "value": "self.cov_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loc.new_empty(self.latent_dim, self.rank).normal_(0, 1 / self.rank ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1054": {
                "variable": {
                    "value": "self._prototype_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_1155": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self._init_loc()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_482": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "biject_to(site['fn'].support).inv(site['value'].detach()).detach()",
                            "Call"
                        ],
                        [
                            "periodic_repeat(init_loc, full_size, dim).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_589": {
                "variable": {
                    "value": "site_quantiles",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "quantiles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(quantiles, dtype=loc.dtype, device=loc.device).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "site_loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "site_loc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inv_667": {
                "variable": {
                    "value": "unconstrained_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "constrained_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "site['value'].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_shapes_736": {
                "variable": {
                    "value": "unconstrained_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "*shapes": {
                    "value": "unconstrained_shape",
                    "type": null,
                    "possible_values": []
                }
            },
            "cholesky_1181": {
                "variable": {
                    "value": "scale_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "H.inverse()",
                            "Call"
                        ],
                        [
                            "cov / scale[None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inv_471": {
                "variable": {
                    "value": "init_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "site['value'].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_839": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_like_879": {
                "input": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_1175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inv_644": {
                "A": {
                    "value": "site['value']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_887": {
                "input": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_887": {
                "input": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_945": {
                "input": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_945": {
                "input": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/autoguide/initialization.py": {
        "torch": {
            "zeros_like_45": {
                "input": {
                    "value": "t.inv(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_152": {
                "input": {
                    "value": "t.inv(value)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/autoguide/structured.py": {
        "torch": {
            "no_grad_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_278": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "deep_getattr(self.locs, name)",
                            "Call"
                        ],
                        [
                            "deep_getattr(self.locs, name).detach()",
                            "Call"
                        ],
                        [
                            "loc.reshape(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_shapes_328": {
                "variable": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "*shapes": {
                    "value": "aux_value.shape[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "inv_183": {
                "variable": {
                    "value": "init_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "site['value'].detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_208": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "biject_to(site['fn'].support).inv(site['value'].detach()).detach()",
                            "Call"
                        ],
                        [
                            "init_locs[name]",
                            "Subscript"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "variable": {
                    "value": "dep",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "numel[upstream]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "numel[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/csis.py": {
        "torch": {
            "grad_125": {
                "variable": {
                    "value": "guide_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "particle_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._differentiable_loss_particle(guide_trace)",
                            "Call"
                        ],
                        [
                            "particle_loss / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "guide_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "set((site['value'].unconstrained() for site in particle_param_capture.trace.nodes.values()))",
                            "Call"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/energy_distance.py": {
        "torch": {
            "einsum_22": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbe,nbe->nb",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_25": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nbe,nbe->n",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - y",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/importance.py": {
        "torch": {
            "cat_231": {
                "variable": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "model_trace.log_prob_sum() - guide_trace.log_prob_sum()",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "log_weights - torch.logsumexp(log_weights)",
                            "BinOp"
                        ],
                        [
                            "log_weights - log_weights.max()",
                            "BinOp"
                        ],
                        [
                            "[vectorized_importance_weights(model, guide, *args, num_samples=max_simultaneous_particles, max_plate_nesting=max_plate_nesting, **kwargs)[0] for _ in range(N)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(log_weights)",
                            "Call"
                        ],
                        [
                            "torch.sort(log_weights, descending=False)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "log_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.log_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_65": {
                "variable": {
                    "value": "log_num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(self.num_samples * 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "log_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.log_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "ess",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.logsumexp(2 * log_w_norm, 0)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_233": {
                "input": {
                    "value": "log_weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "model_trace.log_prob_sum() - guide_trace.log_prob_sum()",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "log_weights - torch.logsumexp(log_weights)",
                            "BinOp"
                        ],
                        [
                            "log_weights - log_weights.max()",
                            "BinOp"
                        ],
                        [
                            "[vectorized_importance_weights(model, guide, *args, num_samples=max_simultaneous_particles, max_plate_nesting=max_plate_nesting, **kwargs)[0] for _ in range(N)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(log_weights)",
                            "Call"
                        ],
                        [
                            "torch.sort(log_weights, descending=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_66": {
                "input": {
                    "value": "log_w - log_num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_150": {
                "equation": {
                    "value": "site['packed']['log_prob']._pyro_dims + '->' + wd",
                    "type": "BinOp",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[site['packed']['log_prob']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_158": {
                "equation": {
                    "value": "site['packed']['log_prob']._pyro_dims + '->' + wd",
                    "type": "BinOp",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[site['packed']['log_prob']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_164": {
                "input": {
                    "value": "log_weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "model_trace.log_prob_sum() - guide_trace.log_prob_sum()",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "log_weights - torch.logsumexp(log_weights)",
                            "BinOp"
                        ],
                        [
                            "log_weights - log_weights.max()",
                            "BinOp"
                        ],
                        [
                            "[vectorized_importance_weights(model, guide, *args, num_samples=max_simultaneous_particles, max_plate_nesting=max_plate_nesting, **kwargs)[0] for _ in range(N)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(log_weights)",
                            "Call"
                        ],
                        [
                            "torch.sort(log_weights, descending=False)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_65": {
                "data": {
                    "value": "self.num_samples * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_78": {
                "input": {
                    "value": "log_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(self.log_weights)",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.log_weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_79": {
                "input": {
                    "value": "log_w_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_w - torch.logsumexp(log_w, 0)",
                            "BinOp"
                        ],
                        [
                            "self.get_normalized_weights(log_scale=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_91": {
                "input": {
                    "value": "2 * log_w_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/inspect.py": {
        "torch": {
            "enable_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/mcmc/adaptation.py": {
        "torch": {
            "eye_234": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_476": {
                "variable": {
                    "value": "bottom_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(size - head_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_223": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "solve_triangular_235": {
                "A": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "B": {
                    "value": "identity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(x.size(-1), dtype=x.dtype, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "z_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z[name].detach().reshape(-1) for name in site_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "r_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[site_name].reshape(-1) for site_name in site_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "r_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[site_name].reshape(-1) for site_name in site_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "z_grad_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_grad[name].reshape(-1) for name in site_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_518": {
                "variable": {
                    "value": "r_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[site_name].reshape(-1) for site_name in site_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_577": {
                "variable": {
                    "value": "r_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[site_name].reshape(-1) for site_name in site_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "eye_475": {
                "n": {
                    "value": "head_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dense_size",
                            "Name"
                        ]
                    ]
                },
                "m": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense_size + diag_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_296": {
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_298": {
                "n": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/mcmc/api.py": {
        "torch": {
            "Tensor_110": {
                "variable": {
                    "value": "self.default_tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_578": {
                "tensors": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_116": {
                "t": {
                    "value": "self.default_tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initial_seed_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_562": {
                "obj": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_719": {
                "obj": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/mcmc/hmc.py": {
        "torch": {
            "zeros_223": {
                "*size": {
                    "value": "size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sum([self.initial_params[site].numel() for site in dense_sites])",
                            "Call"
                        ],
                        [
                            "sum([self.initial_params[site].numel() for site in diag_sites])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_223": {
                "*size": {
                    "value": "size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sum([self.initial_params[site].numel() for site in dense_sites])",
                            "Call"
                        ],
                        [
                            "sum([self.initial_params[site].numel() for site in diag_sites])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/mcmc/util.py": {
        "torch": {
            "reshape_550": {
                "variable": {
                    "value": "value_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trace.nodes[site]['value']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,) + value.shape[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randint_803": {
                "variable": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_309": {
                "variable": {
                    "value": "self._compiled_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "_pe_jit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ignore_jit_warnings()(_pe_jit)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_353": {
                "input": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_499": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "sample.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_646": {
                "tensors": {
                    "value": "[s[site] for s in collected]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_829": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tmp",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_283": {
                "input": {
                    "value": "t.log_abs_det_jacobian(params_constrained[name], params[name])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_363": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tmp",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/predictive.py": {
        "torch": {
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_62": {
                "tensors": {
                    "value": "[s[site] for s in collected]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "input": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(num_samples,) + value.shape if torch.is_tensor(value) else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_tensor_123": {
                "obj": {
                    "value": "value",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "model_trace.nodes['_RETURN']['value']",
                            "Subscript"
                        ],
                        [
                            "trace.nodes[site]['value']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/renyi_elbo.py": {
        "torch": {
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "elbo_particles",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elbo_particles",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "elbo_particles[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(elbo_particles)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "elbo_particles[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(elbo_particles)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_206": {
                "variable": {
                    "value": "elbo_particles",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "elbo_particles",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "elbo_particles[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(elbo_particles)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "elbo_particles[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(elbo_particles)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_207": {
                "variable": {
                    "value": "surrogate_elbo_particles",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "surrogate_elbo_particles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "surrogate_elbo_particles[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(surrogate_elbo_particles)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_129": {
                "input": {
                    "value": "log_weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(1.0 - self.alpha) * elbo_particles",
                            "BinOp"
                        ],
                        [
                            "(1.0 - self.alpha) * elbo_particles",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_210": {
                "input": {
                    "value": "log_weights",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(1.0 - self.alpha) * elbo_particles",
                            "BinOp"
                        ],
                        [
                            "(1.0 - self.alpha) * elbo_particles",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_186": {
                "variable": {
                    "value": "elbo_particle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_holder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros_like(elbo_particle)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_187": {
                "variable": {
                    "value": "surrogate_elbo_particle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_holder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros_like(elbo_particle)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_190": {
                "variable": {
                    "value": "tensor_holder",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "elbo_particle",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "elbo_particle + log_prob_sum",
                            "BinOp"
                        ],
                        [
                            "elbo_particle - log_prob_sum",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "elbo_particle + log_prob_sum.detach()",
                            "BinOp"
                        ],
                        [
                            "elbo_particle - log_prob_sum.detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(tensor_holder)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_193": {
                "variable": {
                    "value": "elbo_particles[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_holder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros_like(elbo_particle)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_194": {
                "variable": {
                    "value": "surrogate_elbo_particles[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_holder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros_like(elbo_particle)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/reparam/loc_scale.py": {
        "torch": {}
    },
    "pyro/infer/reparam/neutra.py": {
        "torch": {}
    },
    "pyro/infer/reparam/projected_normal.py": {
        "torch": {
            "zeros_like_41": {
                "input": {
                    "value": "fn.concentration",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/reparam/reparam.py": {
        "torch": {}
    },
    "pyro/infer/reparam/softmax.py": {
        "torch": {
            "zeros_like_45": {
                "input": {
                    "value": "proto",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fn.logits",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "proto",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fn.logits",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/reparam/split.py": {
        "torch": {
            "cat_67": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value_split",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None] * len(self.sections)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-self.event_dim",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/reparam/stable.py": {
        "torch": {
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/reparam/strategies.py": {
        "torch": {}
    },
    "pyro/infer/reparam/transform.py": {
        "torch": {}
    },
    "pyro/infer/reparam/unit_jacobian.py": {
        "torch": {
            "ComposeTransform_76": {
                "variable": {
                    "value": "transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "parts": {
                    "value": "[biject_to(fn.support).inv.with_cache(), self.transform]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/resampler.py": {
        "torch": {
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_101": {
                "input": {
                    "value": "logits.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/rws.py": {
        "torch": {
            "tensor_127": {
                "variable": {
                    "value": "wake_theta_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_169": {
                "variable": {
                    "value": "log_sum_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_joints - log_qs.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_163": {
                "tensors": {
                    "value": "log_joints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "log_joints[0] if self.vectorize_particles else torch.stack(log_joints)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_165": {
                "tensors": {
                    "value": "log_qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "log_qs[0] if self.vectorize_particles else torch.stack(log_qs)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/smcfilter.py": {
        "torch": {
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "self._log_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_particles",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_171": {
                "*size": {
                    "value": "batch_shape + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_174": {
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logp.exp()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/svgd.py": {
        "torch": {
            "arange_89": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_particles",
                    "type": "Call",
                    "possible_values": [
                        [
                            "norm_sq.size(0)",
                            "Call"
                        ],
                        [
                            "norm_sq.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_161": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_particles",
                    "type": "Call",
                    "possible_values": [
                        [
                            "norm_sq.size(0)",
                            "Call"
                        ],
                        [
                            "norm_sq.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_296": {
                "variable": {
                    "value": "attractive_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_kernel.sum(-1).exp()",
                            "Call"
                        ],
                        [
                            "log_kernel.exp()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "reshaped_particles_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "particles.grad.reshape(self.num_particles, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_297": {
                "variable": {
                    "value": "repulsive_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nm,nm...->n...",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_kernel.sum(-1).exp()",
                            "Call"
                        ],
                        [
                            "log_kernel.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_176": {
                "input": {
                    "value": "base_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.alpha + norm_sq / h",
                            "BinOp"
                        ]
                    ]
                }
            },
            "enable_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_305": {
                "variable": {
                    "value": "attractive_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nmd,md->nd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_kernel.sum(-1).exp()",
                            "Call"
                        ],
                        [
                            "log_kernel.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_308": {
                "variable": {
                    "value": "repulsive_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nmd,nmd->nd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_kernel.sum(-1).exp()",
                            "Call"
                        ],
                        [
                            "log_kernel.exp()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/svi.py": {
        "torch": {
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/trace_mean_field_elbo.py": {
        "torch": {
            "is_tensor_122": {
                "obj": {
                    "value": "kl_qp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kl_divergence(guide_site['fn'], model_site['fn'])",
                            "Call"
                        ],
                        [
                            "scale_and_mask(kl_qp, scale=guide_site['scale'], mask=guide_site['mask'])",
                            "Call"
                        ]
                    ]
                }
            },
            "numel_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/trace_mmd.py": {
        "torch": {
            "cat_206": {
                "variable": {
                    "value": "all_model_samples[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_model_samples[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "all_guide_samples[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_guide_samples[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "kernel(X, Z)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/trace_tail_adaptive_elbo.py": {
        "torch": {
            "argsort_73": {
                "variable": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_p - log_q",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_74": {
                "variable": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(self.num_particles, device=log_pq.device) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "rank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.argsort(log_pq, descending=False)",
                            "Call"
                        ],
                        [
                            "torch.index_select(torch.arange(self.num_particles, device=log_pq.device) + 1, -1, rank).type_as(log_pq)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_79": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.argsort(log_pq, descending=False)",
                            "Call"
                        ],
                        [
                            "torch.index_select(torch.arange(self.num_particles, device=log_pq.device) + 1, -1, rank).type_as(log_pq)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.tail_adaptive_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_75": {
                "start": {
                    "value": "self.num_particles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "log_pq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/traceenum_elbo.py": {
        "torch": {
            "is_tensor_435": {
                "obj": {
                    "value": "elbo",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "elbo + elbo_particle.item() / self.num_particles",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "elbo / self.num_particles",
                            "BinOp"
                        ],
                        [
                            "elbo + elbo_particle",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "elbo + _compute_dice_elbo(model_trace, guide_trace)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/infer/tracegraph_elbo.py": {
        "torch": {
            "pow_91": {
                "input": {
                    "value": "downstream_cost.detach() - baseline",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "dc_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "downstream_cost.shape",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "guide_site['value'].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/tracetmc_elbo.py": {
        "torch": {
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/infer/util.py": {
        "torch": {
            "is_tensor_63": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensordot_327": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "x.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_54": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_64": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(log_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "site['value'].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_287": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cost_terms",
                            "Name"
                        ],
                        [
                            "cost_terms",
                            "Name"
                        ],
                        [
                            "cost.masked_select(mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/nn/auto_reg_nn.py": {
        "torch": {
            "linspace_22": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_55": {
                "variable": {
                    "value": "var_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "permutation.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_56": {
                "variable": {
                    "value": "var_index[permutation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.get_default_dtype()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "input_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(context_dim), 1 + var_index)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cumsum_191": {
                "variable": {
                    "value": "ends",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(param_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "starts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(1).type_as(ends), ends[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_231": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[MaskedLinear(input_dim + context_dim, hidden_dims[0], self.masks[0])]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_258": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_27": {
                "input": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(1, input_dim, steps=hidden_dim, device='cpu').to(torch.Tensor().device)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_31": {
                "input": {
                    "value": "indices - ints",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_118": {
                "input": {
                    "value": "_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "masked_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_205": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "context_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "data": {
                    "value": "param_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbind_283": {
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_dims",
                            "Name"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.f(layer(h))",
                            "Call"
                        ],
                        [
                            "self.layers[-1](h)",
                            "Call"
                        ],
                        [
                            "h + self.skip_layer(x)",
                            "BinOp"
                        ],
                        [
                            "h.reshape(list(x.size()[:-1]) + [self.output_multiplier, self.input_dim])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "param_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/nn/dense_nn.py": {
        "torch": {
            "cumsum_54": {
                "variable": {
                    "value": "ends",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(param_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "starts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(1).type_as(ends), ends[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.nn.Linear(input_dim + context_dim, hidden_dims[0])]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "param_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "input_dim + context_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "hidden_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "hidden_dims[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/nn/module.py": {
        "torch": {
            "inv_168": {
                "variable": {
                    "value": "unconstrained_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "constrained_value.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_169": {
                "data": {
                    "value": "unconstrained_value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "transform_to(constraint).inv(constrained_value.detach())",
                            "Call"
                        ],
                        [
                            "getattr(self, name + '_unconstrained')",
                            "Call"
                        ],
                        [
                            "_PYRO_PARAM_STORE._params[fullname]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.Parameter(unconstrained_value)",
                            "Call"
                        ],
                        [
                            "constrained_value.unconstrained()",
                            "Call"
                        ],
                        [
                            "_unconstrain(constrained_value, constraint)",
                            "Call"
                        ],
                        [
                            "getattr(self, name + '_unconstrained')",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(unconstrained_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_541": {
                "variable": {
                    "value": "unconstrained_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "unconstrained_value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "transform_to(constraint).inv(constrained_value.detach())",
                            "Call"
                        ],
                        [
                            "getattr(self, name + '_unconstrained')",
                            "Call"
                        ],
                        [
                            "_PYRO_PARAM_STORE._params[fullname]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.Parameter(unconstrained_value)",
                            "Call"
                        ],
                        [
                            "constrained_value.unconstrained()",
                            "Call"
                        ],
                        [
                            "_unconstrain(constrained_value, constraint)",
                            "Call"
                        ],
                        [
                            "getattr(self, name + '_unconstrained')",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(unconstrained_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_560": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "detach_provenance(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inv_572": {
                "variable": {
                    "value": "unconstrained_value.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "A": {
                    "value": "value.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_447": {
                "variable": {
                    "value": "unconstrained_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "unconstrained_value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "transform_to(constraint).inv(constrained_value.detach())",
                            "Call"
                        ],
                        [
                            "getattr(self, name + '_unconstrained')",
                            "Call"
                        ],
                        [
                            "_PYRO_PARAM_STORE._params[fullname]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.Parameter(unconstrained_value)",
                            "Call"
                        ],
                        [
                            "constrained_value.unconstrained()",
                            "Call"
                        ],
                        [
                            "_unconstrain(constrained_value, constraint)",
                            "Call"
                        ],
                        [
                            "getattr(self, name + '_unconstrained')",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(unconstrained_value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/ops/arrowhead.py": {
        "torch": {
            "cat_55": {
                "variable": {
                    "value": "top",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[top_left, top_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_76": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "head_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.top.size(0)",
                            "Call"
                        ],
                        [
                            "x.top.size(0)",
                            "Call"
                        ],
                        [
                            "x.top.size(0)",
                            "Call"
                        ],
                        [
                            "x.top.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_triangular_77": {
                "variable": {
                    "value": "top_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "B": {
                    "value": "identity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.eye(head_size, dtype=A.dtype, device=A.device)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "top",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[top_left, top_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "[top, bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "[bottom_left, bottom_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flip_42": {
                "variable": {
                    "value": "top_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linalg.cholesky(torch.flip(schur_complement, (-2, -1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cholesky_43": {
                "input": {
                    "value": "torch.flip(schur_complement, (-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_43": {
                "input": {
                    "value": "schur_complement",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A - B_Dsqrt.matmul(B_Dsqrt.t())",
                            "BinOp"
                        ]
                    ]
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/contract.py": {
        "torch": {
            "empty_554": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size((sizes[d] for d in output))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "operands[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "operands[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/einsum/adjoint.py": {
        "torch": {
            "cat_144": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "slices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None] * len(contract_dims)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "parts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "packed.broadcast_all(sample1, sample2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/ops/einsum/torch_log.py": {
        "torch": {
            "einsum_51": {
                "equation": {
                    "value": "equation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''.join((rename.get(s, s) for s in equation))",
                            "Call"
                        ]
                    ]
                },
                "*operands": {
                    "value": "exp_operands",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/ops/gamma_gaussian.py": {
        "torch": {
            "cat_416": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([P_xx, P_xy], -1), torch.cat([P_yx, P_yy], -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "info_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[info_x, info_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(na, device=device), torch.arange(x.dim(), x.dim() + nc, device=device), torch.arange(na, x.dim(), device=device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_157": {
                "variable": {
                    "value": "info_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.info_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(left, right)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "pad_158": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "lr + lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_277": {
                "variable": {
                    "value": "P_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_bb",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.precision[..., n:, n:]",
                            "Subscript"
                        ],
                        [
                            "self.precision[..., b, b]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "solve_triangular_278": {
                "variable": {
                    "value": "P_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "P_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(P_bb)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "P_ba",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.precision[..., b, a]",
                            "Subscript"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_triangular_284": {
                "variable": {
                    "value": "b_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "P_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(P_bb)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "info_b.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cholesky_322": {
                "variable": {
                    "value": "chol_P",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_triangular_323": {
                "variable": {
                    "value": "chol_P_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "chol_P",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(self.precision)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "self.info_vec.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_323": {
                "variable": {
                    "value": "chol_P_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "[getattr(g, attr) for g in parts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim + len(parts[0].batch_shape)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_417": {
                "tensors": {
                    "value": "[P_yx, P_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_459": {
                "start": {
                    "value": "na",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dim() - dims",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.info_vec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_460": {
                "start": {
                    "value": "x.dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "x.dim() + nc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.info_vec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_461": {
                "start": {
                    "value": "na",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.dim() - dims",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "x.dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.info_vec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "lgamma_42": {
                "input": {
                    "value": "self.concentration",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/gaussian.py": {
        "torch": {
            "cat_435": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([P_xx, P_xy], -1), torch.cat([P_yx, P_yy], -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "info_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[info_x, info_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_94": {
                "variable": {
                    "value": "info_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.info_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(left, right)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "pad_95": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "lr + lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_151": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sample_shape + self.batch_shape + (self.dim(), 1)",
                            "BinOp"
                        ],
                        [
                            "sample_shape + self.batch_shape + self.loc.shape[-1:]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "loc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(left, dim, device=value.device), torch.arange(left, device=value.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_349": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sample_shape + self.batch_shape + (self.dim(), 1)",
                            "BinOp"
                        ],
                        [
                            "sample_shape + self.batch_shape + self.loc.shape[-1:]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.loc.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.loc.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diagonal_532": {
                "variable": {
                    "value": "logdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cholesky(Pbb + Qbb)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_532": {
                "variable": {
                    "value": "logdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_532": {
                "variable": {
                    "value": "logdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Independent_354": {
                "variable": {
                    "value": "mvn",
                    "type": "Variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "torch.distributions.Normal(self.loc, scale=self.scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_515": {
                "input": {
                    "value": "Qcc",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(na, 0, na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_516": {
                "input": {
                    "value": "yc",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "[getattr(g, attr) for g in parts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dim + len(parts[0].batch_shape)",
                            "BinOp"
                        ],
                        [
                            "self.dim()",
                            "Call"
                        ],
                        [
                            "self.dim()",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_436": {
                "tensors": {
                    "value": "[P_yx, P_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_519": {
                "input": {
                    "value": "Qbc",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_214": {
                "start": {
                    "value": "left",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "value.size(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "end": {
                    "value": "dim",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dim + len(parts[0].batch_shape)",
                            "BinOp"
                        ],
                        [
                            "self.dim()",
                            "Call"
                        ],
                        [
                            "self.dim()",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_215": {
                "start": {
                    "value": "left",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "value.size(-1)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_355": {
                "loc": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/hessian.py": {
        "torch": {
            "grad_13": {
                "variable": {
                    "value": "dys",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_14": {
                "variable": {
                    "value": "flat_dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dy.reshape(-1) for dy in dys]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_17": {
                "variable": {
                    "value": "Hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Hij.reshape(-1) for Hij in torch.autograd.grad(dyi, xs, retain_graph=True)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "grad_18": {
                "outputs": {
                    "value": "dyi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flat_dy",
                            "Name"
                        ]
                    ]
                },
                "inputs": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/indexing.py": {
        "torch": {
            "arange_188": {
                "variable": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "tensor.size(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/integrator.py": {
        "torch": {
            "grad_85": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "potential_energy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "potential_fn(z)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/jit.py": {
        "torch": {
            "trace_107": {
                "variable": {
                    "value": "self.compiled[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "compiled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ignore_jit_warnings()(compiled)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/ops/linalg.py": {
        "torch": {
            "sqrt_67": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p2 / 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_88": {
                "variable": {
                    "value": "Hinv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_like_31": {
                "variable": {
                    "value": "inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_76": {
                "input": {
                    "value": "phi[..., 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_77": {
                "input": {
                    "value": "phi[..., 0, 0] + 2 * math.pi / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_40": {
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_69": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/newton.py": {
        "torch": {
            "stack_150": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad(g[..., 0].sum(), [x], create_graph=True)[0], grad(g[..., 1].sum(), [x], create_graph=True)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_214": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad(g[..., 0].sum(), [x], create_graph=True)[0], grad(g[..., 1].sum(), [x], create_graph=True)[0], grad(g[..., 2].sum(), [x], create_graph=True)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_105": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_106": {
                "outputs": {
                    "value": "g.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_149": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_213": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_152": {
                "outputs": {
                    "value": "g[..., 0].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_153": {
                "outputs": {
                    "value": "g[..., 1].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_171": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "H.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_216": {
                "outputs": {
                    "value": "g[..., 0].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_217": {
                "outputs": {
                    "value": "g[..., 1].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_218": {
                "outputs": {
                    "value": "g[..., 2].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_235": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "H.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/packed.py": {
        "torch": {
            "where_160": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tensor.new_zeros(())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_126": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "equation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lhs._pyro_dims + ',' + rhs._pyro_dims + '->' + dims",
                            "BinOp"
                        ]
                    ]
                },
                "*operands": {
                    "value": "lhs",
                    "type": "Variable",
                    "possible_values": []
                },
                "backend": {
                    "value": "torch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_156": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/provenance.py": {
        "torch": {}
    },
    "pyro/ops/rings.py": {
        "torch": {}
    },
    "pyro/ops/special.py": {
        "torch": {
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_132": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "250",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lgamma_133": {
                "variable": {
                    "value": "lgammas_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(1, terms + orders + 1, device=value.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_133": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "terms + orders + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_136": {
                "input": {
                    "value": "value / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "ndarray": {
                    "value": "log_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(quad_rule[1]) - 0.5 * np.log(np.pi)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_204": {
                "input": {
                    "value": "nonzero_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "nonzero_value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/ssm_gp.py": {
        "torch": {
            "ones_48": {
                "variable": {
                    "value": "length_scale_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_gps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_52": {
                "variable": {
                    "value": "kernel_scale_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_gps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_86": {
                "input": {
                    "value": "-dt / rho",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.stationary_covariance()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "-root_three * dt_rho",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_115": {
                "input": {
                    "value": "-dt_rho",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/stats.py": {
        "torch": {
            "stack_78": {
                "variable": {
                    "value": "new_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input[:, :N_half], input[:, -N_half:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_real_109": {
                "variable": {
                    "value": "freqvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rfft(centered_signal, n=M2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "irfft_113": {
                "variable": {
                    "value": "autocorr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "freqvec_gram",
                    "type": "Name",
                    "possible_values": [
                        [
                            "freqvec.pow(2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "M2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * M",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_152": {
                "variable": {
                    "value": "triu_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "input.size(dim)",
                            "Call"
                        ],
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "X.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "input.size(dim)",
                            "Call"
                        ],
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "X.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_152": {
                "variable": {
                    "value": "triu_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "triu_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(N, N) + (1,) * (input.dim() - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_230": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_231": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(input.size(dim), dtype=input.dtype, device=input.device)",
                            "Call"
                        ],
                        [
                            "torch.exp(Ls - Ls.unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "1.0 / weights.sum(-1)",
                            "BinOp"
                        ],
                        [
                            "weights[not_small_weights]",
                            "Subscript"
                        ],
                        [
                            "weights / weights.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred.size(0)",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "replacement",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_300": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index_start, index_start + index_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "input.dim() + dim if dim < 0 else dim",
                            "IfExp"
                        ],
                        [
                            "input.dim() + dim if dim < 0 else dim",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log1p_385": {
                "variable": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-bs.unsqueeze(-1) * X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_385": {
                "variable": {
                    "value": "ks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_388": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Ls - Ls.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_397": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-b * X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_397": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_246": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(probs, dtype=input.dtype, device=input.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_301": {
                "input": {
                    "value": "sorted_input",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "input.sort(dim)[0]",
                            "Subscript"
                        ],
                        [
                            "input.sort(dim)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "input.dim() + dim if dim < 0 else dim",
                            "IfExp"
                        ],
                        [
                            "input.dim() + dim if dim < 0 else dim",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "index": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.multinomial(weights, num_samples, replacement)",
                            "Call"
                        ],
                        [
                            "probs * max_index",
                            "BinOp"
                        ],
                        [
                            "torch.stack([index_start, index_start + index_length], dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_337": {
                "variable": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rfft_109": {
                "input": {
                    "value": "centered_signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input - input.mean(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "M2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * M",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "data": {
                    "value": "range(N, 0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "range(mass - index_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_296": {
                "data": {
                    "value": "range(index_length, mass)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_344": {
                "input": {
                    "value": "log_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_weights.reshape([-1] + (input.dim() - dim - 1) * [1])",
                            "Call"
                        ],
                        [
                            "torch.zeros(input.size(dim), dtype=input.dtype, device=input.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_375": {
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X.double()",
                            "Call"
                        ],
                        [
                            "torch.sort(X, descending=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_441": {
                "start": {
                    "value": "num_samples - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_386": {
                "input": {
                    "value": "-bs / ks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_381": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "M + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/streaming.py": {
        "torch": {
            "stack_176": {
                "tensors": {
                    "value": "self.samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/ops/tensor_utils.py": {
        "torch": {
            "eye_36": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "block_size",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "mat.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "block_size",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_164": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(duration)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, math.pi / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_166": {
                "variable": {
                    "value": "freq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_period / min_period",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rfft_235": {
                "variable": {
                    "value": "f_signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "fast_ftt_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next_fast_len(padded_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "rfft_236": {
                "variable": {
                    "value": "f_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "fast_ftt_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next_fast_len(padded_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "irfft_238": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_signal * f_kernel",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "fast_ftt_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next_fast_len(padded_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_264": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M, torch.matmul(M, M)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[..., ::2], x[..., 1::2].flip(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rfft_295": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape(x.shape[:dim + 1] + (-1,)).transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[..., ::2], x[..., 1::2].flip(-1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[:dim + 1] + (-1,)).transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "irfft(Y, n=N)",
                            "Call"
                        ],
                        [
                            "y.transpose(-1, -2)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "N",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mat.size(-1) // B",
                            "BinOp"
                        ],
                        [
                            "x.size(-1)",
                            "Call"
                        ],
                        [
                            "x.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_297": {
                "variable": {
                    "value": "coef_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linspace(0, 0.5 * math.pi, N + 1, dtype=x.dtype, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_301": {
                "variable": {
                    "value": "coef",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coef_real[:M], -coef_real[-M:].flip(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X.real, -X.imag[..., 1:N - M + 1].flip(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.new_tensor([math.sqrt(N)]), x.new_full((N - 1,), math.sqrt(0.5 * N))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.new_tensor([math.sqrt(N)]), x.new_full((N - 1,), math.sqrt(0.5 * N))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_344": {
                "variable": {
                    "value": "xi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-x[..., N - M + 1:]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_344": {
                "variable": {
                    "value": "xi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_345": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[..., :M], xi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_346": {
                "variable": {
                    "value": "coef_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linspace(0, 0.5 * math.pi, N + 1, dtype=x.dtype, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_349": {
                "variable": {
                    "value": "coef",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coef_real[:M], coef_real[-M:].flip(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "irfft_352": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rfft(y, n=N)",
                            "Call"
                        ],
                        [
                            "as_complex(coef) * as_complex(X)",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "N",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mat.size(-1) // B",
                            "BinOp"
                        ],
                        [
                            "x.size(-1)",
                            "Call"
                        ],
                        [
                            "x.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_373": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lo, hi, end]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_391": {
                "variable": {
                    "value": "even_odd",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[even, odd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_391": {
                "variable": {
                    "value": "even_odd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "even.shape[:-1] + (-1,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[even_odd, end]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cholesky_430": {
                "variable": {
                    "value": "Lf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.flip(P, (-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_431": {
                "variable": {
                    "value": "L_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.flip(Lf, (-2, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "solve_triangular_432": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "L_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.transpose(torch.flip(Lf, (-2, -1)), -2, -1)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "torch.eye(P.shape[-1], dtype=P.dtype, device=P.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_450": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.squeeze().reshape(x.shape)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x * scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat([lo, hi, end], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([even_odd, end], dim=-1)",
                            "Call"
                        ],
                        [
                            "x / norm.clamp(min=torch.finfo(x.dtype).tiny)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "view_as_complex_23": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.squeeze().reshape(x.shape)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x * scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat([lo, hi, end], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([even_odd, end], dim=-1)",
                            "Call"
                        ],
                        [
                            "x / norm.clamp(min=torch.finfo(x.dtype).tiny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_117": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(tensor, (0, 0) * (-1 - dim) + (0, padding))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0) * (-1 - dim) + (0, padding)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_267": {
                "variable": {
                    "value": "doubled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result[-1].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tensor.repeat(*repeats)",
                            "Call"
                        ],
                        [
                            "result[(Ellipsis, slice(None, size)) + (slice(None),) * (-1 - dim)]",
                            "Subscript"
                        ],
                        [
                            "tensor.reshape(shape).cumsum(dim=dim - 1).reshape(tensor.shape)",
                            "Call"
                        ],
                        [
                            "result[(Ellipsis, slice(None, size)) + (slice(None),) * (-1 - dim)]",
                            "Subscript"
                        ],
                        [
                            "(freq * t + phase).cos_().reshape(duration, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "irfft(f_result, n=fast_ftt_size)",
                            "Call"
                        ],
                        [
                            "torch.stack([M, torch.matmul(M, M)])",
                            "Call"
                        ],
                        [
                            "torch.stack([result, doubled]).reshape(-1, *result.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_268": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result, doubled]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_268": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "*result.shape[1:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cholesky_399": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.squeeze().reshape(x.shape)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x * scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat([lo, hi, end], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([even_odd, end], dim=-1)",
                            "Call"
                        ],
                        [
                            "x / norm.clamp(min=torch.finfo(x.dtype).tiny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "solve_triangular_426": {
                "A": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape(x.shape[:dim + 1] + (-1,)).transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[..., ::2], x[..., 1::2].flip(-1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[:dim + 1] + (-1,)).transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "irfft(Y, n=N)",
                            "Call"
                        ],
                        [
                            "y.transpose(-1, -2)",
                            "Call"
                        ]
                    ]
                },
                "B": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.squeeze().reshape(x.shape)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x * scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat([lo, hi, end], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([even_odd, end], dim=-1)",
                            "Call"
                        ],
                        [
                            "x / norm.clamp(min=torch.finfo(x.dtype).tiny)",
                            "BinOp"
                        ]
                    ]
                },
                "upper": {
                    "value": "upper",
                    "type": "Name",
                    "possible_values": [
                        [
                            "not upper",
                            "UnaryOp"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_298": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_347": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_354": {
                "tensors": {
                    "value": "[y, y.flip(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_354": {
                "input": {
                    "value": "x.shape[:-1] + (-1,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flip_430": {
                "input": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_431": {
                "input": {
                    "value": "Lf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(torch.flip(P, (-2, -1)))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_433": {
                "n": {
                    "value": "P.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "P.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "P.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "input": {
                    "value": "M",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mat.size(-2) // B",
                            "BinOp"
                        ],
                        [
                            "Y.size(-1)",
                            "Call"
                        ],
                        [
                            "N // 2 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mat.size(-2) // B",
                            "BinOp"
                        ],
                        [
                            "Y.size(-1)",
                            "Call"
                        ],
                        [
                            "N // 2 + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/ops/welford.py": {
        "torch": {
            "ger_36": {
                "input": {
                    "value": "delta_post",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sample - self._mean",
                            "BinOp"
                        ],
                        [
                            "sample - self._mean",
                            "BinOp"
                        ]
                    ]
                },
                "vec2": {
                    "value": "delta_pre",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sample - self._mean",
                            "BinOp"
                        ],
                        [
                            "sample - self._mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ger_75": {
                "input": {
                    "value": "delta_post[:self.head_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec2": {
                    "value": "delta_pre",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "sample - self._mean",
                            "BinOp"
                        ],
                        [
                            "sample - self._mean",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/optim/adagrad_rmsprop.py": {
        "torch": {
            "zeros_like_46": {
                "variable": {
                    "value": "state[sum]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/optim/clipped_adam.py": {
        "torch": {
            "zeros_like_76": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.add(p.data, alpha=group['weight_decay'])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_78": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.add(p.data, alpha=group['weight_decay'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/optim/dct_adam.py": {
        "torch": {
            "pad_23": {
                "variable": {
                    "value": "freq_domain",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0) * (-1 - dim) + (0, new_size - duration)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[time_domain, freq_domain]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(-x.dim(), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_138": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "_transform_forward(grad, time_dim, duration)",
                            "Call"
                        ],
                        [
                            "p.grad.data.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "_transform_forward(grad, time_dim, duration)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_140": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "_transform_forward(grad, time_dim, duration)",
                            "Call"
                        ],
                        [
                            "p.grad.data.masked_select(mask)",
                            "Call"
                        ],
                        [
                            "_transform_forward(grad, time_dim, duration)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_179": {
                "variable": {
                    "value": "state[step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_181": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_183": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pyro/optim/horovod.py": {
        "torch": {}
    },
    "pyro/optim/lr_scheduler.py": {
        "torch": {}
    },
    "pyro/optim/multi.py": {
        "torch": {
            "grad_86": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params.values()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/optim/optim.py": {
        "torch": {
            "load_189": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_177": {
                "obj": {
                    "value": "self.get_state()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__258": {
                "parameters": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_value__260": {
                "parameters": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "clip_value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/optim/pytorch_optimizers.py": {
        "torch": {}
    },
    "pyro/params/param_store.py": {
        "torch": {
            "inv_127": {
                "variable": {
                    "value": "unconstrained_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "new_constrained_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_299": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "input_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "self.get_state()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/poutine/do_messenger.py": {
        "torch": {}
    },
    "pyro/poutine/enum_messenger.py": {
        "torch": {
            "arange_92": {
                "variable": {
                    "value": "ancestor_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "squashed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "thin_sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "(squashed_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "thin_sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/poutine/guide.py": {
        "torch": {}
    },
    "pyro/poutine/indep_messenger.py": {
        "torch": {
            "arange_122": {
                "variable": {
                    "value": "self._indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/poutine/mask_messenger.py": {
        "torch": {}
    },
    "pyro/poutine/reparam_messenger.py": {
        "torch": {}
    },
    "pyro/poutine/scale_messenger.py": {
        "torch": {}
    },
    "pyro/poutine/subsample_messenger.py": {
        "torch": {
            "tensor_63": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_53": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_55": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "msg[scale]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "msg['scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_55": {
                "n": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pyro/primitives.py": {
        "torch": {
            "where_92": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "batch_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "obs_mask.reshape(shape)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "observed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample(f'{name}_observed', fn, *args, **kwargs, obs=obs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "unobserved",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample(f'{name}_unobserved', fn, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_shapes_95": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "*shapes": {
                    "value": "observed.shape",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyro/util.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "rng_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_rng_state_41": {
                "new_state": {
                    "value": "state['torch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_55": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_82": {
                "obj": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_117": {
                "obj": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/common.py": {
        "torch": {
            "Tensor_96": {
                "variable": {
                    "value": "(old_module, name)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_112": {
                "variable": {
                    "value": "old",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_122": {
                "variable": {
                    "value": "rng_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_98": {
                "t": {
                    "value": "'{}.{}'.format(new_module, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_124": {
                "variable": {
                    "value": "cuda_rng_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_128": {
                "new_state": {
                    "value": "rng_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_167": {
                "input": {
                    "value": "nan_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a != a",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "b != b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "new_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[value_map[idx] for idx in new_indices]",
                            "ListComp"
                        ],
                        [
                            "t._values().new_tensor(new_values)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_102": {
                "t": {
                    "value": "'{}.{}'.format(old_module, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_dtype_114": {
                "d": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_default_dtype_117": {
                "d": {
                    "value": "old",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_127": {
                "new_state": {
                    "value": "cuda_rng_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_188": {
                "obj": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_216": {
                "obj": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_266": {
                "obj": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/conftest.py": {
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "os.environ.get('PYRO_TENSOR_TYPE', 'torch.DoubleTensor')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/autoname/test_autoname.py": {
        "torch": {
            "tensor_364": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/autoname/test_named.py": {
        "torch": {
            "zeros_41": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_92": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/autoname/test_scoping.py": {
        "torch": {
            "tensor_178": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/bnn/test_hidden_layer.py": {
        "torch": {
            "randn_18": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "D",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_19": {
                "variable": {
                    "value": "A_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "D",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_53": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "D",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_54": {
                "variable": {
                    "value": "A_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "D",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_64": {
                "variable": {
                    "value": "A_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "A_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand(D, H)",
                            "Call"
                        ],
                        [
                            "torch.rand(D, H)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "A_scale",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.3 * torch.exp(0.3 * torch.rand(D, H))",
                            "BinOp"
                        ],
                        [
                            "0.3 * torch.exp(0.3 * torch.rand(D, H))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_65": {
                "variable": {
                    "value": "A_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(D, H)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones(D, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_20": {
                "input": {
                    "value": "0.3 * torch.rand(D, H)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "0.3 * torch.rand(D, H)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "D",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_65": {
                "*size": {
                    "value": "D",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_20": {
                "*size": {
                    "value": "D",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_55": {
                "*size": {
                    "value": "D",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/cevae/test_cevae.py": {
        "torch": {
            "load_58": {
                "variable": {
                    "value": "loaded_cevae",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_65": {
                "variable": {
                    "value": "loaded_cevae",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_56": {
                "obj": {
                    "value": "traced_cevae",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cevae.to_script_module()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_63": {
                "obj": {
                    "value": "cevae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CEVAE(feature_dim, outcome_dist)",
                            "Call"
                        ],
                        [
                            "CEVAE(feature_dim, outcome_dist=outcome_dist, num_samples=1000, hidden_dim=32)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/easyguide/test_easyguide.py": {
        "torch": {
            "arange_251": {
                "variable": {
                    "value": "subsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ],
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ],
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_33": {
                "tensors": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None] * num_time_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_92": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_209": {
                "variable": {
                    "value": "subsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ],
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ],
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_41": {
                "start": {
                    "value": "full_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_51": {
                "variable": {
                    "value": "subsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "Call",
                    "possible_values": [
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ],
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ],
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_90": {
                "obj": {
                    "value": "guide",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PickleGuide(model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "group.event_shape.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "group.event_shape.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_200": {
                "start": {
                    "value": "full_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_243": {
                "start": {
                    "value": "full_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "full_110": {
                "size": {
                    "value": "group.event_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_144": {
                "size": {
                    "value": "group.event_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "*size": {
                    "value": "(full_size, 1) + group.event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_191": {
                "*size": {
                    "value": "(full_size, 1) + group.event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "*size": {
                    "value": "(full_size,) + group.event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_234": {
                "*size": {
                    "value": "(full_size,) + group.event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_114": {
                "*size": {
                    "value": "group.event_shape + (rank,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_119": {
                "size": {
                    "value": "(full_size,) + group.event_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_148": {
                "*size": {
                    "value": "group.event_shape + (rank,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/epidemiology/test_distributions.py": {
        "torch": {
            "arange_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(200)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_31": {
                "variable": {
                    "value": "max_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p1.max()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "R0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "I",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "R0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "I",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "R0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "I",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "R0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(R0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "I",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ],
                        [
                            "torch.tensor(I)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 5, 10, 20, 50, 100.0, 1000.0, 100000.0, 1000000.0, 10000000.0, 100000000.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_170": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "total_count + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_189": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "total_count + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_211": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "total_count + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_219": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "33",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_220": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_220": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_234": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "33",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_235": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_235": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_248": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logspace_249": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_249": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_264": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logspace_265": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_265": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SigmoidTransform_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/epidemiology/test_models.py": {
        "torch": {
            "eye_543": {
                "variable": {
                    "value": "coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_regions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "clamp_543": {
                "variable": {
                    "value": "coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_544": {
                "variable": {
                    "value": "population",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 3.0, 4.0, 10.0, 100.0, 1000.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_602": {
                "variable": {
                    "value": "coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_regions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "clamp_602": {
                "variable": {
                    "value": "coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_603": {
                "variable": {
                    "value": "population",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 3.0, 4.0, 10.0, 100.0, 1000.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_653": {
                "variable": {
                    "value": "coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_regions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "clamp_653": {
                "variable": {
                    "value": "coupling",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_654": {
                "variable": {
                    "value": "population",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 3.0, 4.0, 10.0, 100.0, 1000.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_363": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_363": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_365": {
                "n": {
                    "value": "coal_times.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_448": {
                "start": {
                    "value": "duration",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/epidemiology/test_quant.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "max + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000 * 1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_24": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x_floor + q).long()",
                            "Call"
                        ],
                        [
                            "torch.max(y, 2 * min - 1 - y)",
                            "Call"
                        ],
                        [
                            "torch.min(y, 2 * max + 1 - y)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_25": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x_floor + q).long()",
                            "Call"
                        ],
                        [
                            "torch.max(y, 2 * min - 1 - y)",
                            "Call"
                        ],
                        [
                            "torch.min(y, 2 * max + 1 - y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/epidemiology/test_util.py": {
        "torch": {
            "randn_15": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_36": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "min",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(min)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(min).expand_as(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_19": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(max)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(max).expand_as(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_25": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "min",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(min)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(min).expand_as(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_26": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(min)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(min).expand_as(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_28": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(max)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(max).expand_as(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_29": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(max)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(max).expand_as(tensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/forecast/test_evaluate.py": {
        "torch": {
            "zeros_48": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "duration",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "duration",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "duration",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_49": {
                "*size": {
                    "value": "duration",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_87": {
                "*size": {
                    "value": "duration",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_133": {
                "*size": {
                    "value": "duration",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ],
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/forecast/test_forecaster.py": {
        "torch": {
            "randn_133": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (t_obs, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_134": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (t_obs + t_forecast, cov_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_179": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (t_obs, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_180": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (t_obs, cov_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_227": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_228": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t_obs + t_forecast",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "cov_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_304": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (t_obs, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_305": {
                "variable": {
                    "value": "covariates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (t_obs + t_forecast, cov_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_54": {
                "variable": {
                    "value": "scale_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "zero_data.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_72": {
                "n": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_74": {
                "n": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_94": {
                "n": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_96": {
                "n": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_260": {
                "n": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_262": {
                "n": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_285": {
                "n": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_287": {
                "n": {
                    "value": "obs_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/forecast/test_util.py": {
        "torch": {
            "empty_52": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_141": {
                "*size": {
                    "value": "batch_shape + (duration, dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_74": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "low",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_92": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_96": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/funsor/test_enum_funsor.py": {
        "torch": {
            "grad_52": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate_plate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate_iplate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[pyro.param(name).unconstrained() for name in names]",
                            "ListComp"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_53": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kl",
                            "Name"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide_iplate)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[pyro.param(name).unconstrained() for name in names]",
                            "ListComp"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[p, 1 - p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_518": {
                "variable": {
                    "value": "outer_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_519": {
                "variable": {
                    "value": "inner_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 1.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_596": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_669": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_804": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_835": {
                "variable": {
                    "value": "b_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_836": {
                "variable": {
                    "value": "d_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_895": {
                "variable": {
                    "value": "b_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_896": {
                "variable": {
                    "value": "c_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_949": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1035": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1065": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1229": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1383": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1431": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1557": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1629": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2], [1, 2, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1705": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2], [1, 2, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1791": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2], [1, 2, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1891": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2], [1, 2, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "[0.75, 0.25]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_104": {
                "probs": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2693204236205713",
                            "Constant"
                        ],
                        [
                            "torch.tensor([p, 1 - p])",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_108": {
                "outputs": {
                    "value": "kl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q.unconstrained()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_112": {
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate_plate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate_iplate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q.unconstrained()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "[0.3, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_350": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_424": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_427": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_431": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_436": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_514": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_515": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_516": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_517": {
                "data": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_581": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_584": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_588": {
                "data": {
                    "value": "[[[0.4, 0.5, 0.1], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_594": {
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_654": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_657": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_661": {
                "data": {
                    "value": "[[[0.4, 0.5, 0.1], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_667": {
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_717": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_721": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_726": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_731": {
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.3, 0.7], [0.2, 0.8]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_736": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_740": {
                "data": {
                    "value": "[0.35, 0.64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_744": {
                "data": {
                    "value": "[[0.0, 1.0], [1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_823": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_826": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_829": {
                "data": {
                    "value": "[0.75, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_832": {
                "data": {
                    "value": "[[0.4, 0.6], [0.3, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_884": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_887": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_892": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_943": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_946": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_993": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_996": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1001": {
                "data": {
                    "value": "[[0.4, 0.6], [0.3, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1054": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1057": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1062": {
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.2, 0.8], [0.1, 0.9]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1121": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1124": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1129": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1134": {
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.3, 0.7], [0.2, 0.8]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1260": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1263": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1268": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1273": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1278": {
                "data": {
                    "value": "[[0.4, 0.6], [0.3, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1416": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1419": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1423": {
                "data": {
                    "value": "[[[0.4, 0.5, 0.1], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1429": {
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1537": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1541": {
                "data": {
                    "value": "[[0.3, 0.7], [0.6, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1546": {
                "data": {
                    "value": "[[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1550": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1554": {
                "data": {
                    "value": "[[0.3, 0.7], [0.8, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1609": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1613": {
                "data": {
                    "value": "[[0.3, 0.7], [0.6, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1618": {
                "data": {
                    "value": "[[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1622": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1626": {
                "data": {
                    "value": "[[0.3, 0.7], [0.8, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1685": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1689": {
                "data": {
                    "value": "[[0.3, 0.7], [0.6, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1694": {
                "data": {
                    "value": "[[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1698": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1702": {
                "data": {
                    "value": "[[0.3, 0.7], [0.8, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1761": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1765": {
                "data": {
                    "value": "[[0.3, 0.7], [0.6, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1770": {
                "data": {
                    "value": "[[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1775": {
                "data": {
                    "value": "[[0.1, 0.6, 0.3], [0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1779": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1783": {
                "data": {
                    "value": "[[0.3, 0.7], [0.8, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1788": {
                "data": {
                    "value": "[[0.3, 0.3, 0.4], [0.2, 0.4, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1861": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1865": {
                "data": {
                    "value": "[[0.3, 0.7], [0.6, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1870": {
                "data": {
                    "value": "[[0.3, 0.7], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1875": {
                "data": {
                    "value": "[[0.1, 0.6, 0.3], [0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1879": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1883": {
                "data": {
                    "value": "[[0.3, 0.7], [0.8, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1888": {
                "data": {
                    "value": "[[0.2, 0.8], [0.9, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "data": {
                    "value": "[0.3, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "data": {
                    "value": "[0.3, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_494": {
                "data": {
                    "value": "[0.3, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_453": {
                "start": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_470": {
                "start": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_308": {
                "start": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_378": {
                "start": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/funsor/test_infer_discrete.py": {
        "torch": {
            "tensor_71": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1.0, -1.0, 0.0], [-1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_159": {
                "variable": {
                    "value": "actual_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_160": {
                "variable": {
                    "value": "expected_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_218": {
                "variable": {
                    "value": "actual_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_219": {
                "variable": {
                    "value": "expected_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_282": {
                "variable": {
                    "value": "actual_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_283": {
                "variable": {
                    "value": "expected_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_419": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True, False, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_39": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "data": {
                    "value": "[0.25, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_329": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "data": {
                    "value": "[0.25, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "[0.75, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "[[0.25, 0.75], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "[0.25, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "data": {
                    "value": "[0.25, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_424": {
                "data": {
                    "value": "[0.75, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_38": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "data": {
                    "value": "z",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.tensor([0.0, 1.0])[iz]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('z', dist.Categorical(p), obs=z)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "data": {
                    "value": "z2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('z2', dist.Categorical(p[z1]), obs=z2)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z2', dist.Categorical(p), obs=z2)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z2', dist.Categorical(p), obs=z2)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z2', dist.Categorical(p))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z2', dist.Categorical(p))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_212": {
                "data": {
                    "value": "[z20, z21]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "data": {
                    "value": "[z20, z21]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_441": {
                "data": {
                    "value": "z",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.tensor([0.0, 1.0])[iz]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('z', dist.Categorical(p), obs=z)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_335": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/funsor/test_named_handlers.py": {
        "torch": {
            "tensor_116": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_131": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/funsor/test_tmc.py": {
        "torch": {
            "grad_70": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(-elbo.differentiable_loss(enum_model, lambda : None)).exp()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[pyro.param('q0', torch.tensor([0.4, 0.6], requires_grad=True))]",
                            "List"
                        ],
                        [
                            "[q.unconstrained() for q in qs]",
                            "ListComp"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "grad_82": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(-tmc.differentiable_loss(tmc_model, lambda : None)).exp()",
                            "Call"
                        ],
                        [
                            "(-tmc.differentiable_loss(tmc_model, tmc_guide, reparameterized)).exp()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[pyro.param('q0', torch.tensor([0.4, 0.6], requires_grad=True))]",
                            "List"
                        ],
                        [
                            "[q.unconstrained() for q in qs]",
                            "ListComp"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "grad_189": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(-tmc.differentiable_loss(tmc_model, lambda : None)).exp()",
                            "Call"
                        ],
                        [
                            "(-tmc.differentiable_loss(tmc_model, tmc_guide, reparameterized)).exp()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[pyro.param('q0', torch.tensor([0.4, 0.6], requires_grad=True))]",
                            "List"
                        ],
                        [
                            "[q.unconstrained() for q in qs]",
                            "ListComp"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "tensor_193": {
                "data": {
                    "value": "{1: 0.0999, 2: 0.086, 3: 0.0802, 4: 0.0771}[depth]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[0.75, 0.25]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "float(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_52": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_58": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/funsor/test_valid_models_enum.py": {
        "torch": {
            "tensor_221": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.8], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.8], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.8], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.8], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_492": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_493": {
                "variable": {
                    "value": "x_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_296": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_297": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_298": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_308": {
                "variable": {
                    "value": "z_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_346": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_372": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_380": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_430": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_490": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_491": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_399": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_407": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_434": {
                "data": {
                    "value": "1.0 if data else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_442": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_456": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_501": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "data": {
                    "value": "1.0 if data else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_478": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/funsor/test_valid_models_plate.py": {
        "torch": {
            "tensor_56": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_195": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "1.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/funsor/test_valid_models_sequential_plate.py": {
        "torch": {
            "tensor_73": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "probs_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "probs_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "probs_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "probs_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.3, 0.7], [0.2, 0.8]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "probs_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "probs_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "probs_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "probs_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.3, 0.7], [0.2, 0.8]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "probs_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "probs_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "probs_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "probs_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.3, 0.7], [0.2, 0.8]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/funsor/test_vectorized_markov.py": {
        "torch": {
            "tensor_790": {
                "variable": {
                    "value": "init_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_793": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_798": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_32": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_34": {
                "*size": {
                    "value": "(x_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_36": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_70": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_72": {
                "*size": {
                    "value": "(x_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_74": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_103": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_106": {
                "*size": {
                    "value": "(x_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_109": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_113": {
                "*size": {
                    "value": "(x_dim, y_dim, y_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_151": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_154": {
                "*size": {
                    "value": "(w_dim, w_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_157": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_160": {
                "*size": {
                    "value": "(x_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_164": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_205": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_208": {
                "*size": {
                    "value": "(w_dim, w_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_211": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_215": {
                "*size": {
                    "value": "(w_dim, x_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_220": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_264": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_267": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_271": {
                "*size": {
                    "value": "(x_dim, x_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_275": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_309": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_313": {
                "*size": {
                    "value": "(len(data) - 1, x_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_316": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_353": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_356": {
                "*size": {
                    "value": "(x_dim, w_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_359": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_362": {
                "*size": {
                    "value": "(w_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_366": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_413": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_414": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_415": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_416": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_417": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_418": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_419": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_420": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_421": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_422": {
                "*size": {
                    "value": "(50, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_513": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_516": {
                "*size": {
                    "value": "(x_dim, x_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_519": {
                "*size": {
                    "value": "x_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_522": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_525": {
                "*size": {
                    "value": "(w_dim, w_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_528": {
                "*size": {
                    "value": "w_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_580": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_580": {
                "*size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_581": {
                "*size": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_581": {
                "*size": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_715": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_716": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_717": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_718": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_719": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_720": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_721": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_722": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_723": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_724": {
                "*size": {
                    "value": "(50, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_758": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_758": {
                "*size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_759": {
                "*size": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_759": {
                "*size": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_816": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_817": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_818": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_819": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_820": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_821": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_822": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_823": {
                "*size": {
                    "value": "(5, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_824": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/gp/test_conditional.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 3.0], [4.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 5.0], [2.0, 1.0], [3.0, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cholesky_22": {
                "variable": {
                    "value": "Lff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel(X) + torch.eye(3) * 1e-06",
                            "BinOp"
                        ],
                        [
                            "kernel(X) + torch.eye(3) * 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_24": {
                "variable": {
                    "value": "f_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mat.diag() for mat in cov0.view(-1, n, n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov0.shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cholesky_79": {
                "variable": {
                    "value": "Lff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Kff",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel(X) + torch.eye(3) * 1e-06",
                            "BinOp"
                        ],
                        [
                            "kernel(X) + torch.eye(3) * 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_25": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tril_25": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_21": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_41": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_43": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_78": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/gp/test_kernels.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "lengthscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 1.0], [2.0, 1.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4.0, 5.0, 6.0], [3.0, 1.0, 7.0], [3.0, 1.0, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.5, 0.0, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.5, 0.0, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.5, 0.0, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.5, 0.0, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/gp/test_likelihoods.py": {
        "torch": {
            "tensor_16": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 5.0, 3.0], [4.0, 3.0, 7.0], [3.0, 4.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "y_binary1D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "variable": {
                    "value": "y_binary2D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0, 1.0], [1.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "y_count1D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "y_count2D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5.0, 9.0, 3.0], [4.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "y_multiclass1D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "y_multiclass2D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 1.0, 1.0], [0.0, 2.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_98": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Xnew_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(X.shape[0] * 2,) + X.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "(X.shape[0] * 2,) + X.shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_119": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Xnew_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(X.shape[0] * 2,) + X.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "(X.shape[0] * 2,) + X.shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/gp/test_models.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 5.0, 3.0], [4.0, 3.0, 7.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "y1D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "y2D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0], [3.0, 3.0], [1.0, 4.0], [-1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 3.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "cov0_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mat.diag() for mat in cov0.view(-1, n, n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "cov0_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 3.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 3.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_193": {
                "variable": {
                    "value": "Xu",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "5.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_198": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "5.05",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_214": {
                "variable": {
                    "value": "Xu",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "5.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_217": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vsgp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.03",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_220": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "5.05",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_236": {
                "variable": {
                    "value": "Xu",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "5.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_241": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "5.05",
                    "type": "Constant",
                    "possible_values": []
                },
                "step": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_352": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.Tensor().dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_354": {
                "variable": {
                    "value": "Xnew",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "150",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.Tensor().dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_431": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gpmodule.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_441": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gpmodule.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_453": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gpmodule.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_297": {
                "variable": {
                    "value": "param_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "1e-07",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_200": {
                "input": {
                    "value": "3 * Xnew",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_222": {
                "input": {
                    "value": "3 * Xnew",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_243": {
                "input": {
                    "value": "3 * Xnew",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_362": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_363": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "var.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_111": {
                "n": {
                    "value": "cov.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_128": {
                "n": {
                    "value": "cov.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_189": {
                "input": {
                    "value": "3 * X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_210": {
                "input": {
                    "value": "3 * X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_232": {
                "input": {
                    "value": "3 * X",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "data": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_208": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_230": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_306": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_350": {
                "input": {
                    "value": "7 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_362": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_187": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_190": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_208": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_211": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_230": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_233": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_190": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_211": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_233": {
                "*size": {
                    "value": "N",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/gp/test_parameterized.py": {
        "torch": {
            "tensor_125": {
                "variable": {
                    "value": "target_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_126": {
                "variable": {
                    "value": "x_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "linear.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_127": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_25": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/mue/test_dataloaders.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "seq_data_check",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(seqs), max_length_check, len(alphabet_list)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "dataload",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BiosequenceDataset(source, source_type, alphabet, include_stop=include_stop)",
                            "Call"
                        ],
                        [
                            "BiosequenceDataset(seqs, 'list', 'ACGT*', include_stop=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_54": {
                "input": {
                    "value": "dataset.L_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(L_data_check, dtype=torch.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_61": {
                "input": {
                    "value": "dataset.seq_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "seq_data_check",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([len(seqs), max_length_check, len(alphabet_list)])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_63": {
                "input": {
                    "value": "dataset[ind][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.cat([seq_data_check[0, None, :, :], seq_data_check[2, None, :, :]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_67": {
                "input": {
                    "value": "dataset[ind][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([4.0 + include_stop, 1.0 + include_stop])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "L_data_check",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[len(seq) + include_stop for seq in seqs]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "[seq_data_check[0, None, :, :], seq_data_check[2, None, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[4.0 + include_stop, 1.0 + include_stop]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_96": {
                "input": {
                    "value": "dataset.seq_data[j, :to_stop_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "dataset2.seq_data[j, :to_stop_len]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_99": {
                "input": {
                    "value": "dataset2.seq_data[j, to_stop_len + 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_118": {
                "input": {
                    "value": "dataset.seq_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "dataset2.seq_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/mue/test_missingdatahmm.py": {
        "torch": {
            "tensor_13": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.08, 0.02]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0], [0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_29": {
                "variable": {
                    "value": "expected_lp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[None, :, :], torch.tensor([[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "expected_lp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[expected_lp[None], torch.log(torch.sum(f))[None]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a0[None, :], torch.tensor([0.2, 0.7, 0.1])[None, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "expected_lp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[expected_lp[0][None], torch.log(torch.sum(f))[None]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_92": {
                "variable": {
                    "value": "initial_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_initial + [state_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_94": {
                "variable": {
                    "value": "transition_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_transition + [state_dim, state_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_98": {
                "variable": {
                    "value": "observation_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_observation + [state_dim, observation_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_137": {
                "variable": {
                    "value": "transition_logits_vldhmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_transition + [state_dim, state_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_147": {
                "variable": {
                    "value": "initial_logits_dhmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_initial + [state_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_152": {
                "variable": {
                    "value": "observation_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_observation + [state_dim, observation_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randint_165": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "observation_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "[batch_size] * batch_data + [num_steps]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "initial_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-100, 0, -100, -100]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "transition_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-100, -100, 0, -100], [-100, -100, -100, 0], [0, -100, -100, -100], [-100, 0, -100, -100]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "obs_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, -100, -100], [-100, 0, -100], [-100, -100, 0], [-100, -100, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "alph",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], a0.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "alph.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], a0.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "variable": {
                    "value": "traceback",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], a0.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "expected_map_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_295": {
                "variable": {
                    "value": "expected_map_states[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "delta[-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.08, 0.02]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0], [0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[None, :, :], torch.tensor([[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "expected_map_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_map_states(a0, a, e, x[0])[None, :], indiv_map_states(a0, a, e, x[1])[None, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "expected_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_filter(a0, a, e, x[0])[None, :, :], indiv_filter(a0, a, e, x[1])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "expected_smooth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_smooth(a0, a, e, x[0])[None, :, :], indiv_smooth(a0, a, e, x[1])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a0[None, :], torch.tensor([0.2, 0.7, 0.1])[None, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "expected_map_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_map_states(a0[0], a[0], e[0], x[1])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "expected_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_filter(a0[0], a[0], e[0], x[1])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "expected_smooth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_smooth(a0[0], a[0], e[0], x[1])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "expected_map_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_map_states(a0[0], a[0], e[0], x[0])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "expected_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_filter(a0[0], a[0], e[0], x[0])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "expected_smooth",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indiv_smooth(a0[0], a[0], e[0], x[0])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.08, 0.02]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_449": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_452": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_454": {
                "variable": {
                    "value": "map_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 2, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_457": {
                "variable": {
                    "value": "expected_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_461": {
                "variable": {
                    "value": "map_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 2, 1, 0], [0, 0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_463": {
                "variable": {
                    "value": "expected_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_481": {
                "variable": {
                    "value": "expected_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [1.0, 0.0], [0.0, 1.0], [0.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "expected_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_504": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1 - eps, eps / 2, eps / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_505": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[eps / 2, 1 - eps, eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_512": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_513": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0], [0.0, 0.0], [0.0, 1.0], [0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_517": {
                "variable": {
                    "value": "expected_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_521": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[None, :, :], torch.tensor([[1.0, 0.0], [0.0, 0.0], [0.0, 1.0], [1.0, 0.0]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_529": {
                "variable": {
                    "value": "expected_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2, 2], [0, 1, 2, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_533": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a0[None, :], torch.tensor([eps / 2, 1 - eps, eps / 2])[None, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_534": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a[None, :, :], torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_547": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_556": {
                "variable": {
                    "value": "expected_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2, 1], [1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_561": {
                "variable": {
                    "value": "expected_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2, 2], [1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_31": {
                "input": {
                    "value": "lp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm.log_prob(value)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_lp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.log(torch.sum(f))",
                            "Call"
                        ],
                        [
                            "torch.cat([expected_lp[None], torch.log(torch.sum(f))[None]])",
                            "Call"
                        ],
                        [
                            "torch.cat([expected_lp[0][None], torch.log(torch.sum(f))[None]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_50": {
                "input": {
                    "value": "lp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm.log_prob(value)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_lp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.log(torch.sum(f))",
                            "Call"
                        ],
                        [
                            "torch.cat([expected_lp[None], torch.log(torch.sum(f))[None]])",
                            "Call"
                        ],
                        [
                            "torch.cat([expected_lp[0][None], torch.log(torch.sum(f))[None]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_78": {
                "input": {
                    "value": "lp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.log_prob(x)",
                            "Call"
                        ],
                        [
                            "hmm.log_prob(value)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_lp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.log(torch.sum(f))",
                            "Call"
                        ],
                        [
                            "torch.cat([expected_lp[None], torch.log(torch.sum(f))[None]])",
                            "Call"
                        ],
                        [
                            "torch.cat([expected_lp[0][None], torch.log(torch.sum(f))[None]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_180": {
                "input": {
                    "value": "lp_vldhmm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vldhmm.log_prob(value_oh)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lp_dhmm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dhmm.log_prob(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_184": {
                "input": {
                    "value": "filter_dhmm.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "filter_vldhmm[..., -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "initial_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-100, 0, -100, -100], [0, -100, -100, -100]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_257": {
                "input": {
                    "value": "alph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((x.shape[0], a0.shape[0]))",
                            "Call"
                        ],
                        [
                            "indiv_filter(a0, a, e, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_274": {
                "input": {
                    "value": "smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(alph) * beta",
                            "BinOp"
                        ],
                        [
                            "smooth / torch.sum(smooth, -1, True)",
                            "BinOp"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_322": {
                "input": {
                    "value": "map_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vldhmm.map_states(value_oh)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2, 1, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 2, 1, 0], [0, 0, 0, 1]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_map_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "indiv_map_states(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0, a, e, x[0])[None, :], indiv_map_states(a0, a, e, x[1])[None, :]], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0[0], a[0], e[0], x[1])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0[0], a[0], e[0], x[0])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_323": {
                "input": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indiv_filter(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0, a, e, x[0])[None, :, :], indiv_filter(a0, a, e, x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0[0], a[0], e[0], x[1])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0[0], a[0], e[0], x[0])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_324": {
                "input": {
                    "value": "smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(alph) * beta",
                            "BinOp"
                        ],
                        [
                            "smooth / torch.sum(smooth, -1, True)",
                            "BinOp"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indiv_smooth(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0, a, e, x[0])[None, :, :], indiv_smooth(a0, a, e, x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0[0], a[0], e[0], x[1])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0[0], a[0], e[0], x[0])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_362": {
                "input": {
                    "value": "map_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vldhmm.map_states(value_oh)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2, 1, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 2, 1, 0], [0, 0, 0, 1]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_map_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "indiv_map_states(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0, a, e, x[0])[None, :], indiv_map_states(a0, a, e, x[1])[None, :]], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0[0], a[0], e[0], x[1])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0[0], a[0], e[0], x[0])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_363": {
                "input": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indiv_filter(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0, a, e, x[0])[None, :, :], indiv_filter(a0, a, e, x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0[0], a[0], e[0], x[1])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0[0], a[0], e[0], x[0])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_364": {
                "input": {
                    "value": "smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(alph) * beta",
                            "BinOp"
                        ],
                        [
                            "smooth / torch.sum(smooth, -1, True)",
                            "BinOp"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indiv_smooth(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0, a, e, x[0])[None, :, :], indiv_smooth(a0, a, e, x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0[0], a[0], e[0], x[1])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0[0], a[0], e[0], x[0])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_411": {
                "input": {
                    "value": "map_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vldhmm.map_states(value_oh)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2, 1, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 2, 1, 0], [0, 0, 0, 1]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_map_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "indiv_map_states(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0, a, e, x[0])[None, :], indiv_map_states(a0, a, e, x[1])[None, :]], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0[0], a[0], e[0], x[1])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0[0], a[0], e[0], x[0])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_412": {
                "input": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indiv_filter(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0, a, e, x[0])[None, :, :], indiv_filter(a0, a, e, x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0[0], a[0], e[0], x[1])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0[0], a[0], e[0], x[0])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_413": {
                "input": {
                    "value": "smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(alph) * beta",
                            "BinOp"
                        ],
                        [
                            "smooth / torch.sum(smooth, -1, True)",
                            "BinOp"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indiv_smooth(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0, a, e, x[0])[None, :, :], indiv_smooth(a0, a, e, x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0[0], a[0], e[0], x[1])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0[0], a[0], e[0], x[0])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_442": {
                "input": {
                    "value": "map_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vldhmm.map_states(value_oh)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.map_states(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0, 2, 1, 0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 2, 1, 0], [0, 0, 0, 1]], dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_map_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[0], dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "indiv_map_states(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0, a, e, x[0])[None, :], indiv_map_states(a0, a, e, x[1])[None, :]], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0[0], a[0], e[0], x[1])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_map_states(a0[0], a[0], e[0], x[0])[None, :], indiv_map_states(a0[1], a[1], e[1], x[1])[None, :]], -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_443": {
                "input": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.filter(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indiv_filter(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0, a, e, x[0])[None, :, :], indiv_filter(a0, a, e, x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0[0], a[0], e[0], x[1])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_filter(a0[0], a[0], e[0], x[0])[None, :, :], indiv_filter(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_444": {
                "input": {
                    "value": "smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(alph) * beta",
                            "BinOp"
                        ],
                        [
                            "smooth / torch.sum(smooth, -1, True)",
                            "BinOp"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "indiv_smooth(a0, a, e, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0, a, e, x[0])[None, :, :], indiv_smooth(a0, a, e, x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0[0], a[0], e[0], x[1])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ],
                        [
                            "torch.cat([indiv_smooth(a0[0], a[0], e[0], x[0])[None, :, :], indiv_smooth(a0[1], a[1], e[1], x[1])[None, :, :]], -3)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_458": {
                "input": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.sample(torch.Size([3]))",
                            "Call"
                        ],
                        [
                            "model.sample(torch.Size([2, 3]))",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states[0])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [1.0, 0.0], [0.0, 1.0], [0.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_469": {
                "input": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.sample(torch.Size([3]))",
                            "Call"
                        ],
                        [
                            "model.sample(torch.Size([2, 3]))",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states[0])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [1.0, 0.0], [0.0, 1.0], [0.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_487": {
                "input": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.sample(torch.Size([3]))",
                            "Call"
                        ],
                        [
                            "model.sample(torch.Size([2, 3]))",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states[0])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [1.0, 0.0], [0.0, 1.0], [0.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_497": {
                "input": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.sample(torch.Size([3]))",
                            "Call"
                        ],
                        [
                            "model.sample(torch.Size([2, 3]))",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states[0])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [1.0, 0.0], [0.0, 1.0], [0.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[1.0, 0.0], [0.0, 1.0], [0.0, 1.0], [1.0, 0.0]], [[0.0, 1.0], [0.0, 1.0], [0.0, 1.0], [0.0, 1.0]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_518": {
                "input": {
                    "value": "states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 2], [0, 1, 2, 1]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 1], [1, 1, 1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 2], [1, 1, 1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_530": {
                "input": {
                    "value": "states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 2], [0, 1, 2, 1]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 1], [1, 1, 1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 2], [1, 1, 1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_557": {
                "input": {
                    "value": "states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 2], [0, 1, 2, 1]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 1], [1, 1, 1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 2], [1, 1, 1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_562": {
                "input": {
                    "value": "states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_states(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([0, 1, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 2], [0, 1, 2, 1]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 1], [1, 1, 1, 1]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1, 2, 2], [1, 1, 1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_21": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_25": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_26": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_27": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_28": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_29": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_46": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_47": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.1, 0.8, 0.1], [0.5, 0.3, 0.2], [0.4, 0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2], [eps, 0.5 - eps / 2, 0.5 - eps / 2]])",
                            "Call"
                        ],
                        [
                            "torch.cat([a[None, :, :], torch.tensor([[eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_70": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_74": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a[1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a[1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_224": {
                "input": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.sample(torch.Size([3]))",
                            "Call"
                        ],
                        [
                            "model.sample(torch.Size([2, 3]))",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states[0])",
                            "Call"
                        ],
                        [
                            "hmm_distr.sample_given_states(map_states)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor([[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_230": {
                "input": {
                    "value": "sample[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_235": {
                "input": {
                    "value": "sample[1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_249": {
                "input": {
                    "value": "alph[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_252": {
                "variable": {
                    "value": "vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alph[t - 1, :] * a[:, j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_272": {
                "input": {
                    "value": "alph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((x.shape[0], a0.shape[0]))",
                            "Call"
                        ],
                        [
                            "indiv_filter(a0, a, e, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_273": {
                "input": {
                    "value": "smooth",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp(alph) * beta",
                            "BinOp"
                        ],
                        [
                            "smooth / torch.sum(smooth, -1, True)",
                            "BinOp"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x[1])",
                            "Call"
                        ],
                        [
                            "hmm_distr.smooth(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_292": {
                "variable": {
                    "value": "delta[t, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0[j]",
                            "Subscript"
                        ],
                        [
                            "vec * torch.dot(x[0, :], e[j, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(alph[t - 1, :] * a[:, j])",
                            "Call"
                        ],
                        [
                            "vec * torch.dot(x[t, :], e[j, :])",
                            "BinOp"
                        ],
                        [
                            "beta[t, j] * a[i, j]",
                            "BinOp"
                        ],
                        [
                            "vec * torch.dot(x[t, :], e[j, :])",
                            "BinOp"
                        ],
                        [
                            "a0[j]",
                            "Subscript"
                        ],
                        [
                            "vec * torch.dot(x[0, :], e[j, :])",
                            "BinOp"
                        ],
                        [
                            "delta[t - 1, :] * a[:, j]",
                            "BinOp"
                        ],
                        [
                            "vec * torch.dot(x[t, :], e[j, :])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_293": {
                "variable": {
                    "value": "traceback[t, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0[j]",
                            "Subscript"
                        ],
                        [
                            "vec * torch.dot(x[0, :], e[j, :])",
                            "BinOp"
                        ],
                        [
                            "torch.sum(alph[t - 1, :] * a[:, j])",
                            "Call"
                        ],
                        [
                            "vec * torch.dot(x[t, :], e[j, :])",
                            "BinOp"
                        ],
                        [
                            "beta[t, j] * a[i, j]",
                            "BinOp"
                        ],
                        [
                            "vec * torch.dot(x[t, :], e[j, :])",
                            "BinOp"
                        ],
                        [
                            "a0[j]",
                            "Subscript"
                        ],
                        [
                            "vec * torch.dot(x[0, :], e[j, :])",
                            "BinOp"
                        ],
                        [
                            "delta[t - 1, :] * a[:, j]",
                            "BinOp"
                        ],
                        [
                            "vec * torch.dot(x[t, :], e[j, :])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_317": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_384": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_455": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_479": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_515": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_554": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.99, 0.01], [0.01, 0.99], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.9, 0.1], [0.1, 0.9], [0.5, 0.5]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [eps, 1 - eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]])[None, :, :]], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1 - eps, eps], [1 - eps, eps], [eps, 1 - eps]])",
                            "Call"
                        ],
                        [
                            "torch.cat([e[None, :, :], torch.tensor([[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]])[None, :, :]], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_214": {
                "*size": {
                    "value": "[2] + list(transition_logits.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_217": {
                "*size": {
                    "value": "[2] + list(obs_logits.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "[[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "[[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "x[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_256": {
                "input": {
                    "value": "alph[t, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_283": {
                "input": {
                    "value": "x[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "torch.sum(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "[0.2, 0.7, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_76": {
                "input": {
                    "value": "torch.sum(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_107": {
                "low": {
                    "value": "observation_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "[batch_size] * batch_data + [num_steps]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_110": {
                "start": {
                    "value": "observation_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_166": {
                "start": {
                    "value": "observation_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dot_247": {
                "input": {
                    "value": "x[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_253": {
                "input": {
                    "value": "x[t, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_284": {
                "input": {
                    "value": "x[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_290": {
                "input": {
                    "value": "x[t, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "data": {
                    "value": "[[1.0, 0.0], [1.0, 0.0], [1.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_367": {
                "data": {
                    "value": "[0.2, 0.7, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "data": {
                    "value": "[[0.8, 0.1, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_380": {
                "data": {
                    "value": "[[0.4, 0.6], [0.99, 0.01], [0.7, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_475": {
                "data": {
                    "value": "[[eps, 1 - eps], [eps, 1 - eps], [1 - eps, eps]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_524": {
                "data": {
                    "value": "[[1.0, 0.0], [0.0, 0.0], [0.0, 1.0], [1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_533": {
                "data": {
                    "value": "[eps / 2, 1 - eps, eps / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_537": {
                "data": {
                    "value": "[[eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2], [eps / 2, 1 - eps, eps / 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_550": {
                "data": {
                    "value": "[[1 - eps, eps], [0.5, 0.5], [eps, 1 - eps]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_76": {
                "input": {
                    "value": "f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "a0 * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0 * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a) * e[:, 0]",
                            "BinOp"
                        ],
                        [
                            "a0[1, :] * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(f, a[1, :, :]) * e[1, :, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_254": {
                "input": {
                    "value": "x[t, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_269": {
                "input": {
                    "value": "x[t, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_291": {
                "input": {
                    "value": "x[t, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_270": {
                "input": {
                    "value": "x[t, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "e[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/mue/test_models.py": {
        "torch": {
            "allclose_91": {
                "input": {
                    "value": "model._beta_anneal(3, 2, 6, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_92": {
                "input": {
                    "value": "model._beta_anneal(100, 2, 6, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_107": {
                "input": {
                    "value": "z_scales > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/mue/test_statearrangers.py": {
        "torch": {
            "rand_26": {
                "variable": {
                    "value": "u1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M + 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(1 - u1)[:, :, None], u1[:, :, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M + 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(1 - r1)[:, :, None], r1[:, :, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M + 1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "expected_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_dim_size, K, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "expected_a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_dim_size, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "expected_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_dim_size, K, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_207": {
                "variable": {
                    "value": "sln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_ancestor_seq + [M, D]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_209": {
                "variable": {
                    "value": "cln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_insert_seq + [M + 1, D]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_211": {
                "variable": {
                    "value": "rln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_insert + [M, 3, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_213": {
                "variable": {
                    "value": "uln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_delete + [M, 3, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_215": {
                "variable": {
                    "value": "lln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size] * batch_substitute + [D, B]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_247": {
                "variable": {
                    "value": "sln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, M, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_249": {
                "variable": {
                    "value": "cln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, M + 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "rln",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "uln",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_259": {
                "variable": {
                    "value": "lln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[D, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "Eyln",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, M, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_272": {
                "variable": {
                    "value": "no_indel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sln.unsqueeze(-1) + lln.unsqueeze(-3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, M, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "u1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, M + 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(1 - u1)[:, :, :, None], u1[:, :, :, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_47": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "expected_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((batch_dim_size, K, 4))",
                            "Call"
                        ],
                        [
                            "torch.matmul(expected_e, ll)",
                            "Call"
                        ],
                        [
                            "expected_e.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ll",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((4, 5))",
                            "Call"
                        ],
                        [
                            "ll / torch.sum(ll, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "ll.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "ll.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_189": {
                "input": {
                    "value": "expected_a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((batch_dim_size, K))",
                            "Call"
                        ],
                        [
                            "expected_a0.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.exp(a0ln)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_190": {
                "input": {
                    "value": "expected_a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((batch_dim_size, K, K))",
                            "Call"
                        ],
                        [
                            "expected_a.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.exp(aln)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_191": {
                "input": {
                    "value": "expected_e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((batch_dim_size, K, 4))",
                            "Call"
                        ],
                        [
                            "torch.matmul(expected_e, ll)",
                            "Call"
                        ],
                        [
                            "expected_e.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.exp(eln)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_268": {
                "variable": {
                    "value": "Eyln[:, j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ai.unsqueeze(-1) + eln",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_269": {
                "variable": {
                    "value": "ai",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ai.unsqueeze(-1) + aln",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "allclose_273": {
                "input": {
                    "value": "Eyln",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, M, B])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "no_indel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.logsumexp(sln.unsqueeze(-1) + lln.unsqueeze(-3), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_13": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "prod_15": {
                "input": {
                    "value": "torch.cat([elem[None] for elem in lst])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((M, 4))",
                            "Call"
                        ],
                        [
                            "s / torch.sum(s, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.rand((batch_size, M, 4))",
                            "Call"
                        ],
                        [
                            "s / torch.sum(s, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_35": {
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((M + 1, 4))",
                            "Call"
                        ],
                        [
                            "c / torch.sum(c, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "c.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "c[None, :, :] * torch.ones([batch_size, 1, 1])",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_180": {
                "input": {
                    "value": "torch.sum(torch.exp(a0ln))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_183": {
                "input": {
                    "value": "torch.sum(torch.exp(aln), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.ones(2 * M + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_189": {
                "input": {
                    "value": "a0ln",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_190": {
                "input": {
                    "value": "aln",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_191": {
                "input": {
                    "value": "eln",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "allclose_221": {
                "input": {
                    "value": "eln.logsumexp(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_224": {
                "input": {
                    "value": "eln.logsumexp(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(batch_size, K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_228": {
                "input": {
                    "value": "a0ln.logsumexp(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_230": {
                "input": {
                    "value": "aln.logsumexp(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_233": {
                "input": {
                    "value": "a0ln.logsumexp(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_235": {
                "input": {
                    "value": "aln.logsumexp(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros((batch_size, K))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "[elem[None] for elem in lst]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((M, 4))",
                            "Call"
                        ],
                        [
                            "s / torch.sum(s, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.rand((batch_size, M, 4))",
                            "Call"
                        ],
                        [
                            "s / torch.sum(s, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "ll",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((4, 5))",
                            "Call"
                        ],
                        [
                            "ll / torch.sum(ll, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "ll.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "ll.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((M, 4))",
                            "Call"
                        ],
                        [
                            "s / torch.sum(s, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.rand((batch_size, M, 4))",
                            "Call"
                        ],
                        [
                            "s / torch.sum(s, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_51": {
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((M + 1, 4))",
                            "Call"
                        ],
                        [
                            "c / torch.sum(c, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "c.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "c[None, :, :] * torch.ones([batch_size, 1, 1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_52": {
                "input": {
                    "value": "r[:-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_53": {
                "input": {
                    "value": "u[..., :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_54": {
                "input": {
                    "value": "ll",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((4, 5))",
                            "Call"
                        ],
                        [
                            "ll / torch.sum(ll, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "ll.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "ll.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_58": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((M, 4))",
                            "Call"
                        ],
                        [
                            "s / torch.sum(s, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.rand((batch_size, M, 4))",
                            "Call"
                        ],
                        [
                            "s / torch.sum(s, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "s.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_59": {
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand((M + 1, 4))",
                            "Call"
                        ],
                        [
                            "c / torch.sum(c, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "c.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "c[None, :, :] * torch.ones([batch_size, 1, 1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_60": {
                "input": {
                    "value": "r[:-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "u[..., :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_181": {
                "input": {
                    "value": "torch.exp(a0ln)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "torch.exp(aln)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "2 * M + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * M + 1",
                            "BinOp"
                        ],
                        [
                            "2 * M + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * M + 1",
                            "BinOp"
                        ],
                        [
                            "2 * M + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * M + 1",
                            "BinOp"
                        ],
                        [
                            "2 * M + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_233": {
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_235": {
                "*size": {
                    "value": "(batch_size, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "*size": {
                    "value": "[M, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "[M, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_181": {
                "input": {
                    "value": "a0ln",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_184": {
                "input": {
                    "value": "aln",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_252": {
                "*size": {
                    "value": "[M, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_256": {
                "*size": {
                    "value": "[M, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/oed/test_ewma.py": {
        "torch": {
            "tensor_16": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "210.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "s2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "210.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_20": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "exponent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(NS, D) * sigma",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "8.0 / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_19": {
                "*size": {
                    "value": "NS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_49": {
                "input": {
                    "value": "s1 - s2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/oed/test_finite_spaces_eig.py": {
        "torch": {
            "cat_51": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(y_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(theta_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(y_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(theta_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "0.12580366909478014",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(y_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "n_theta_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "n_theta_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/oed/test_glmm.py": {
        "torch": {
            "matmul_26": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "design",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_26": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w1, w2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "design",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "design",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "design",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "design",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "design[..., :-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "w1.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_56": {
                "input": {
                    "value": "tau",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('tau', dist.Gamma(torch.tensor(2.0), torch.tensor(2.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "AffineTransform_95": {
                "loc": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "random_effect_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('k', dist.Gamma(2.0 * torch.ones(n), torch.tensor(2.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "SigmoidTransform_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_84": {
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "design.shape[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "data": {
                    "value": "[[1.0, -1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "[[100.0, -100.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "[[-1.5, 0.5], [1.5, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "[[-1.0, 0.5], [2.5, -2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "[[1.0, -0.5], [1.5, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "[[6.0, -1.5], [0.5, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_161": {
                "tensors": {
                    "value": "[torch.tensor([[1.0, 1.0], [0.5, -2.5]]), torch.eye(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "design.shape[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "[10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "[1.0, -1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "[1.0, -1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "[10.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_158": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[10.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[10.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[10.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[10.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "[10.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[10.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "[10.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "[[1.0, 1.0], [0.5, -2.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_161": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/oed/test_linear_models_eig.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(y_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(theta_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(theta_dict.values()) + list(y_dict.values())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(y_dict.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "[[1.0, 0.0], [0.0, 1.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_62": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_77": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[1.0, 1.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "n_theta_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "n_theta_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "n_theta_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/oed/test_xexpx.py": {
        "torch": {
            "tensor_13": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_15": {
                "input": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/randomvariable/test_random_variable.py": {
        "torch": {
            "tensor_64": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/test_hessian.py": {
        "torch": {
            "randn_12": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_13": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(3, 10)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tmp.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_23": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "[Hxz, Hzz]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/test_minipyro.py": {
        "torch": {
            "tensor_64": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.3, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_127": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_150": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_180": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2, 0.3, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_60": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_62": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "expected_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "[0.2, 0.3, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "[0.5, 0.3, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[-1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_190": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/test_util.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2, 3, 4, 5, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0], [-2.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0], [-2.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0], [-2.0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, -1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dot_62": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dot_65": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tril_87": {
                "input": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 2.0], [-2.0, 0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 2.0], [-2.0, 0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 2.0], [-2.0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "tril_89": {
                "input": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 2.0], [-2.0, 0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 2.0], [-2.0, 0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 2.0], [-2.0, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_95": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 2.0, -1.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_97": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([1.0, 2.0, -1.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "[3.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[5.0, 6.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[3.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "[-1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[-1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/timeseries/test_gp.py": {
        "torch": {
            "randn_90": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0], [-3.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0], [0.0, -math.sqrt(12.0)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_43": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "dts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[500.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "[[0.0, 0.0], [0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_44": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultivariateNormal_114": {
                "variable": {
                    "value": "mvn",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(T)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{0.5: pyro.contrib.gp.kernels.Exponential, 1.5: pyro.contrib.gp.kernels.Matern32, 2.5: pyro.contrib.gp.kernels.Matern52}[nu_statedim]",
                            "Subscript"
                        ],
                        [
                            "kernel(input_dim=1, lengthscale=lengthscale, variance=variance)",
                            "Call"
                        ],
                        [
                            "kernel.forward(times) + obs_noise * torch.eye(T)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_120": {
                "variable": {
                    "value": "dts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "S",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "cumsum_120": {
                "variable": {
                    "value": "dts",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_149": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "gp.full_state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "gp.full_state_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_99": {
                "start": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "input": {
                    "value": "F",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[0.0, 1.0], [0.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "block_diag_embed(F + mask1 / lengthscale.pow(2.0) + mask2 / lengthscale)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "stat_cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gp._stationary_covariance()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_168": {
                "input": {
                    "value": "stat_cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gp._stationary_covariance()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_151": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_53": {
                "*size": {
                    "value": "num_gps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_54": {
                "*size": {
                    "value": "num_gps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_55": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_112": {
                "n": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_62": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_70": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_78": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_81": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_87": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/timeseries/test_lgssm.py": {
        "torch": {
            "randn_35": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_46": {
                "variable": {
                    "value": "trans_matrix_sq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.trans_matrix if model_class == 'lgssm' else model.z_trans_matrix",
                            "IfExp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.trans_matrix if model_class == 'lgssm' else model.z_trans_matrix",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_47": {
                "variable": {
                    "value": "trans_matrix_cubed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_matrix_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix, trans_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.trans_matrix if model_class == 'lgssm' else model.z_trans_matrix",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_49": {
                "variable": {
                    "value": "trans_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.trans_matrix if model_class == 'lgssm' else model.z_trans_matrix",
                            "IfExp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "obs_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.obs_matrix if model_class == 'lgssm' else model.z_obs_matrix",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_50": {
                "variable": {
                    "value": "trans_trans_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_matrix_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix, trans_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "obs_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.obs_matrix if model_class == 'lgssm' else model.z_obs_matrix",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_51": {
                "variable": {
                    "value": "trans_trans_trans_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_matrix_cubed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix_sq, trans_matrix)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "obs_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.obs_matrix if model_class == 'lgssm' else model.z_obs_matrix",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_60": {
                "variable": {
                    "value": "predicted_mean1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fs_loc.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "predicted_mean1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_61": {
                "variable": {
                    "value": "predicted_mean2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fs_loc.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix_sq, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "predicted_mean2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_62": {
                "variable": {
                    "value": "predicted_mean3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fs_loc.unsqueeze(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans_trans_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix_cubed, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_62": {
                "variable": {
                    "value": "predicted_mean3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_16": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_79": {
                "input": {
                    "value": "trans_obs.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.mm(fs_covar, trans_obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_81": {
                "input": {
                    "value": "process_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model._get_trans_dist().covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "model.trans_noise_scale_sq.diag_embed()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "obs_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.obs_matrix if model_class == 'lgssm' else model.z_obs_matrix",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_86": {
                "input": {
                    "value": "process_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model._get_trans_dist().covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "model.trans_noise_scale_sq.diag_embed()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "obs_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.obs_matrix if model_class == 'lgssm' else model.z_obs_matrix",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_93": {
                "input": {
                    "value": "process_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model._get_trans_dist().covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "model.trans_noise_scale_sq.diag_embed()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "obs_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.obs_matrix if model_class == 'lgssm' else model.z_obs_matrix",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_80": {
                "input": {
                    "value": "fs_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filtering_state.covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "filtering_state.covariance_matrix[-state_dim:, -state_dim:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_84": {
                "input": {
                    "value": "fs_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filtering_state.covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "filtering_state.covariance_matrix[-state_dim:, -state_dim:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix_sq, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_85": {
                "input": {
                    "value": "process_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model._get_trans_dist().covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "model.trans_noise_scale_sq.diag_embed()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_92": {
                "input": {
                    "value": "process_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model._get_trans_dist().covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "model.trans_noise_scale_sq.diag_embed()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_32": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_90": {
                "input": {
                    "value": "fs_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filtering_state.covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "filtering_state.covariance_matrix[-state_dim:, -state_dim:]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_trans_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix_cubed, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_91": {
                "input": {
                    "value": "process_covar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model._get_trans_dist().covariance_matrix",
                            "Attribute"
                        ],
                        [
                            "model.trans_noise_scale_sq.diag_embed()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans_trans_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(trans_matrix_sq, obs_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_22": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_29": {
                "*size": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/tracking/test_assignment.py": {
        "torch": {
            "zeros_51": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_133": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, -1.0, -2.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "assign_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-1.0, -INF, -INF], [-2.0, -2.0, -INF]], [[-1.0, -2.0, -3.0], [-2.0, -2.0, -1.0]], [[-1.0, -2.0, -3.0], [-2.0, -2.0, -1.0]], [[-1.0, -1.0, 1.0], [1.0, 1.0, -1.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "assign_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[a]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "assign_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[a11], [a21]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e1, e2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "assign_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[a11, a12]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e1, e2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "assign_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[a11, a12], [a21, a22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[e1, e2, e3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], [[1, 0, 0], [0, 1, 1], [0, 0, 1], [1, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]], [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "exists_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exists_logits_1, exists_logits_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_340": {
                "variable": {
                    "value": "assign_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_frames, num_detections * 2, num_objects * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-INF",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_177": {
                "variable": {
                    "value": "(e_grad, a_grad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "log_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "exists_dist.log_prob(exists).sum()",
                            "Call"
                        ],
                        [
                            "assign_dist.log_prob(assign).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[exists_logits, assign_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_185": {
                "variable": {
                    "value": "(e_grad, a_grad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "log_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "exists_dist.log_prob(exists).sum()",
                            "Call"
                        ],
                        [
                            "assign_dist.log_prob(assign).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[exists_logits, assign_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "[[0.5, 0.5, 0.0, 0.0], [0.0, 0.5, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[0.99, 0.8, 0.2, 0.2, 0.8, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_246": {
                "*size": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_247": {
                "*size": {
                    "value": "num_detections",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "3 * 3",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_259": {
                "*size": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_260": {
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_273": {
                "*size": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_321": {
                "*size": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_330": {
                "*size": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_274": {
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_detections",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "3 * 3",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_290": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_322": {
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_detections",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "3 * 3",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_331": {
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_detections",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "3 * 3",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_objects",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "2 * 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/tracking/test_distributions.py": {
        "torch": {
            "rand_15": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_16": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_17": {
                "variable": {
                    "value": "P0",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_18": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_23": {
                "variable": {
                    "value": "(dP0, dR)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist.log_prob(ys)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[P0, R]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/contrib/tracking/test_dynamic_models.py": {
        "torch": {
            "eigvalsh_31": {
                "variable": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_32": {
                "variable": {
                    "value": "w_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.eigvalsh(cov)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_33": {
                "variable": {
                    "value": "w_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linalg.eigvalsh(cov)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_68": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "P_pv_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2 * d, 2 * d)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_105": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_129": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_141": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "P_pv_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2 * d, 2 * d)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_168": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_179": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_134": {
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/tracking/test_ekf.py": {
        "torch": {
            "rand_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_16": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_48": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_35": {
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_35": {
                "n": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_67": {
                "*size": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_67": {
                "n": {
                    "value": "d",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/tracking/test_em.py": {
        "torch": {
            "full_76": {
                "variable": {
                    "value": "spurious_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "real_part.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "math.log(1 - p_exists)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "true_objects",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_objects",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.expected_num_objects",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_125": {
                "variable": {
                    "value": "fake_detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_fake_detections",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real_detections, fake_detections]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_55": {
                "variable": {
                    "value": "assign_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_num_objects + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "objects_plus_bogus",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_num_objects + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_97": {
                "mode": {
                    "value": "args.assignment_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "data": {
                    "value": "args.init_noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_143": {
                "*size": {
                    "value": "args.max_num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "args.init_noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_168": {
                "*size": {
                    "value": "args.max_num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "data": {
                    "value": "args.init_noise_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_208": {
                "*size": {
                    "value": "args.max_num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_122": {
                "*size": {
                    "value": "real_detections.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "args.num_real_detections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_objects",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.expected_num_objects",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/tracking/test_hashing.py": {
        "torch": {
            "rand_24": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0], [0.0, 1.0], [2.0, 0.0], [2.0, 0.5], [2.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_148": {
                "*size": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_85": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_97": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_114": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_115": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_33": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_34": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_36": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_37": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_38": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_95": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_96": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_98": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_99": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_100": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_116": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_117": {
                "*size": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/contrib/tracking/test_measurements.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * dimension",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_14": {
                "*size": {
                    "value": "dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_15": {
                "n": {
                    "value": "dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_27": {
                "*size": {
                    "value": "dimension",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/dist_fixture.py": {
        "torch": {
            "tensor_83": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dist_params.pop('logits')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "data": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "data": {
                    "value": "kwarg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs[k]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_binomial.py": {
        "torch": {
            "linspace_58": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_59": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_60": {
                "variable": {
                    "value": "n_minus_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "n_minus_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Binomial_63": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "k + n_minus_k",
                            "BinOp"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(-10.0, 10.0, 100)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_categorical.py": {
        "torch": {
            "randn_115": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (cardinality,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.6, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "self.batch_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.6, 0.3], [0.2, 0.4, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "self.test_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_27": {
                "variable": {
                    "value": "one",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "self.d_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.3, 0.5], [0.1, 0.1, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "self.d_test_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0], [5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "self.support_non_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "self.support",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0], [1.0, 1.0], [2.0, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "wrap_nested(probs, dim - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_28": {
                "input": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "one.sub(self.probs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_coalescent.py": {
        "torch": {
            "randn_27": {
                "variable": {
                    "value": "leaf_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "leaf_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_leaves",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_63": {
                "variable": {
                    "value": "rate_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rate_grid_shape + (num_steps,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "rate_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_94": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "broadcast_shape(leaf_times_shape, rate_grid_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_94": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_115": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "broadcast_shape(leaf_times_shape, rate_grid_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_115": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_137": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "broadcast_shape(leaf_times_shape, rate_grid_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_137": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "times",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coal_times, leaf_times]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "signs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-torch.ones_like(coal_times), torch.ones_like(leaf_times)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "times",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coal_times, leaf_times]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "signs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-torch.ones_like(coal_times), torch.ones_like(leaf_times)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "leaf_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_184": {
                "variable": {
                    "value": "leaf_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_44": {
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_44": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_62": {
                "*size": {
                    "value": "leaf_times_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_62": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_79": {
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_79": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_96": {
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_96": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_117": {
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_117": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_139": {
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_139": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_164": {
                "*size": {
                    "value": "batch_shape + (num_steps,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_188": {
                "*size": {
                    "value": "batch_shape + (num_steps,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_157": {
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_157": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_181": {
                "*size": {
                    "value": "batch_shape + (num_leaves,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_181": {
                "input": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_255": {
                "input": {
                    "value": "coal_times",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_sample_coalescent_times(leaf_times)",
                            "Call"
                        ],
                        [
                            "_sample_coalescent_times(leaf_times)",
                            "Call"
                        ],
                        [
                            "d.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "_sample_coalescent_times(leaf_times.expand(sample_shape + batch_shape + (-1,)))",
                            "Call"
                        ],
                        [
                            "d1.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "d1.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "CoalescentTimes(leaf_times).sample().clamp(min=0)",
                            "Call"
                        ],
                        [
                            "CoalescentTimes(leaf_times).sample()",
                            "Call"
                        ],
                        [
                            "CoalescentTimes(leaf_times).sample().clamp(min=0)",
                            "Call"
                        ],
                        [
                            "CoalescentTimes(leaf_times).sample()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_273": {
                "input": {
                    "value": "coal_times",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_sample_coalescent_times(leaf_times)",
                            "Call"
                        ],
                        [
                            "_sample_coalescent_times(leaf_times)",
                            "Call"
                        ],
                        [
                            "d.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "_sample_coalescent_times(leaf_times.expand(sample_shape + batch_shape + (-1,)))",
                            "Call"
                        ],
                        [
                            "d1.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "d1.sample(sample_shape)",
                            "Call"
                        ],
                        [
                            "CoalescentTimes(leaf_times).sample().clamp(min=0)",
                            "Call"
                        ],
                        [
                            "CoalescentTimes(leaf_times).sample()",
                            "Call"
                        ],
                        [
                            "CoalescentTimes(leaf_times).sample().clamp(min=0)",
                            "Call"
                        ],
                        [
                            "CoalescentTimes(leaf_times).sample()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_conjugate.py": {
        "torch": {
            "randn_81": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_81": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_82": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_82": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_83": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0 + total_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_99": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_99": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "gamma_conc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_117": {
                "variable": {
                    "value": "gamma_conc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "gamma_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_118": {
                "variable": {
                    "value": "gamma_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_119": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "20.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_101": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "input": {
                    "value": "event_shape + (1,) * len(batch_shape) + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[2.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[5.0, 8.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[10.0, 12.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[0.5, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[2.0, 8.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[2.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[5.0, 8.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[10.0, 12.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[0.5, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "[2.0, 8.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_67": {
                "start": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "20.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_conjugate_update.py": {
        "torch": {
            "randn_14": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_14": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_15": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_15": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (3,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_30": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2, 0.3, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_46": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_46": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_47": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_constraints.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_cuda.py": {
        "torch": {
            "grad_76": {
                "variable": {
                    "value": "cuda_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "cuda_value.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[params[key] for key in grad_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "grad_60": {
                "variable": {
                    "value": "cpu_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "cpu_value.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[params[key] for key in grad_params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_tensor_51": {
                "obj": {
                    "value": "val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "params[key].clone()",
                            "Call"
                        ],
                        [
                            "params[key].clone()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_delta.py": {
        "torch": {
            "randn_65": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(range(2, 2 + batch_dim + event_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "self.vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0], [1.0], [2.0], [3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "self.test_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[3.0], [3.0], [3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_20": {
                "variable": {
                    "value": "self.batch_test_data_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "variable": {
                    "value": "self.batch_test_data_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_21": {
                "variable": {
                    "value": "self.batch_test_data_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "8.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "variable": {
                    "value": "self.batch_test_data_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "self.batch_test_data_3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[:batch_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "data": {
                    "value": "1.234",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_distributions.py": {
        "torch": {
            "ones_101": {
                "variable": {
                    "value": "test_data_wrong_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d.shape() + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_123": {
                "variable": {
                    "value": "test_data_non_broadcastable",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "non_broadcastable_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(shape[0] + 1,) + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_214": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(100,) + d.shape()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "expected_support",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discrete_dist.expected_support",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_242": {
                "data": {
                    "value": "expected_support_non_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discrete_dist.expected_support_non_vec",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_417": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_444": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_empirical.py": {
        "torch": {
            "stack_17": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples)",
                            "Call"
                        ],
                        [
                            "empirical_dist.sample(sample_shape=torch.Size(sample_shape))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples).expand(batch_shape + [5] + event_shape)",
                            "Call"
                        ],
                        [
                            "empirical_dist.sample(sample_shape=torch.Size((1000,)))",
                            "Call"
                        ],
                        [
                            "torch.stack(samples).expand(batch_shape + [4] + event_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_43": {
                "variable": {
                    "value": "emp_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "agg_dim_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_43": {
                "variable": {
                    "value": "emp_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_ordering",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(len(batch_shape + event_shape) + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_48": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + [agg_dim_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples)",
                            "Call"
                        ],
                        [
                            "empirical_dist.sample(sample_shape=torch.Size(sample_shape))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples).expand(batch_shape + [5] + event_shape)",
                            "Call"
                        ],
                        [
                            "empirical_dist.sample(sample_shape=torch.Size((1000,)))",
                            "Call"
                        ],
                        [
                            "torch.stack(samples).expand(batch_shape + [4] + event_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "sample_to_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "event_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_131": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "event_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples)",
                            "Call"
                        ],
                        [
                            "empirical_dist.sample(sample_shape=torch.Size(sample_shape))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples).expand(batch_shape + [5] + event_shape)",
                            "Call"
                        ],
                        [
                            "empirical_dist.sample(sample_shape=torch.Size((1000,)))",
                            "Call"
                        ],
                        [
                            "torch.stack(samples).expand(batch_shape + [4] + event_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(batch_shape + [agg_dim_size])",
                            "Call"
                        ],
                        [
                            "torch.tensor(1.0).expand(batch_shape + [5])",
                            "Call"
                        ],
                        [
                            "torch.stack(weights).expand(batch_shape + [4])",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_165": {
                "variable": {
                    "value": "true_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isinf_107": {
                "input": {
                    "value": "log_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "empirical_dist.log_prob(sample_to_score)",
                            "Call"
                        ],
                        [
                            "empirical_dist.log_prob(sample_to_score)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_111": {
                "variable": {
                    "value": "sample_to_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3] + batch_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_20": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_123": {
                "tensors": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(batch_shape + [agg_dim_size])",
                            "Call"
                        ],
                        [
                            "torch.tensor(1.0).expand(batch_shape + [5])",
                            "Call"
                        ],
                        [
                            "torch.stack(weights).expand(batch_shape + [4])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_127": {
                "*size": {
                    "value": "event_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_170": {
                "tensors": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(batch_shape + [agg_dim_size])",
                            "Call"
                        ],
                        [
                            "torch.tensor(1.0).expand(batch_shape + [5])",
                            "Call"
                        ],
                        [
                            "torch.stack(weights).expand(batch_shape + [4])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_173": {
                "input": {
                    "value": "true_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.ones(size) * 2",
                            "BinOp"
                        ],
                        [
                            "torch.ones(batch_shape + event_shape, dtype=dtype) * 0.25",
                            "BinOp"
                        ],
                        [
                            "torch.randn([1, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[[0.0, 0.0, 0.0], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[0.5, 0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[0.25, 0.25, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "[[0.0, 0.0, 0.0], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_149": {
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "weight_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dtype if dtype is not torch.long else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_154": {
                "*size": {
                    "value": "batch_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_155": {
                "*size": {
                    "value": "batch_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "-1000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_16": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "event_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "event_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "event_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_extended.py": {
        "torch": {
            "grad_16": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "value.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 2.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5, 0.4, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "20.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_50": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2, 1.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2, 0.5, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 2.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "20.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_92": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isfinite_17": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_gaussian_mixtures.py": {
        "torch": {
            "exp_56": {
                "variable": {
                    "value": "_pis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "component_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(1.5 * torch.rand(K)).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "(0.1 * torch.rand(K)).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "component_logits.unsqueeze(0).expand(n_samples, K)",
                            "Call"
                        ],
                        [
                            "component_logits.unsqueeze(0).expand(n_samples, K)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1.0, -1.0], [1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[math.log(0.25), math.log(0.75)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "correct_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "correct_log_prob",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.25 * math.exp(-2.25 / 4.0)",
                            "BinOp"
                        ],
                        [
                            "correct_log_prob / (2.0 * math.pi)",
                            "BinOp"
                        ],
                        [
                            "math.log(correct_log_prob)",
                            "Call"
                        ],
                        [
                            "[correct_log_prob] * batch_size",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(correct_log_prob)",
                            "Call"
                        ],
                        [
                            "0.25 * math.exp(-0.5 / (4.0 * 2.25)) / 2.25",
                            "BinOp"
                        ],
                        [
                            "math.log(correct_log_prob)",
                            "Call"
                        ],
                        [
                            "0.25 * math.exp(-0.5 * (0.25 / 4.0 + 0.5625 / 2.25)) / 3.0",
                            "BinOp"
                        ],
                        [
                            "math.log(correct_log_prob)",
                            "Call"
                        ],
                        [
                            "[correct_log_prob] * batch_size",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(correct_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "component_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.5, 2.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[math.log(0.25), math.log(0.75)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[math.sqrt(0.33), math.sqrt(0.67)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 1.5], [1.5, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [-1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[math.log(0.25), math.log(0.75)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "variable": {
                    "value": "correct_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "correct_log_prob",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.25 * math.exp(-2.25 / 4.0)",
                            "BinOp"
                        ],
                        [
                            "correct_log_prob / (2.0 * math.pi)",
                            "BinOp"
                        ],
                        [
                            "math.log(correct_log_prob)",
                            "Call"
                        ],
                        [
                            "[correct_log_prob] * batch_size",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(correct_log_prob)",
                            "Call"
                        ],
                        [
                            "0.25 * math.exp(-0.5 / (4.0 * 2.25)) / 2.25",
                            "BinOp"
                        ],
                        [
                            "math.log(correct_log_prob)",
                            "Call"
                        ],
                        [
                            "0.25 * math.exp(-0.5 * (0.25 / 4.0 + 0.5625 / 2.25)) / 3.0",
                            "BinOp"
                        ],
                        [
                            "math.log(correct_log_prob)",
                            "Call"
                        ],
                        [
                            "[correct_log_prob] * batch_size",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(correct_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_43": {
                "variable": {
                    "value": "component_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_60": {
                "variable": {
                    "value": "analytic1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(omega * locs).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "analytic2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * torch.pow(omega * coord_scale * component_scale.unsqueeze(-1), 2.0).sum(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_141": {
                "input": {
                    "value": "(omega * z).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_40": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_45": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_48": {
                "*size": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_63": {
                "input": {
                    "value": "omega * coord_scale * component_scale.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_70": {
                "input": {
                    "value": "coord_scale * component_scale.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_72": {
                "input": {
                    "value": "locs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(K, D, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(K, D).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "locs.unsqueeze(0).expand(n_samples, K, D)",
                            "Call"
                        ],
                        [
                            "locs.unsqueeze(0).expand(n_samples, K, D)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-1.0, -1.0], [1.0, 1.0]])",
                            "Call"
                        ],
                        [
                            "locs.unsqueeze(0).expand(batch_size, 2, 2)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 1.0], [-1.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "locs.unsqueeze(0).expand(batch_size, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_143": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist.rsample(sample_shape=sample_shape)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_53": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_haar.py": {
        "torch": {
            "eye_14": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_hmm.py": {
        "torch": {
            "randn_71": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, state_dim, state_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_172": {
                "variable": {
                    "value": "init_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "init_shape + (state_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_173": {
                "variable": {
                    "value": "trans_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trans_shape + (state_dim, state_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_174": {
                "variable": {
                    "value": "obs_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_shape + (state_dim,) + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_224": {
                "variable": {
                    "value": "init_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "init_shape + (state_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_225": {
                "variable": {
                    "value": "trans_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trans_shape + (state_dim, state_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_226": {
                "variable": {
                    "value": "obs_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_shape + (state_dim,) + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_248": {
                "variable": {
                    "value": "init_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_249": {
                "variable": {
                    "value": "trans_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_282": {
                "variable": {
                    "value": "init_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_283": {
                "variable": {
                    "value": "trans_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_284": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "event_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_285": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "event_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "exp_285": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "init_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "variable": {
                    "value": "trans_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.9, 0.1], [0.1, 0.9]], [[0.1, 0.9], [0.9, 0.1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1 * 0.9 + 0.9 * 0.1, 0.9 ** 3 + 3 * 0.9 * 0.1 ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_366": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trans_mat_shape + (hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_368": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_mat_shape + (hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_436": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(duration,) + (hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_438": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(duration,) + (hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_439": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(duration, obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_440": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(duration, obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_440": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_459": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_461": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(hidden_dim) + t * obs.dim() for t in range(T)] + [torch.arange(obs_dim) + hidden_dim + t * obs.dim() for t in range(T)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_653": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(hidden_dim) + t * obs.dim() for t in range(T)] + [torch.arange(obs_dim) + hidden_dim + t * obs.dim() for t in range(T)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_733": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trans_mat_shape + (hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_735": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_mat_shape + (hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_780": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_782": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_821": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(hidden_dim) + t * obs.dim() for t in range(T)] + [torch.arange(obs_dim) + hidden_dim + t * obs.dim() for t in range(T)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_840": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "skew_scale_loc_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_840": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_841": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "skew_scale_loc_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_879": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trans_mat_shape + (hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_881": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_mat_shape + (hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_907": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(init_shape + (6,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (1,), trans_shape, obs_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(scale_shape + (1,), init_shape + (1,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (4,), trans_mat_shape, trans_dist_shape, obs_mat_shape, obs_dist_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (1,), trans_mat_shape, trans_dist_shape, obs_mat_shape, obs_dist_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (6,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_907": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_908": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(init_shape + (6,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (1,), trans_shape, obs_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(scale_shape + (1,), init_shape + (1,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (4,), trans_mat_shape, trans_dist_shape, obs_mat_shape, obs_dist_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (1,), trans_mat_shape, trans_dist_shape, obs_mat_shape, obs_dist_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (6,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_909": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "broadcast_shape(init_shape + (6,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (1,), trans_shape, obs_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(scale_shape + (1,), init_shape + (1,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (4,), trans_mat_shape, trans_dist_shape, obs_mat_shape, obs_dist_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (1,), trans_mat_shape, trans_dist_shape, obs_mat_shape, obs_dist_shape)",
                            "Call"
                        ],
                        [
                            "broadcast_shape(init_shape + (6,), trans_mat_shape, trans_mvn_shape, obs_mat_shape, obs_mvn_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_909": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_945": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trans_mat_shape + (hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_947": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_mat_shape + (hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_1023": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "base_trans_mat_shape + (hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_1025": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "base_obs_mat_shape + (hidden_dim, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_1045": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape + (obs_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cholesky_557": {
                "variable": {
                    "value": "expected_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_inverse_557": {
                "variable": {
                    "value": "expected_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_250": {
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "state_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "obs_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_492": {
                "*size": {
                    "value": "data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_518": {
                "start": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_654": {
                "start": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_822": {
                "start": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_519": {
                "start": {
                    "value": "obs_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_655": {
                "start": {
                    "value": "obs_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_823": {
                "start": {
                    "value": "obs_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_ig.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(value)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_improper_uniform.py": {
        "torch": {
            "randn_26": {
                "*size": {
                    "value": "batch_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_independent.py": {
        "torch": {
            "zeros_113": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_139": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_21": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_kl.py": {
        "torch": {
            "randn_15": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_16": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_17": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_17": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size, size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_52": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_55": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size, size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_65": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_66": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_71": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (size, size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExpTransform_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StickBreakingTransform_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_31": {
                "n": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_57": {
                "n": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_72": {
                "n": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_86": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_87": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_lkj.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "value_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_23": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "min": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tril_23": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_43": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "min": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TransformedDistribution_125": {
                "variable": {
                    "value": "test_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "Beta(concentration, concentration)",
                    "type": "Call",
                    "possible_values": []
                },
                "transforms": {
                    "value": "AffineTransform(loc=-1.0, scale=2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_33": {
                "tensors": {
                    "value": "[torch.autograd.grad(y, (x,), retain_graph=True)[0] for y in ys]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "det_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[concentration]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Beta_126": {
                "concentration1": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AffineTransform_126": {
                "loc": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_108": {
                "start": {
                    "value": "dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "a_sample.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "a_sample.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_140": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_33": {
                "outputs": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty(y_shape).uniform_(-4, 4).requires_grad_()",
                            "Call"
                        ],
                        [
                            "transform(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(x,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_log_normal_negative_binomial.py": {
        "torch": {
            "randn_14": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_16": {
                "variable": {
                    "value": "multiplicative_noise_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_39": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_23": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_lowrank_mvn.py": {
        "torch": {
            "tensor_11": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 1.0, 2.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0, 4.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0], [-1.0, 3.0], [2.0, 1.0], [3.0, 2.0], [4.0, 4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 1.0, 1.0, 2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0, 1.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0], [-1.0, 1.0], [2.0, 1.0], [2.0, 2.0], [4.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 3.0, 4.0, 1.0, 7.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0, 2.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 2.0, 4.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[3.0, 2.0], [-1.0, 3.0], [3.0, 1.0], [3.0, 3.0], [4.0, 4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_mask.py": {
        "torch": {
            "tensor_15": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_90": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size(mask_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tensor(0.0)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(-1) + torch.arange(float(size))",
                            "BinOp"
                        ],
                        [
                            "checker_mask(mask_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mask)",
                            "Call"
                        ],
                        [
                            "torch.empty(torch.Size(mask_shape)).bernoulli_(0.5).bool()",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 1], [1, 1]]).bool()",
                            "Call"
                        ],
                        [
                            "((torch.tensor(p_mask) if isinstance(p_mask, bool) else p_mask) & (torch.tensor(q_mask) if isinstance(q_mask, bool) else q_mask)).expand(2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_68": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "dist_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_104": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_120": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_121": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "*size": {
                    "value": "shape if shape else ()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "shape if shape else ()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "arange_17": {
                "start": {
                    "value": "float(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "data": {
                    "value": "p_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "q_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_mixture.py": {
        "torch": {
            "empty_29": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_63": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_89": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size(mask_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_92": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "value_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_107": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size((1,) * len(batch_shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "event_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size((8,))",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_55": {
                "n": {
                    "value": "event_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "component0_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "component1_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "event_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size((8,))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_58": {
                "*size": {
                    "value": "event_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size((8,))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_mvn.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loc_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_17": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cov_shape + (dim, rank)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_mvt.py": {
        "torch": {
            "rand_19": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "df_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_19": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_20": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loc_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_21": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cov_shape + (dim, rank)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cholesky_23": {
                "variable": {
                    "value": "scale_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(cov_shape + (dim, rank), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "cov.matmul(cov.transpose(-1, -2))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_84": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_85": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim, dim + dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_86": {
                "variable": {
                    "value": "scale_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.matmul(A.transpose(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Gamma_99": {
                "variable": {
                    "value": "gamma_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "df / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "rate": {
                    "value": "df / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_101": {
                "variable": {
                    "value": "mvn",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(loc_shape + (dim,), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_shape + (dim,))",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_shape + (dim,))",
                            "Call"
                        ]
                    ]
                },
                "scale_tril": {
                    "value": "mvn_scale_tril",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scale_tril / gamma_samples.sqrt().unsqueeze(-1).unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Uniform_142": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-0.5 * domain_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "high": {
                    "value": "0.5 * domain_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_163": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_164": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim, dim + dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_165": {
                "variable": {
                    "value": "scale_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.matmul(A.transpose(-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StudentT_93": {
                "variable": {
                    "value": "expected_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "df": {
                    "value": "df.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(loc_shape + (dim,), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_shape + (dim,))",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_shape + (dim,))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale_tril[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "expected_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_88": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "df",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.rand(df_shape, requires_grad=True).exp()",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_shape).exp() + 2",
                            "BinOp"
                        ],
                        [
                            "torch.randn(batch_shape).exp() + 4",
                            "BinOp"
                        ],
                        [
                            "6.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "mm_121": {
                "input": {
                    "value": "scale_tril",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linalg.cholesky(cov)",
                            "Call"
                        ],
                        [
                            "torch.linalg.cholesky(A.matmul(A.transpose(-2, -1)))",
                            "Call"
                        ],
                        [
                            "(0.5 * torch.randn(dim)).exp().diag() + 0.1 * torch.randn(dim, dim)",
                            "BinOp"
                        ],
                        [
                            "scale_tril.tril(0)",
                            "Call"
                        ],
                        [
                            "(0.2 * torch.randn(dim) - 1.5).exp().diag() + 0.1 * torch.randn(dim, dim)",
                            "BinOp"
                        ],
                        [
                            "0.1 * scale_tril.tril(0)",
                            "BinOp"
                        ],
                        [
                            "torch.linalg.cholesky(A.matmul(A.transpose(-2, -1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "scale_tril.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "df",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.rand(df_shape, requires_grad=True).exp()",
                            "Call"
                        ],
                        [
                            "torch.randn(batch_shape).exp() + 2",
                            "BinOp"
                        ],
                        [
                            "torch.randn(batch_shape).exp() + 4",
                            "BinOp"
                        ],
                        [
                            "6.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_166": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_177": {
                "size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_181": {
                "size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_185": {
                "size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_109": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_130": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_nanmasked.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_21": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_22": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_22": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_35": {
                "variable": {
                    "value": "(loc_grad, scale_grad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_48": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (p,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (p,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "scale_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (p, p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_66": {
                "variable": {
                    "value": "(loc_grad, scale_tril_grad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale_tril]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_88": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_80": {
                "variable": {
                    "value": "scale_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_30": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_41": {
                "input": {
                    "value": "actual[~ok]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_61": {
                "*size": {
                    "value": "batch_shape + (p,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "input": {
                    "value": "actual[unobserved]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_89": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_79": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_omt_mvn.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[omega1, omega2, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "off_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[zero_vec, [L21, 0.0, 0.0], zero_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[omega1, omega2, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "off_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[zero_vec, [L21, 0.0, 0.0], zero_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 1.0, 1.0, 2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0, 1.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, -1.0, 2.0, 2.0, 4.0], [2.0, 1.0, 1.0, 2.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 3.0, 4.0, 1.0, 7.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_120": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.diag(torch.tensor([L11, L22, L33])) + off_diag",
                            "BinOp"
                        ],
                        [
                            "torch.diag(torch.tensor([L11, L22, L33])) + off_diag",
                            "BinOp"
                        ],
                        [
                            "D.diag() + torch.tril(W.t().matmul(W))",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "L.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_51": {
                "input": {
                    "value": "(omega * z).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "backward_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_42": {
                "input": {
                    "value": "torch.tensor([L11, L22, L33])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_57": {
                "input": {
                    "value": "off_diag.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_80": {
                "input": {
                    "value": "torch.tensor([L11, L22, L33])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_92": {
                "input": {
                    "value": "(omega * z).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "backward_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tril_119": {
                "input": {
                    "value": "W.t().matmul(W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[L11, L22, L33]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[L11, L22, L33]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_95": {
                "input": {
                    "value": "off_diag.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_126": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_85": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_one_hot_categorical.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.6, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "self.batch_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.6, 0.3], [0.2, 0.4, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "self.test_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "self.test_data_nhot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_27": {
                "variable": {
                    "value": "one",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "self.d_ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.3, 0.5], [0.1, 0.1, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "self.d_test_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0], [5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "self.support_one_hot_non_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "self.support_one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 0, 0], [1, 0, 0]], [[0, 1, 0], [0, 1, 0]], [[0, 0, 1], [0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "self.discrete_support_non_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0], [1.0], [2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "self.discrete_support",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.0], [3.0]], [[1.0], [4.0]], [[2.0], [5.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "wrap_nested(probs, dim - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_28": {
                "input": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "one.sub(self.probs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_one_one_matching.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_36": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "[[0.0, 0.0], [0.0, -math.inf]]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_102": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_145": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "[[0.0, 0.0], [0.0, -math.inf]]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradcheck_77": {
                "func": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "[[0.0, 0.0], [0.0, -math.inf]]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_nodes, num_nodes, dtype=dtype) * 10",
                            "BinOp"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_85": {
                "input": {
                    "value": "actual",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.grad(d2.log_partition_function, [logits])[0]",
                            "Subscript"
                        ],
                        [
                            "d.mode()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(logits)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.autograd.grad(d1.log_partition_function, [logits])[0]",
                            "Subscript"
                        ],
                        [
                            "values[i]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(num_nodes, num_nodes)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_48": {
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_83": {
                "outputs": {
                    "value": "d1.log_partition_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_84": {
                "outputs": {
                    "value": "d2.log_partition_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_92": {
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_116": {
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_129": {
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_140": {
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_one_two_matching.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "leaf_times",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_leaves",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "times",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[leaf_times, coal_times]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_28": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(times)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "sources",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids[:root], ids[root + 1:]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_34": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "dt > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "-dt",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "dt.new_tensor(-math.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_59": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.where(dt > 0, -dt, dt.new_tensor(-math.inf))",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, -math.inf]]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "logits.detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_155": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_234": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_235": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.where(dt > 0, -dt, dt.new_tensor(-math.inf))",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, -math.inf]]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "logits.detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_261": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_262": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.where(dt > 0, -dt, dt.new_tensor(-math.inf))",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, -math.inf]]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "logits.detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_like_36": {
                "input": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.where(dt > 0, -dt, dt.new_tensor(-math.inf))",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, -math.inf]]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "logits.detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradcheck_127": {
                "func": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.where(dt > 0, -dt, dt.new_tensor(-math.inf))",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, -math.inf]]",
                            "List"
                        ],
                        [
                            "torch.tensor(logits, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins) * 10",
                            "BinOp"
                        ],
                        [
                            "logits.detach().requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ],
                        [
                            "torch.randn(num_sources, num_destins, dtype=dtype) * 10",
                            "BinOp"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_135": {
                "input": {
                    "value": "actual",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.autograd.grad(d2.log_partition_function, [logits])[0]",
                            "Subscript"
                        ],
                        [
                            "d.mode()",
                            "Call"
                        ],
                        [
                            "d.mode()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(logits)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.autograd.grad(d1.log_partition_function, [logits])[0]",
                            "Subscript"
                        ],
                        [
                            "values[i]",
                            "Subscript"
                        ],
                        [
                            "values[i]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(num_sources, num_destins)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_sources, num_destins)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_72": {
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isnan_117": {
                "input": {
                    "value": "logz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d.log_partition_function",
                            "Attribute"
                        ]
                    ]
                }
            },
            "grad_118": {
                "outputs": {
                    "value": "logz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d.log_partition_function",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[times]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_119": {
                "input": {
                    "value": "dt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "times[sources][:, None] - times[destins]",
                            "BinOp"
                        ],
                        [
                            "dt * 10 / dt.detach().std()",
                            "BinOp"
                        ],
                        [
                            "torch.autograd.grad(logz, [times])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_133": {
                "outputs": {
                    "value": "d1.log_partition_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_134": {
                "outputs": {
                    "value": "d2.log_partition_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_143": {
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_154": {
                "start": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_156": {
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_180": {
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_207": {
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_229": {
                "*size": {
                    "value": "num_sources",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ],
                        [
                            "2 * num_destins",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "num_destins",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_ordered_logistic.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "predictor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "predictor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "predictor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_60": {
                "variable": {
                    "value": "predictor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "predictor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_74": {
                "variable": {
                    "value": "pre_cutpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1, 2, 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Size(batch_shape + event_shape)",
                            "Call"
                        ],
                        [
                            "torch.Size(batch_shape + event_shape)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_68": {
                "input": {
                    "value": "sample <= 6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_82": {
                "input": {
                    "value": "predictor.grad != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_84": {
                "input": {
                    "value": "pre_cutpoints.grad != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "allclose_99": {
                "input": {
                    "value": "sample",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.sample([100])",
                            "Call"
                        ],
                        [
                            "dist.sample([100])",
                            "Call"
                        ],
                        [
                            "Normal(0, 1).expand(shape).sample()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_tf_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.inv(tf_sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_129": {
                "input": {
                    "value": "log_det",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log_abs_det_jacobian(x, y)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "log_det_actual",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cjald(tf, x).det().abs().log()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_18": {
                "input": {
                    "value": "torch.randn(n_cutpoints)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[1, 2, 3, 4, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[1, 2, 4, 3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[1, 2, 3, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_41": {
                "start": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_42": {
                "start": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_43": {
                "tensors": {
                    "value": "4 * [torch.arange(5)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_53": {
                "input": {
                    "value": "torch.randn(10, 2, 3, 4, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_61": {
                "input": {
                    "value": "torch.randn(5, 6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "jacobian_111": {
                "func": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_113": {
                "tensors": {
                    "value": "[cjald(func, X[i]) for i in range(X.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_18": {
                "*size": {
                    "value": "n_cutpoints",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_44": {
                "input": {
                    "value": "torch.randn(3, 4, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_45": {
                "input": {
                    "value": "torch.randn(predictor.shape + (100,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_53": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_61": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "predictor.shape + (100,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_43": {
                "start": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_pickle.py": {
        "torch": {
            "load_91": {
                "variable": {
                    "value": "deserialized",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_89": {
                "obj": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dist(*args)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                },
                "pickle_protocol": {
                    "value": "pickle.HIGHEST_PROTOCOL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_36": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_36": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_41": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_58": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_62": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExpTransform_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_polya_gamma.py": {
        "torch": {
            "linspace_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "d.truncation_point",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_points",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logsumexp_19": {
                "input": {
                    "value": "d.log_prob(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_13": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_projected_normal.py": {
        "torch": {
            "full_16": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(strength)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_24": {
                "input": {
                    "value": "concentration.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_17": {
                "input": {
                    "value": "concentration",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.full((dim,), float(strength), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_rejector.py": {
        "torch": {
            "ones_24": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_33": {
                "variable": {
                    "value": "rates",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "rates",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "factors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_69": {
                "variable": {
                    "value": "rates",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_70": {
                "variable": {
                    "value": "factors",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_88": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_106": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_107": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_135": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_136": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_164": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "full_165": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_46": {
                "outputs": {
                    "value": "surrogate_elbo.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "num_samples",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "num_samples",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_109": {
                "*size": {
                    "value": "num_samples",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_138": {
                "*size": {
                    "value": "num_samples",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "100000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_relaxed_straight_through.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(probs, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(probs, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3, 0.4]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(temp)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(temp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(probs, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(probs, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3, 0.4]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(temp)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(temp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.25] * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_39": {
                "outputs": {
                    "value": "log_prob.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[probs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[0.25] * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_102": {
                "outputs": {
                    "value": "log_prob.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[probs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_51": {
                "outputs": {
                    "value": "dist_q.log_prob(z).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_55": {
                "outputs": {
                    "value": "dist_q.log_prob(z).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "[0.1, 0.2, 0.3, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_114": {
                "outputs": {
                    "value": "dist_q.log_prob(z).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_118": {
                "outputs": {
                    "value": "dist_q.log_prob(z).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_reshape.py": {
        "torch": {
            "ones_51": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[:batch_dim]",
                            "Subscript"
                        ],
                        [
                            "shape[sample_dim:sample_dim + batch_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_93": {
                "*size": {
                    "value": "event_shape",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[batch_dim:]",
                            "Subscript"
                        ],
                        [
                            "shape[sample_dim + batch_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_shapes.py": {
        "torch": {
            "zeros_28": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_80": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "loc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "loc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_10": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_sine_bivariate_von_mises.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[binom(2 * i, i) for i in range(n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_30": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VonMises_36": {
                "variable": {
                    "value": "vm",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration": {
                    "value": "tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "HalfNormal_37": {
                "variable": {
                    "value": "hn",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Beta_38": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "tensor(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "tensor(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "VonMises_55": {
                "variable": {
                    "value": "vm",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration": {
                    "value": "tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "HalfNormal_56": {
                "variable": {
                    "value": "hn",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Beta_57": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "tensor(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "tensor(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "VonMises_77": {
                "variable": {
                    "value": "vm",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration": {
                    "value": "tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "HalfNormal_78": {
                "variable": {
                    "value": "hn",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "tensor(0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Beta_79": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "tensor(2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "tensor(5.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_45": {
                "input": {
                    "value": "torch.prod(conc, dim=0) > corr ** 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[0.4, 0.2, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_23": {
                "input": {
                    "value": "phi_val - loc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_66": {
                "input": {
                    "value": "torch.prod(conc, dim=0) > corr ** 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "prod_84": {
                "input": {
                    "value": "conc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hn.sample((2, *batch_dim))",
                            "Call"
                        ],
                        [
                            "hn.sample((2, *batch_dim))",
                            "Call"
                        ],
                        [
                            "hn.sample((2,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_21": {
                "input": {
                    "value": "phi_val - loc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_22": {
                "input": {
                    "value": "psi_val - loc2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_45": {
                "input": {
                    "value": "conc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hn.sample((2, *batch_dim))",
                            "Call"
                        ],
                        [
                            "hn.sample((2, *batch_dim))",
                            "Call"
                        ],
                        [
                            "hn.sample((2,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "prod_66": {
                "input": {
                    "value": "conc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hn.sample((2, *batch_dim))",
                            "Call"
                        ],
                        [
                            "hn.sample((2, *batch_dim))",
                            "Call"
                        ],
                        [
                            "hn.sample((2,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_sine_skewed.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "skewness",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "event_shape.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "act_skewness",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v for (k, v) in pyro.get_param_store().items() if 'skew' in k]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "skewness",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "skews",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "any_24": {
                "input": {
                    "value": "max_ < 1e-15",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_27": {
                "input": {
                    "value": "max_ < 1e-15",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_spanning_tree.py": {
        "torch": {
            "tensor_39": {
                "variable": {
                    "value": "expected_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "expected_grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(expected_grid, dtype=torch.long).reshape(2, K)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "expected_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_53": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(v, v + 1) for v in range(V - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_67": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_91": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_106": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_124": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_140": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_164": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[counts[k] for k in keys]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensors[k] for k in keys]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_81": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_192": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_195": {
                "variable": {
                    "value": "edge_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "V * (V - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_stable.py": {
        "torch": {
            "empty_19": {
                "variable": {
                    "value": "stability",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_20": {
                "variable": {
                    "value": "skew",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_21": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_21": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_22": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_134": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_147": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_137": {
                "input": {
                    "value": "d.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_150": {
                "input": {
                    "value": "d.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_tensor_type.py": {
        "torch": {}
    },
    "tests/distributions/test_torch_patch.py": {
        "torch": {
            "ones_13": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim, dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_30": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.matmul(y.transpose(-1, -2))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_transforms.py": {
        "torch": {
            "arange_414": {
                "variable": {
                    "value": "arange",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim",
                    "type": "List",
                    "possible_values": [
                        [
                            "[-1, -2]",
                            "List"
                        ],
                        [
                            "[-1, -2]",
                            "List"
                        ],
                        [
                            "[-1, -2]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_416": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim * (dim - 1) // 2,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_465": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "batch_shape + (dim, dim)",
                            "BinOp"
                        ],
                        [
                            "[(3,), (3, 4), (3, 4, 5)]",
                            "List"
                        ],
                        [
                            "[(3, 16, 16), (1, 3, 32, 32), (2, 5, 3, 64, 64)]",
                            "List"
                        ],
                        [
                            "[(3, 16, 16), (1, 3, 32, 32), (2, 5, 3, 64, 64)]",
                            "List"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "temp_transform.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "jacobian_444": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "transform_to_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[..., tril_mask].clone().requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_101": {
                "variable": {
                    "value": "numeric_ldt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.diag(jacobian))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_103": {
                "variable": {
                    "value": "numeric_ldt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(jacobian.det())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "diag_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(nonzero(jacobian))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_111": {
                "variable": {
                    "value": "lower_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tril(nonzero(jacobian), diagonal=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_208": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "context_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "context_dim",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_267": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "context_dim",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_344": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cholesky_448": {
                "input": {
                    "value": "x_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vec_to_mat(x_vec)",
                            "Call"
                        ],
                        [
                            "x_vec.new_zeros(batch_shape + (dim, dim))",
                            "Call"
                        ],
                        [
                            "x_mat + x_mat.transpose(-2, -1) - x_mat.diagonal(dim1=-2, dim2=-1).diag_embed()",
                            "BinOp"
                        ],
                        [
                            "x_mat + x_mat.new_ones(x_mat.shape[-1]).diag_embed()",
                            "BinOp"
                        ],
                        [
                            "vec_to_mat(x_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_71": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "epsilon_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "batch_shape + (dim, dim)",
                            "BinOp"
                        ],
                        [
                            "[(3,), (3, 4), (3, 4, 5)]",
                            "List"
                        ],
                        [
                            "[(3, 16, 16), (1, 3, 32, 32), (2, 5, 3, 64, 64)]",
                            "List"
                        ],
                        [
                            "[(3, 16, 16), (1, 3, 32, 32), (2, 5, 3, 64, 64)]",
                            "List"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_118": {
                "*size": {
                    "value": "shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "batch_shape + (dim, dim)",
                            "BinOp"
                        ],
                        [
                            "[(3,), (3, 4), (3, 4, 5)]",
                            "List"
                        ],
                        [
                            "[(3, 16, 16), (1, 3, 32, 32), (2, 5, 3, 64, 64)]",
                            "List"
                        ],
                        [
                            "[(3, 16, 16), (1, 3, 32, 32), (2, 5, 3, 64, 64)]",
                            "List"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "base_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_136": {
                "*size": {
                    "value": "base_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_162": {
                "*size": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_162": {
                "*size": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_71": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "transform.inv(T.CorrLCholeskyTransform()(z))",
                            "Call"
                        ],
                        [
                            "torch.randn(shape)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[:-1] + self.input_shape)",
                            "Call"
                        ],
                        [
                            "self.transform._inverse(y)",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[:x.dim() - len(self.input_shape)] + (-1,))",
                            "Call"
                        ],
                        [
                            "x.reshape(x.shape[:-1] + self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.randn(1, input_dim)",
                            "Call"
                        ],
                        [
                            "torch.rand(1, input_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_101": {
                "input": {
                    "value": "torch.diag(jacobian)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_103": {
                "input": {
                    "value": "jacobian.det()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_110": {
                "input": {
                    "value": "nonzero(jacobian)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tril_111": {
                "input": {
                    "value": "nonzero(jacobian)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normal_233": {
                "mean": {
                    "value": "torch.arange(0.0, input_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.arange(1.0, 1.0 + input_dim) / input_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_345": {
                "*size": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slogdet_445": {
                "input": {
                    "value": "jacobian",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.functional.jacobian(transform_to_vec, x_vec)",
                            "Call"
                        ],
                        [
                            "torch.zeros(input_dim, input_dim)",
                            "Call"
                        ],
                        [
                            "permuted_jacobian",
                            "Name"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "diag_101": {
                "input": {
                    "value": "jacobian",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.functional.jacobian(transform_to_vec, x_vec)",
                            "Call"
                        ],
                        [
                            "torch.zeros(input_dim, input_dim)",
                            "Call"
                        ],
                        [
                            "permuted_jacobian",
                            "Name"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_234": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "input_dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "width_dim ** 2 * 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_235": {
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_unit.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "log_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "log_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_util.py": {
        "torch": {
            "ones_111": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_214": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_222": {
                "variable": {
                    "value": "jit_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_344": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_355": {
                "variable": {
                    "value": "jit_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_365": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_366": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_358": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_360": {
                "seed": {
                    "value": "12345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_376": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_378": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_396": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_398": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "data": {
                    "value": "[2.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "data": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "data": {
                    "value": "[2.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "data": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_377": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_397": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_401": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_402": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_von_mises.py": {
        "torch": {
            "atan2_99": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples_ss / samples_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "samples_cs / samples_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LBFGS_110": {
                "variable": {
                    "value": "bfgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[kappa]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_155": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_173": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_177": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_189": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_184": {
                "input": {
                    "value": "ratio - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_zero_inflated.py": {
        "torch": {
            "rand_25": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gate_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_26": {
                "*size": {
                    "value": "base_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "-99.9",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "math.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(gate_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "data": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "-99.9",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_107": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "math.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "data": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(gate_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_132": {
                "data": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/testing/test_gof.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            },
            "Categorical_15": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(logits - logits.logsumexp(-1)).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100000",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/doctest_fixtures.py": {
        "torch": {}
    },
    "tests/infer/autoguide/test_gaussian.py": {
        "torch": {
            "arange_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "shape.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size([5, 4, 3, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_158": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "entropy1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "guide1._dense_get_mvn().entropy()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[params1[k] for k in names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_161": {
                "variable": {
                    "value": "grads2",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "entropy2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tr.trace.nodes['_AutoGaussianFunsor_latent']['log_prob'].mean()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[params2[k] for k in names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_177": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(model, guide1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[params1[k] for k in names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_178": {
                "variable": {
                    "value": "grads2",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(model, guide2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[params2[k] for k in names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "variable": {
                    "value": "coef_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_524": {
                "variable": {
                    "value": "coef_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[str_to_number[c] for c in row if c != ' '] for row in expected_str]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "set_default_dtype_858": {
                "d": {
                    "value": "torch.double if args.double else torch.float",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "grad1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(grad1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_675": {
                "*size": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_676": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_677": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_695": {
                "*size": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_696": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_697": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_725": {
                "*size": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_726": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_727": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_727": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_727": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_817": {
                "*size": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_818": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_819": {
                "*size": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_819": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_819": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_860": {
                "t": {
                    "value": "torch.cuda.DoubleTensor if args.double else torch.cuda.FloatTensor",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_like_134": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_169": {
                "variable": {
                    "value": "grad2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(grad2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_189": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_426": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_210": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_407": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_449": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_486": {
                "*size": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_533": {
                "*size": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_620": {
                "*size": {
                    "value": "F",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/autoguide/test_inference.py": {
        "torch": {
            "tensor_144": {
                "variable": {
                    "value": "expected_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.2, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "expected_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.2, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_224": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 1.0, 1.5, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * 4 + [1] * 2 + [2] * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4.5, 3.0, 6.5, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "self.target_auto_mus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "self.target_auto_diag_cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "data": {
                    "value": "[0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "[0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_88": {
                "variable": {
                    "value": "diag_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.guide.scale_tril * self.guide.scale[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "L.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_88": {
                "variable": {
                    "value": "diag_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "guide.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/autoguide/test_mean_field_entropy.py": {
        "torch": {
            "ones_16": {
                "*size": {
                    "value": "batch_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "batch_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_34": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/mcmc/test_adaptation.py": {
        "torch": {
            "randn_48": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[0] * shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[0] * shape[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_49": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ],
                        [
                            "cov.diag().diag()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cov.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_52": {
                "variable": {
                    "value": "z_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ],
                        [
                            "cov.diag().diag()",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_55": {
                "variable": {
                    "value": "g_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "precision_matrix": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ],
                        [
                            "cov.diag().diag()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[0] * shape[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[0] * shape[1]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/infer/mcmc/test_hmc.py": {
        "torch": {
            "randn_190": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_191": {
                "variable": {
                    "value": "true_coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "dim + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.6, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "true_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "variable": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_335": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sample['z'] for sample in posterior]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "self.loc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_40": {
                "variable": {
                    "value": "self.lambda_prec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "self.num_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_317": {
                "input": {
                    "value": "potential_energy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_336": {
                "input": {
                    "value": "posterior",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack([sample['z'] for sample in posterior])",
                            "Call"
                        ]
                    ]
                }
            },
            "std_337": {
                "input": {
                    "value": "posterior",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack([sample['z'] for sample in posterior])",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_346": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_348": {
                "input": {
                    "value": "potential_energy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "fixture.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_154": {
                "input": {
                    "value": "torch.ones(fixture.dim) * expected_precs[i - 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "sum_314": {
                "input": {
                    "value": "((params['z'] - true_mean) / true_std) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_357": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_196": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_154": {
                "*size": {
                    "value": "fixture.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/mcmc/test_mcmc_api.py": {
        "torch": {
            "tensor_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "samples[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_371": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/mcmc/test_mcmc_util.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2, 0.3, 0.4, 0.8, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_108": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_129": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/mcmc/test_nuts.py": {
        "torch": {
            "randn_152": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_153": {
                "variable": {
                    "value": "true_coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "dim + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "true_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.6, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "true_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "true_beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "true_cluster_means",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 5.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "true_mix_proportions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.3, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.7, 0.4], [0.6, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "total_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1000, 600], [400, 800]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_452": {
                "variable": {
                    "value": "true_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_474": {
                "variable": {
                    "value": "w_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.5, 0.5], [0.5, 1.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_475": {
                "variable": {
                    "value": "xy_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0, 1.0], [1.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_476": {
                "variable": {
                    "value": "z_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_477": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_519": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_557": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.6, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "coefs_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_373": {
                "variable": {
                    "value": "transition_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_374": {
                "variable": {
                    "value": "emissions_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.Tensor().dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "wxyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w, x, y, z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "wyxz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w, y, x, z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_381": {
                "tensors": {
                    "value": "obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[dist.Normal(emissions_loc[state], emissions_scale).sample()]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_130": {
                "*size": {
                    "value": "fixture.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "input": {
                    "value": "torch.ones(fixture.dim) * expected_precs[i - 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_158": {
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_278": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_335": {
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_400": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_472": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_515": {
                "*size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_131": {
                "*size": {
                    "value": "fixture.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_281": {
                "start": {
                    "value": "float(K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_337": {
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_339": {
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_339": {
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_342": {
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_342": {
                "*size": {
                    "value": "dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "Tensor_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/mcmc/test_valid_models.py": {
        "torch": {
            "tensor_403": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_423": {
                "variable": {
                    "value": "deser_potential_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_449": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([10.0, 0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([1.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_485": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[7.0, 7.0, 7.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 3.0, 3.0, 3.0, 5.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 3.0, 3.0, 3.0, 5.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_421": {
                "obj": {
                    "value": "potential_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_169": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "data": {
                    "value": "-15.2704",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "data": {
                    "value": "0.16196",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_419": {
                "data": {
                    "value": "[0.2, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_457": {
                "data": {
                    "value": "[[0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_470": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_471": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_472": {
                "data": {
                    "value": "[True]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_473": {
                "data": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_474": {
                "data": {
                    "value": "[False, True, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "data": {
                    "value": "-1.3434",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "data": {
                    "value": "-1.4189",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "data": {
                    "value": "-4.1813",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "data": {
                    "value": "-3.5237",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "data": {
                    "value": "-3.7091",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "-3.9699",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "data": {
                    "value": "-5.3357",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "data": {
                    "value": "-0.5108",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "data": {
                    "value": "-0.9808",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "data": {
                    "value": "-2.3671",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "data": {
                    "value": "-1.15",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "data": {
                    "value": "-1.46",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "data": {
                    "value": "-2.1998",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "data": {
                    "value": "-1.5478",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "data": {
                    "value": "-1.4189",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "data": {
                    "value": "-4.3857",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "data": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "data": {
                    "value": "[[1.0], [-1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "data": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "data": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "data": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_413": {
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_90": {
                "start": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_301": {
                "input": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.Normal(0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "pyro.sample('n', dist.Normal(mean, 1.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_123": {
                "*size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_127": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_conjugate.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_105": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[concentration1, concentration0]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_106": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(reparam_model, reparam_guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(reparam_model, reparam_guide, data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[concentration1, concentration0]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_116": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_120": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_151": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[concentration1, concentration0]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_152": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(reparam_model, reparam_guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(reparam_model, reparam_guide, data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[concentration1, concentration0]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_160": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_160": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_161": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_170": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_174": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (num_steps, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "variable": {
                    "value": "concentration1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "concentration0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_208": {
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "elbo.differentiable_loss(reparam_model, reparam_guide, data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[concentration1, concentration0]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ],
                        [
                            "[trans_mat, obs_mat]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_discrete_cosine.py": {
        "torch": {
            "empty_47": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_48": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_129": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_130": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "[mean, std, corr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_68": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_69": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_haar.py": {
        "torch": {
            "empty_49": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5, 6)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "empty_50": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5, 6)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "empty_129": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5, 6)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "empty_130": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5, 6)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "randn_155": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5, 6)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "randn_179": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5, 6)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "[mean, std, corr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_70": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_71": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5, 6)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "tests/infer/reparam/test_hmm.py": {
        "torch": {
            "rand_23": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_25": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_25": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_32": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_43": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_74": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_76": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_109": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_115": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "duration",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_151": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "base_batch_shape + (duration, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_157": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "base_batch_shape + (duration, hidden_dim, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_177": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "duration",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_205": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "duration",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_207": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "duration",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_241": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (1, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_245": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (1, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_257": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "duration",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "obs_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_274": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, hidden_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_280": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (duration, hidden_dim, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_47": {
                "*size": {
                    "value": "batch_shape + (duration, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_48": {
                "*size": {
                    "value": "batch_shape + (duration, obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_loc_scale.py": {
        "torch": {
            "empty_36": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_37": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_80": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_81": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_29": {
                "tensors": {
                    "value": "[m1, m2, m3, m4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_70": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_71": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_neutra.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_27": {
                "input": {
                    "value": "y / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_projected_normal.py": {
        "torch": {
            "randn_29": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_55": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "[m1.reshape(-1), m2.reshape(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_47": {
                "variable": {
                    "value": "expected_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[concentration]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_48": {
                "variable": {
                    "value": "actual_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[concentration]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_softmax.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "temperature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(temperature)",
                            "Call"
                        ],
                        [
                            "torch.tensor(temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_31": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "temperature",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(temperature)",
                            "Call"
                        ],
                        [
                            "torch.tensor(temperature)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_59": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "[m1.reshape(-1), m2.reshape(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_49": {
                "variable": {
                    "value": "expected_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[logits]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_50": {
                "variable": {
                    "value": "actual_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[logits]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_split.py": {
        "torch": {
            "empty_37": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ],
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_38": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ],
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_48": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trace.log_prob_sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_71": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_log_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trace.log_prob_sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_95": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ],
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_96": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ],
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tests/infer/reparam/test_stable.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-4.0, -1.0, 0.0, 1.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_36": {
                "variable": {
                    "value": "stability",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_37": {
                "variable": {
                    "value": "skew",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_41": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_42": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_77": {
                "variable": {
                    "value": "stability",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_78": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_79": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "[x.mean(0, keepdim=True), (x - points).abs().mean(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_66": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[stability, skew, scale, loc]",
                            "List"
                        ],
                        [
                            "[stability, scale, loc]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_67": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[stability, skew, scale, loc]",
                            "List"
                        ],
                        [
                            "[stability, scale, loc]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_99": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[stability, skew, scale, loc]",
                            "List"
                        ],
                        [
                            "[stability, scale, loc]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_100": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "List",
                    "possible_values": [
                        [
                            "[stability, skew, scale, loc]",
                            "List"
                        ],
                        [
                            "[stability, scale, loc]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_strategies.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_256": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_258": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_292": {
                "*size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_294": {
                "*size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_structured.py": {
        "torch": {
            "exp_20": {
                "input": {
                    "value": "y / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_studentt.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-4.0, -1.0, 0.0, 1.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_28": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_29": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_30": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_73": {
                "variable": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_74": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_75": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "[x.mean(0, keepdim=True), (x - points).abs().mean(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_50": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[df, loc, scale]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_51": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[df, loc, scale]",
                            "List"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/reparam/test_transform.py": {
        "torch": {
            "empty_36": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ],
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_37": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ],
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_69": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ],
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_70": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ],
                        [
                            "batch_shape + event_shape",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_29": {
                "tensors": {
                    "value": "[m1, m2, m3, m4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_41": {
                "input": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty(shape).uniform_(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.empty(shape).uniform_(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_41": {
                "input": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty(shape).uniform_(0.5, 1.5)",
                            "Call"
                        ],
                        [
                            "torch.empty(shape).uniform_(0.5, 1.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_74": {
                "input": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty(shape).uniform_(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.empty(shape).uniform_(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty(shape).uniform_(0.5, 1.5)",
                            "Call"
                        ],
                        [
                            "torch.empty(shape).uniform_(0.5, 1.5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/infer/reparam/test_unit_jacobian.py": {
        "torch": {
            "empty_32": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_33": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_62": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_63": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "[mean, std, corr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_54": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_55": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_m.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_43": {
                "n": {
                    "value": "shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_69": {
                "n": {
                    "value": "shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_abstract_infer.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "kcal",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.49, 0.47, 0.56, 0.89, 0.92, 0.8, 0.46, 0.71, 0.68, 0.97, 0.84, 0.62, 0.54, 0.49, 0.48, 0.55, 0.71]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "-8.3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "1.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_autoguide.py": {
        "torch": {
            "tensor_589": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 10.0, 11.0, 12.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_1005": {
                "variable": {
                    "value": "predictive_deser",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_1082": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "full_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_1121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "full_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_1218": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_1396": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_1464": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_1537": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_1553": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_cond.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "A": {
                    "value": "g_cond.info_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_1554": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_cond.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_1554": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_1554": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1606": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "12.345",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "dependency_z6_z3",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_320": {
                "variable": {
                    "value": "self.x_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_484": {
                "variable": {
                    "value": "guide_deser",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_module_1001": {
                "variable": {
                    "value": "traced_predictive",
                    "type": "Variable",
                    "possible_values": []
                },
                "mod": {
                    "value": "predictive",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Predictive(model, guide=guide, num_samples=10)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "{'call': (x,)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "save_1003": {
                "obj": {
                    "value": "traced_predictive",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.jit.trace_module(predictive, {'call': (x,)})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_140": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_412": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_module_476": {
                "variable": {
                    "value": "traced_guide",
                    "type": "Variable",
                    "possible_values": []
                },
                "mod": {
                    "value": "guide",
                    "type": "Call",
                    "possible_values": [
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "guide.laplace_approximation()",
                            "Call"
                        ],
                        [
                            "auto_class(serialization_model)",
                            "Call"
                        ],
                        [
                            "guide.laplace_approximation()",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "guide.laplace_approximation()",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoDiagonalNormal(model)",
                            "Call"
                        ],
                        [
                            "AutoDiagonalNormal(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_scale=init_scale)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "guide.laplace_approximation()",
                            "Call"
                        ],
                        [
                            "nested_auto_guide_callable(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "(guide1, guide2)",
                            "Tuple"
                        ],
                        [
                            "AutoGuideList(model, create_plates=create_plates)",
                            "Call"
                        ],
                        [
                            "auto_class(model, create_plates=create_plates)",
                            "Call"
                        ],
                        [
                            "auto_class(model, create_plates=create_plates)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "Guide(model)",
                            "Call"
                        ],
                        [
                            "Guide(model)",
                            "Call"
                        ],
                        [
                            "Guide(model)",
                            "Call"
                        ],
                        [
                            "AutoNormal(model1)",
                            "Call"
                        ],
                        [
                            "AutoNormal(model2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "{'call': ()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_480": {
                "obj": {
                    "value": "traced_guide",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.jit.trace_module(guide, {'call': ()}, check_trace=False)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_492": {
                "variable": {
                    "value": "guide_deser",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_550": {
                "obj": {
                    "value": "quantiles[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_733": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_801": {
                "variable": {
                    "value": "self.x_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_821": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_822": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_830": {
                "variable": {
                    "value": "self.x_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_913": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_986": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_1083": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1158": {
                "tensors": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None] * num_time_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_1174": {
                "start": {
                    "value": "full_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_1184": {
                "variable": {
                    "value": "subsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "end",
                            "Name"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(full_size, beg + batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_1426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_304": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_414": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_416": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_490": {
                "obj": {
                    "value": "guide",
                    "type": "Call",
                    "possible_values": [
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "guide.laplace_approximation()",
                            "Call"
                        ],
                        [
                            "auto_class(serialization_model)",
                            "Call"
                        ],
                        [
                            "guide.laplace_approximation()",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "guide.laplace_approximation()",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoGuideList(model)",
                            "Call"
                        ],
                        [
                            "AutoDiagonalNormal(model)",
                            "Call"
                        ],
                        [
                            "AutoDiagonalNormal(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_scale=init_scale)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "guide.laplace_approximation()",
                            "Call"
                        ],
                        [
                            "nested_auto_guide_callable(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "(guide1, guide2)",
                            "Tuple"
                        ],
                        [
                            "AutoGuideList(model, create_plates=create_plates)",
                            "Call"
                        ],
                        [
                            "auto_class(model, create_plates=create_plates)",
                            "Call"
                        ],
                        [
                            "auto_class(model, create_plates=create_plates)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "auto_class(model)",
                            "Call"
                        ],
                        [
                            "auto_class(model, init_loc_fn=init_loc_fn)",
                            "Call"
                        ],
                        [
                            "Guide(model)",
                            "Call"
                        ],
                        [
                            "Guide(model)",
                            "Call"
                        ],
                        [
                            "Guide(model)",
                            "Call"
                        ],
                        [
                            "AutoNormal(model1)",
                            "Call"
                        ],
                        [
                            "AutoNormal(model2)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_654": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_684": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1400": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1401": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1402": {
                "data": {
                    "value": "[[4, -1, -1, -1], [-1, 1, 0, 0], [-1, 0, 1, 0], [-1, 0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_1466": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([0.0, 1.0, 10.0, 11.0, 12.0])",
                            "Call"
                        ],
                        [
                            "model([None] * num_time_steps, torch.arange(full_size), full_size)",
                            "Call"
                        ],
                        [
                            "torch.randn(10, 10)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(3)",
                            "Call"
                        ],
                        [
                            "torch.randn(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1468": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1469": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1470": {
                "data": {
                    "value": "[[[2, -1], [-1, 1]]] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1539": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_1540": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1541": {
                "data": {
                    "value": "[[3, -1, -1, 0, 0], [-1, 2, 0, -1, 0], [-1, 0, 2, 0, -1], [0, -1, 0, 1, 0], [0, 0, -1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_237": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_238": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_627": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_627": {
                "n": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_651": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_651": {
                "n": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_681": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_681": {
                "n": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_706": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_731": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_731": {
                "n": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_764": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_764": {
                "n": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_801": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_802": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_830": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_831": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_1037": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1066": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1068": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1104": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1106": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1252": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1288": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1325": {
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1348": {
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1593": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1598": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_167": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_236": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_592": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_1037": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1041": {
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_133": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_234": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1035": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_240": {
                "start": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_compute_downstream_costs.py": {
        "torch": {
            "tensor_107": {
                "variable": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.33)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "p2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.7)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "variable": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.33)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_393": {
                "variable": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.7)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_394": {
                "variable": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.43)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_483": {
                "variable": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.4 - include_obs * 0.2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_484": {
                "variable": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.33 - include_obs * 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_596": {
                "variable": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.4 - include_obs * 0.2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_597": {
                "variable": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.33 - include_obs * 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_699": {
                "variable": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.4 - include_obs * 0.2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_700": {
                "variable": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.exp(-0.33 - include_obs * 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_169": {
                "*size": {
                    "value": "d2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_493": {
                "*size": {
                    "value": "c_i.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_607": {
                "*size": {
                    "value": "b_i.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_712": {
                "*size": {
                    "value": "c2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_csis.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "5 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "2 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "2 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_discrete.py": {
        "torch": {
            "tensor_106": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1.0, -1.0, 0.0], [-1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_185": {
                "variable": {
                    "value": "actual_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_186": {
                "variable": {
                    "value": "expected_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_248": {
                "variable": {
                    "value": "actual_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_249": {
                "variable": {
                    "value": "expected_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True, False, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 1.0, 1.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_403": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_335": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_370": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[0.25, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[[0.25, 0.75], [0.75, 0.25]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "[[0.25, 0.75], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "[0.25, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('z', dist.Bernoulli(p), obs=z)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p), obs=z)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_178": {
                "data": {
                    "value": "z2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('z2', dist.Categorical(q[z1]))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z2', dist.Categorical(p[z1]), obs=z2)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z2', dist.Categorical(p), obs=z2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_240": {
                "data": {
                    "value": "[z20, z21]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "data": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('z', dist.Bernoulli(p), obs=z)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p), obs=z)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_334": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grad_397": {
                "outputs": {
                    "value": "expected_logprob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-elbo.differentiable_loss(model, guide, num_particles=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_398": {
                "outputs": {
                    "value": "actual_logprob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_mean_prob(posterior_trace, particle_dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_406": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_86": {
                "*size": {
                    "value": "plate_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_elbo_mapdata.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "lam0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "loc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "lam",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[6.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "sum_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "n_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(len(data))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "sig_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sig_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q', analytic_log_sig_n.detach().clone() - torch.tensor([-0.18, 0.23]))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_120": {
                "variable": {
                    "value": "loc_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(analytic_loc_n - pyro.param('loc_q'), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_121": {
                "variable": {
                    "value": "log_sig_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(analytic_log_sig_n - pyro.param('log_sig_q'), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_59": {
                "input": {
                    "value": "analytic_lam_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lam0 + n_data.expand_as(lam) * lam",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_120": {
                "input": {
                    "value": "analytic_loc_n - pyro.param('loc_q')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_122": {
                "input": {
                    "value": "analytic_log_sig_n - pyro.param('log_sig_q')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[-0.18, 0.23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "[-0.18, 0.23]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_69": {
                "input": {
                    "value": "lam0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([0.1, 0.1])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_75": {
                "input": {
                    "value": "lam",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([6.0, 4.0])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_89": {
                "input": {
                    "value": "lam",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([6.0, 4.0])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_82": {
                "input": {
                    "value": "lam",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([6.0, 4.0])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_enum.py": {
        "torch": {
            "randn_143": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_201": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "float(data_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p, 1 - p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_236": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "float(data_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 9.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 9.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_285": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ],
                        [
                            "-(prior + likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, exact_guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[pyro.param(name).unconstrained() for name in param_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_639": {
                "variable": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_640": {
                "variable": {
                    "value": "p2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.3, 0.3, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_641": {
                "variable": {
                    "value": "p3",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_683": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q1, q2, q3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1306": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi1",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1307": {
                "variable": {
                    "value": "q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi2",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_1311": {
                "variable": {
                    "value": "(expected_grad_q1, expected_grad_q2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "elbo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=max_plate_nesting, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Bernoulli(q2 + 0.1), dist.Bernoulli(0.65))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Bernoulli(0.1), dist.Bernoulli(0.1))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(q3))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Normal(q2 + 0.1, 1.0), dist.Normal(q3 + 0.55, 1.0))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Normal(0.1, 1.0), dist.Normal(q3, 1.0))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([ed]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + N_b * qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_b * (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.67))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.52))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.47))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.32))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.85))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.6))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(d_offset))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "Trace_ELBO(vectorize_particles=True, num_particles=num_samples).loss(model, guide)",
                            "Call"
                        ],
                        [
                            "infer.TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q1, q2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1386": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi1",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1387": {
                "variable": {
                    "value": "q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi2",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1388": {
                "variable": {
                    "value": "q3",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi3",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1571": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_1572": {
                "variable": {
                    "value": "init_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1648": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_1649": {
                "variable": {
                    "value": "init_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_1806": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss.item()",
                            "Call"
                        ],
                        [
                            "loss.item()",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "loss.item()",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "loss.item()",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide) / num_particles",
                            "BinOp"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide) / num_particles",
                            "BinOp"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide) / num_particles",
                            "BinOp"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide) / num_particles",
                            "BinOp"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide) / num_particles",
                            "BinOp"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate_iplate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_plate_plate, guide_plate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate_plate, guide_iplate)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[pyro.param(name).unconstrained() for name in names]",
                            "ListComp"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_1807": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss_and_grads(model, guide, data)",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide_iplate)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model_iplate_iplate, guide_iplate)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[pyro.param(name).unconstrained() for name in names]",
                            "ListComp"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2221": {
                "variable": {
                    "value": "outer_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2222": {
                "variable": {
                    "value": "inner_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 1.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2297": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2369": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2503": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2533": {
                "variable": {
                    "value": "b_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2534": {
                "variable": {
                    "value": "d_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2592": {
                "variable": {
                    "value": "b_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2593": {
                "variable": {
                    "value": "c_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2645": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2730": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2759": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2922": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3077": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3124": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3269": {
                "variable": {
                    "value": "init_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3445": {
                "variable": {
                    "value": "qa",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3446": {
                "variable": {
                    "value": "qb",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3447": {
                "variable": {
                    "value": "qc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_3465": {
                "variable": {
                    "value": "(expected_grad_qa, expected_grad_qb, expected_grad_qc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "elbo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=max_plate_nesting, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Bernoulli(q2 + 0.1), dist.Bernoulli(0.65))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Bernoulli(0.1), dist.Bernoulli(0.1))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(q3))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Normal(q2 + 0.1, 1.0), dist.Normal(q3 + 0.55, 1.0))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Normal(0.1, 1.0), dist.Normal(q3, 1.0))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([ed]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + N_b * qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_b * (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.67))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.52))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.47))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.32))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.85))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.6))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(d_offset))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "Trace_ELBO(vectorize_particles=True, num_particles=num_samples).loss(model, guide)",
                            "Call"
                        ],
                        [
                            "infer.TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[qa, qb, qc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3555": {
                "variable": {
                    "value": "qa",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3556": {
                "variable": {
                    "value": "qb",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3557": {
                "variable": {
                    "value": "qc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3558": {
                "variable": {
                    "value": "qd",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pi_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_3588": {
                "variable": {
                    "value": "(expected_grad_qa, expected_grad_qb, expected_grad_qc, expected_grad_qd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "elbo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=max_plate_nesting, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Bernoulli(q2 + 0.1), dist.Bernoulli(0.65))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Bernoulli(0.1), dist.Bernoulli(0.1))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(q3))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Normal(q2 + 0.1, 1.0), dist.Normal(q3 + 0.55, 1.0))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Normal(0.1, 1.0), dist.Normal(q3, 1.0))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([ed]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + N_b * qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_b * (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.67))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.52))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.47))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.32))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.85))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.6))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(d_offset))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "Trace_ELBO(vectorize_particles=True, num_particles=num_samples).loss(model, guide)",
                            "Call"
                        ],
                        [
                            "infer.TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[qa, qb, qc, qd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3667": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3686": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0], [1.0, 1.0], [2.0, 3.0], [1.0, 11.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3737": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "prior",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.Normal(0.0, 10.0).log_prob(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(prior)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_3738": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.1, 0.2, 0.9, 1.0, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_3841": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Name"
                        ],
                        [
                            "sizes",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_4037": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_137": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.probs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.5, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probs, 1 - probs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_1397": {
                "variable": {
                    "value": "(expected_grad_q1, expected_grad_q2, expected_grad_q3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "elbo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=max_plate_nesting, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Bernoulli(q2 + 0.1), dist.Bernoulli(0.65))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Bernoulli(0.1), dist.Bernoulli(0.1))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(q3))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Normal(q2 + 0.1, 1.0), dist.Normal(q3 + 0.55, 1.0))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Normal(0.1, 1.0), dist.Normal(q3, 1.0))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([ed]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + N_b * qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_b * (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.67))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.52))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.47))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.32))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.85))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.6))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(d_offset))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "Trace_ELBO(vectorize_particles=True, num_particles=num_samples).loss(model, guide)",
                            "Call"
                        ],
                        [
                            "infer.TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q1, q2, q3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_1399": {
                "variable": {
                    "value": "(expected_grad_q1, expected_grad_q3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "elbo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=max_plate_nesting, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(num_particles=num_particles, vectorize_particles=True, strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1, enumerate2, enumerate3]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Bernoulli(q2 + 0.1), dist.Bernoulli(0.65))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Bernoulli(0.1), dist.Bernoulli(0.1))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(q1), dist.Bernoulli(q3))",
                            "Call"
                        ],
                        [
                            "elbo + q1 * kl_divergence(dist.Normal(q2 + 0.1, 1.0), dist.Normal(q3 + 0.55, 1.0))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - q1) * kl_divergence(dist.Normal(0.1, 1.0), dist.Normal(q3, 1.0))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([ed]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=any([enumerate1]))",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + N_b * qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_b * (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.67))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.52))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.47))",
                            "BinOp"
                        ],
                        [
                            "elbo + N_c * N_b * (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.32))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=True)",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Bernoulli(qa), dist.Bernoulli(0.33))",
                            "Call"
                        ],
                        [
                            "elbo + qa * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * kl_divergence(dist.Bernoulli(qb), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.85))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * qb * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.6))",
                            "BinOp"
                        ],
                        [
                            "elbo + qa * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.75))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qa) * (1.0 - qb) * kl_divergence(dist.Bernoulli(qc), dist.Bernoulli(0.5))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * qc * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(c_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + qb * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(b_factor + d_offset))",
                            "BinOp"
                        ],
                        [
                            "elbo + (1.0 - qb) * (1.0 - qc) * kl_divergence(dist.Bernoulli(qd), dist.Bernoulli(d_offset))",
                            "BinOp"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=2, strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(strict_enumeration_warning=False)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=1)",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0, num_particles=num_particles, vectorize_particles=vectorize_particles)",
                            "Call"
                        ],
                        [
                            "Trace_ELBO(vectorize_particles=True, num_particles=num_samples).loss(model, guide)",
                            "Call"
                        ],
                        [
                            "infer.TraceEnum_ELBO(max_plate_nesting=2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q1, q3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1715": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "expected_grads[num_steps][name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_3306": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Name"
                        ],
                        [
                            "sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_3343": {
                "variable": {
                    "value": "uniform",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_3377": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sizes",
                            "Name"
                        ],
                        [
                            "sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_3742": {
                "variable": {
                    "value": "locs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, 0.0, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3822": {
                "variable": {
                    "value": "transition_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3823": {
                "variable": {
                    "value": "emission_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3824": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "[0.3]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_345": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_484": {
                "data": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_505": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_562": {
                "data": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_591": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_642": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_643": {
                "data": {
                    "value": "[0.4, 0.3, 0.3]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_644": {
                "data": {
                    "value": "[0.4, 0.3, 0.2, 0.1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_727": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_757": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_810": {
                "data": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_838": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_874": {
                "data": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_902": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_953": {
                "data": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_989": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1041": {
                "data": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_1082": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1122": {
                "data": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_1165": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1205": {
                "data": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_1248": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1501": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1502": {
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_1526": {
                "outputs": {
                    "value": "kl1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_1539": {
                "outputs": {
                    "value": "kl2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Gamma(a, 1.0), dist.Gamma(0.5, 1.0))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[a]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1606": {
                "data": {
                    "value": "[-num_steps, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1607": {
                "data": {
                    "value": "-num_steps",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_1608": {
                "data": {
                    "value": "[[0.5, -0.5]] * num_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1825": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1828": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1832": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1836": {
                "data": {
                    "value": "[0.3, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1870": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1873": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1877": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1882": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1921": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1924": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1928": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1933": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1980": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1983": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1987": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1992": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2050": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2053": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2057": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2062": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2128": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2131": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2135": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2140": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2217": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2218": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2219": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2220": {
                "data": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2282": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2285": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2289": {
                "data": {
                    "value": "[[[0.4, 0.5, 0.1], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2295": {
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2354": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2357": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2361": {
                "data": {
                    "value": "[[[0.4, 0.5, 0.1], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2367": {
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2416": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2420": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2425": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2430": {
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.3, 0.7], [0.2, 0.8]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2435": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2439": {
                "data": {
                    "value": "[0.35, 0.64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2443": {
                "data": {
                    "value": "[[0.0, 1.0], [1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2521": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2524": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2527": {
                "data": {
                    "value": "[0.75, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2530": {
                "data": {
                    "value": "[[0.4, 0.6], [0.3, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2581": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2584": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2589": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2639": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2642": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2688": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2691": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2696": {
                "data": {
                    "value": "[[0.4, 0.6], [0.3, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2748": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2751": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2756": {
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.2, 0.8], [0.1, 0.9]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2814": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2817": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2822": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2827": {
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.3, 0.7], [0.2, 0.8]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2954": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2957": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2962": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2967": {
                "data": {
                    "value": "[[0.3, 0.7], [0.2, 0.8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2972": {
                "data": {
                    "value": "[[0.4, 0.6], [0.3, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3109": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3112": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3116": {
                "data": {
                    "value": "[[[0.4, 0.5, 0.1], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3122": {
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3233": {
                "data": {
                    "value": "[0.25, 0.75]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3664": {
                "data": {
                    "value": "gate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('gate')",
                            "Call"
                        ],
                        [
                            "pyro.param('gate')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_3665": {
                "data": {
                    "value": "rate",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('rate')",
                            "Call"
                        ],
                        [
                            "pyro.param('rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_3683": {
                "data": {
                    "value": "[[0.0, 0.0], [0.0, 1.0], [0.0, 10.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3684": {
                "data": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('scale', torch.tensor(1.0, requires_grad=True))",
                            "Call"
                        ],
                        [
                            "pyro.param('scale', torch.tensor([1.0], requires_grad=True))",
                            "Call"
                        ],
                        [
                            "pyro.param('scale')",
                            "Call"
                        ],
                        [
                            "pyro.param('scale', torch.tensor(1.0), constraint=constraints.positive)",
                            "Call"
                        ],
                        [
                            "pyro.param('obs_scale', torch.tensor(1.0), constraint=constraints.positive)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_3685": {
                "data": {
                    "value": "[0.0, -1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_3772": {
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('probs')",
                            "Call"
                        ],
                        [
                            "pyro.param('probs', torch.tensor([0.1, 0.2, 0.3, 0.4]))",
                            "Call"
                        ],
                        [
                            "pyro.param('probs')",
                            "Call"
                        ],
                        [
                            "pyro.param('probs', torch.tensor([[0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1]]))",
                            "Call"
                        ],
                        [
                            "pyro.param('probs', torch.ones(n, 1) * 0.6)",
                            "Call"
                        ],
                        [
                            "torch.cat([probs, 1 - probs], dim=1)",
                            "Call"
                        ],
                        [
                            "init_probs if x is None else transition_probs[x]",
                            "IfExp"
                        ],
                        [
                            "init_probs if x is None else transition_probs[x]",
                            "IfExp"
                        ],
                        [
                            "init_probs if x is None else transition_probs[x]",
                            "IfExp"
                        ],
                        [
                            "init_probs if x is None else transition_probs[x]",
                            "IfExp"
                        ],
                        [
                            "init_probs if x is None else transition_probs[x]",
                            "IfExp"
                        ],
                        [
                            "marginals['x'].probs",
                            "Attribute"
                        ],
                        [
                            "pyro.param('probs')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_3868": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3922": {
                "variable": {
                    "value": "p_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3943": {
                "variable": {
                    "value": "p_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.9, 0.1], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_4016": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_4019": {
                "data": {
                    "value": "[0.6, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_4023": {
                "data": {
                    "value": "[[[0.4, 0.5, 0.1], [0.3, 0.5, 0.2]], [[0.3, 0.4, 0.3], [0.4, 0.4, 0.2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_4030": {
                "data": {
                    "value": "[0.33, 0.67]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_4034": {
                "data": {
                    "value": "[0.8, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[0.1, 0.2, 0.3, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "[0.05, 0.15]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "[[0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_138": {
                "tensors": {
                    "value": "[(-self.probs).log1p(), self.probs.log()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "[0.0, 0.5, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "data": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_327": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ],
                        [
                            "-(prior + likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, exact_guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_328": {
                "outputs": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad(loss, [x], create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_439": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_515": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ],
                        [
                            "-(prior + likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, exact_guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_601": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ],
                        [
                            "-(prior + likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, exact_guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_767": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ],
                        [
                            "-(prior + likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, exact_guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1293": {
                "data": {
                    "value": "pi1",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1294": {
                "data": {
                    "value": "pi2",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1366": {
                "data": {
                    "value": "pi1",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1367": {
                "data": {
                    "value": "pi2",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1452": {
                "data": {
                    "value": "pi1",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1453": {
                "data": {
                    "value": "pi2",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1577": {
                "data": {
                    "value": "[[0.9, 0.1], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1580": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1582": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1605": {
                "data": {
                    "value": "[[0.2, -0.2], [-0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1654": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1659": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1672": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1738": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1743": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1766": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1771": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1787": {
                "data": {
                    "value": "[0.75, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3275": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3280": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3293": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3346": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3358": {
                "data": {
                    "value": "[[0.75, 0.25], [0.25, 0.75]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3363": {
                "data": {
                    "value": "[[[0.75, 0.25], [0.45, 0.55]], [[0.55, 0.45], [0.25, 0.75]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3426": {
                "data": {
                    "value": "pi_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3427": {
                "data": {
                    "value": "pi_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3428": {
                "data": {
                    "value": "pi_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3535": {
                "data": {
                    "value": "pi_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3536": {
                "data": {
                    "value": "pi_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3537": {
                "data": {
                    "value": "pi_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3538": {
                "data": {
                    "value": "pi_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3653": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_3772": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ],
                        [
                            "-(prior + likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, exact_guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[pyro.param('probs')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3877": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3878": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3879": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_3931": {
                "*size": {
                    "value": "num_particles",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "1 if enumerate1 else 10000",
                            "IfExp"
                        ],
                        [
                            "1 if enumerate1 else 10000",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2 * 300 * 300",
                            "BinOp"
                        ],
                        [
                            "num_particles // n",
                            "BinOp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 10000",
                            "IfExp"
                        ],
                        [
                            "100 * 10 ** sum((1 for e in [enumerate1, enumerate2, enumerate3] if not e))",
                            "BinOp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2]) else 10000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2]) else 20000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3, enumerate4]) else 100000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 100000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 50000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 150000",
                            "IfExp"
                        ],
                        [
                            "1 if enumerate1 else 20000",
                            "IfExp"
                        ],
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "40000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_3954": {
                "*size": {
                    "value": "num_particles",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "1 if enumerate1 else 10000",
                            "IfExp"
                        ],
                        [
                            "1 if enumerate1 else 10000",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2 * 300 * 300",
                            "BinOp"
                        ],
                        [
                            "num_particles // n",
                            "BinOp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 10000",
                            "IfExp"
                        ],
                        [
                            "100 * 10 ** sum((1 for e in [enumerate1, enumerate2, enumerate3] if not e))",
                            "BinOp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2]) else 10000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2]) else 20000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3, enumerate4]) else 100000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 100000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 50000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 150000",
                            "IfExp"
                        ],
                        [
                            "1 if enumerate1 else 20000",
                            "IfExp"
                        ],
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "40000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_3959": {
                "*size": {
                    "value": "num_particles",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "1 if enumerate1 else 10000",
                            "IfExp"
                        ],
                        [
                            "1 if enumerate1 else 10000",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2 * 300 * 300",
                            "BinOp"
                        ],
                        [
                            "num_particles // n",
                            "BinOp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 10000",
                            "IfExp"
                        ],
                        [
                            "100 * 10 ** sum((1 for e in [enumerate1, enumerate2, enumerate3] if not e))",
                            "BinOp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2]) else 10000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2]) else 20000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3, enumerate4]) else 100000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 100000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 50000",
                            "IfExp"
                        ],
                        [
                            "1 if all([enumerate1, enumerate2, enumerate3]) else 150000",
                            "IfExp"
                        ],
                        [
                            "1 if enumerate1 else 20000",
                            "IfExp"
                        ],
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "40000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_225": {
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ],
                        [
                            "len(batch)",
                            "Call"
                        ],
                        [
                            "[num_samples1, num_samples2]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_383": {
                "outputs": {
                    "value": "kl",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kl_divergence(dist.Bernoulli(q), dist.Bernoulli(0.25))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Normal(q, 1.0), dist.Normal(0.0, 1.0))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.2, 0.4]))",
                            "Call"
                        ],
                        [
                            "sum((kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p)) for p in [0.1, 0.2, 0.3]))",
                            "Call"
                        ],
                        [
                            "kl_divergence(dist.Categorical(q1), dist.Categorical(p1)) + kl_divergence(dist.Categorical(q2), dist.Categorical(p2)) + kl_divergence(dist.Categorical(q3), dist.Categorical(p3))",
                            "BinOp"
                        ],
                        [
                            "sum((kl_divergence(dist.Normal(q, 1.0), dist.Normal(p, 1.0)) for p in [0.25, 0.5, 1.0]))",
                            "Call"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim + inner_dim + outer_dim * inner_dim) * kl_node",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ],
                        [
                            "(1 + outer_dim * (1 + inner_dim)) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1360": {
                "data": {
                    "value": "pi3",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1445": {
                "data": {
                    "value": "pi3",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1446": {
                "data": {
                    "value": "0.5 * (pi1 + pi2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_1448": {
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('z_{}'.format(i), dist.Bernoulli(p))",
                            "Call"
                        ],
                        [
                            "z.long()",
                            "Call"
                        ],
                        [
                            "pyro.sample('z_{}'.format(i), dist.Bernoulli(p))",
                            "Call"
                        ],
                        [
                            "z.long()",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.OneHotCategorical(p).expand_by([n]))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.OneHotCategorical(probs))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Normal(q3, 1.0).expand_by([num_particles]))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Normal(q2, 1.0).expand_by([num_particles]))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(0.4))",
                            "Call"
                        ],
                        [
                            "zs",
                            "Name"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p_z[x]), obs=data)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p_z[x, y]), obs=data)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(0.4))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_1456": {
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('z_{}'.format(i), dist.Bernoulli(p))",
                            "Call"
                        ],
                        [
                            "z.long()",
                            "Call"
                        ],
                        [
                            "pyro.sample('z_{}'.format(i), dist.Bernoulli(p))",
                            "Call"
                        ],
                        [
                            "z.long()",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.OneHotCategorical(p).expand_by([n]))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.OneHotCategorical(probs))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Normal(q3, 1.0).expand_by([num_particles]))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Normal(q2, 1.0).expand_by([num_particles]))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(0.4))",
                            "Call"
                        ],
                        [
                            "zs",
                            "Name"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p_z[x]), obs=data)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p_z[x, y]), obs=data)",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(0.4))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_1595": {
                "*size": {
                    "value": "num_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1732": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1761": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1774": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1846": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1853": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1895": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1904": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2030": {
                "data": {
                    "value": "[0.3, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2108": {
                "data": {
                    "value": "[0.3, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2198": {
                "data": {
                    "value": "[0.3, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3228": {
                "data": {
                    "value": "[-1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_3902": {
                "start": {
                    "value": "6.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_379": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ],
                        [
                            "-(prior + likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, exact_guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_435": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss_and_grads(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide, data)",
                            "Call"
                        ],
                        [
                            "-(prior + likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.differentiable_loss(model, exact_guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ],
                        [
                            "elbo.loss(model, guide)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1946": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1955": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_3923": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3944": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_3945": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_4082": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i + 2",
                            "BinOp"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_3835": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_3889": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i + 2",
                            "BinOp"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_3891": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i + 2",
                            "BinOp"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_1519": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_3896": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i + 2",
                            "BinOp"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_4085": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i + 2",
                            "BinOp"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.Bernoulli(p)",
                            "Call"
                        ],
                        [
                            "dist.Bernoulli(pyro.param('q'))",
                            "Call"
                        ],
                        [
                            "pyro.sample('d', dist.Categorical(Vindex(probs_d)[b, c]), infer={'enumerate': 'parallel'})",
                            "Call"
                        ],
                        [
                            "pyro.sample('d_{}'.format(i), dist.Categorical(Vindex(probs_d)[b, c]), infer={'enumerate': 'parallel'})",
                            "Call"
                        ],
                        [
                            "marginals['x_{}'.format(i)]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_4085": {
                "*size": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i + 2",
                            "BinOp"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.Bernoulli(p)",
                            "Call"
                        ],
                        [
                            "dist.Bernoulli(pyro.param('q'))",
                            "Call"
                        ],
                        [
                            "pyro.sample('d', dist.Categorical(Vindex(probs_d)[b, c]), infer={'enumerate': 'parallel'})",
                            "Call"
                        ],
                        [
                            "pyro.sample('d_{}'.format(i), dist.Categorical(Vindex(probs_d)[b, c]), infer={'enumerate': 'parallel'})",
                            "Call"
                        ],
                        [
                            "marginals['x_{}'.format(i)]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_2157": {
                "start": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_2174": {
                "start": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_2010": {
                "start": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_2081": {
                "start": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_gradient.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.5, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.5, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.5, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.5, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.5, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_399": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_426": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logp1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trace1.log_prob_sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[log_c1, log_c0]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_427": {
                "variable": {
                    "value": "grads2",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logp2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trace2.log_prob_sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[log_c1, log_c0]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_296": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_402": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_410": {
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_369": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_inference.py": {
        "torch": {
            "tensor_520": {
                "variable": {
                    "value": "alpha0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_522": {
                "variable": {
                    "value": "beta0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_524": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_900": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0.8], [0.8, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_960": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.randn([5]), 1.0 + torch.randn([5])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_998": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[5, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_999": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "torch.pow(target - pyro.param(name), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "torch.abs(target - pyro.param(name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "self.loc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[6.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.1, 0.3], [0.0, 0.4], [0.2, 0.5], [0.1, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "self.n_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(len(self.data))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "variable": {
                    "value": "self.alpha0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "variable": {
                    "value": "self.beta0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_592": {
                "variable": {
                    "value": "self.alpha0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_593": {
                "variable": {
                    "value": "self.beta0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_594": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_601": {
                "variable": {
                    "value": "self.log_alpha_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_602": {
                "variable": {
                    "value": "self.log_beta_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_889": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_977": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_978": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_993": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_158": {
                "variable": {
                    "value": "sig_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sig_q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.data.detach() - 0.14)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', -0.5 * torch.log(self.lam0).data.detach() - 0.14)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_194": {
                "variable": {
                    "value": "sig_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sig_q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.data.detach() - 0.14)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', -0.5 * torch.log(self.lam0).data.detach() - 0.14)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_525": {
                "data": {
                    "value": "float(n_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_526": {
                "input": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([3.0, 2.0])",
                            "Call"
                        ],
                        [
                            "10.0 + torch.randn(8)",
                            "BinOp"
                        ],
                        [
                            "dist.MultivariateNormal(torch.zeros(2), cov).sample([10])",
                            "Call"
                        ],
                        [
                            "dist.Poisson(torch.randn(8).exp()).sample()",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.randn([5]), 1.0 + torch.randn([5])])",
                            "Call"
                        ],
                        [
                            "torch.randn([5, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_861": {
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "self.analytic_lam_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_245": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_247": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_248": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_281": {
                "input": {
                    "value": "pyro.param('alpha_p_log').data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.alpha_p_log_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_282": {
                "input": {
                    "value": "pyro.param('beta_p_log').data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.beta_p_log_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_284": {
                "input": {
                    "value": "pyro.param('alpha_q_log').data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.alpha_q_log_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_285": {
                "input": {
                    "value": "pyro.param('beta_q_log').data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.beta_q_log_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "float(self.n_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_599": {
                "data": {
                    "value": "float(self.n_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_780": {
                "input": {
                    "value": "self.alpha0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_781": {
                "input": {
                    "value": "self.beta0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_850": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_852": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_854": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_856": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_896": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_957": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_960": {
                "*size": {
                    "value": "[5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_992": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_48": {
                "input": {
                    "value": "target - pyro.param(name)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_52": {
                "input": {
                    "value": "target - pyro.param(name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_237": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_256": {
                "input": {
                    "value": "beta_p_log",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('beta_p_log', self.beta_p_log_0.clone())",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_264": {
                "input": {
                    "value": "beta_q_log",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('beta_q_log', self.beta_q_log_0.clone())",
                            "Call"
                        ],
                        [
                            "pyro.param('beta_q_log', self.log_beta_n - 0.143)",
                            "Call"
                        ],
                        [
                            "pyro.param('beta_q_log', torch.log(self.beta0) - 0.143)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_704": {
                "input": {
                    "value": "beta_q_log",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('beta_q_log', self.beta_q_log_0.clone())",
                            "Call"
                        ],
                        [
                            "pyro.param('beta_q_log', self.log_beta_n - 0.143)",
                            "Call"
                        ],
                        [
                            "pyro.param('beta_q_log', torch.log(self.beta0) - 0.143)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_739": {
                "input": {
                    "value": "beta_q_log",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('beta_q_log', self.beta_q_log_0.clone())",
                            "Call"
                        ],
                        [
                            "pyro.param('beta_q_log', self.log_beta_n - 0.143)",
                            "Call"
                        ],
                        [
                            "pyro.param('beta_q_log', torch.log(self.beta0) - 0.143)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_790": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_803": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_901": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_918": {
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_918": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_948": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_737": {
                "input": {
                    "value": "self.alpha0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_738": {
                "input": {
                    "value": "self.beta0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_756": {
                "input": {
                    "value": "self.alpha0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_757": {
                "input": {
                    "value": "self.beta0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_758": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_791": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_791": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_794": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_794": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_796": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_796": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_800": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_800": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_804": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_805": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_213": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_952": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_114": {
                "input": {
                    "value": "torch.tensor(z_size, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_129": {
                "input": {
                    "value": "torch.tensor(z_size, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_143": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_347": {
                "input": {
                    "value": "torch.tensor(z_size, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_684": {
                "input": {
                    "value": "torch.tensor(z_size, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "z_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.loc0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.loc0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "z_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.loc0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.loc0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_148": {
                "input": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_182": {
                "tensors": {
                    "value": "[self.loc0] * self.sample_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_183": {
                "tensors": {
                    "value": "[torch.pow(self.lam0, -0.5)] * self.sample_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_200": {
                "tensors": {
                    "value": "[loc_q] * self.sample_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_201": {
                "tensors": {
                    "value": "[sig_q] * self.sample_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "data": {
                    "value": "z_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.loc0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.loc0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_413": {
                "tensors": {
                    "value": "[torch.stack([self.alpha0])] * self.sample_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_416": {
                "tensors": {
                    "value": "[torch.stack([self.beta0])] * self.sample_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_437": {
                "tensors": {
                    "value": "[alpha_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_438": {
                "tensors": {
                    "value": "[beta_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_684": {
                "data": {
                    "value": "z_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.loc0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.loc0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_727": {
                "tensors": {
                    "value": "[torch.stack([self.alpha0])] * self.sample_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_730": {
                "tensors": {
                    "value": "[torch.stack([self.beta0])] * self.sample_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_744": {
                "tensors": {
                    "value": "[alpha_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_745": {
                "tensors": {
                    "value": "[beta_q]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_192": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_184": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_414": {
                "tensors": {
                    "value": "[self.alpha0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_417": {
                "tensors": {
                    "value": "[self.beta0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_728": {
                "tensors": {
                    "value": "[self.alpha0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_731": {
                "tensors": {
                    "value": "[self.beta0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_initialization.py": {
        "torch": {
            "tensor_28": {
                "data": {
                    "value": "self.counter + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "self.counter + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_inspect.py": {
        "torch": {
            "randn_34": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_218": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_252": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_291": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_330": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_370": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_35": {
                "mode": {
                    "value": "grad_enabled",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_149": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_181": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_jit.py": {
        "torch": {
            "ones_45": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_55": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(2, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(1, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ]
                    ]
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_67": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_77": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(2, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(1, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ]
                    ]
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_99": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(2, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(1, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ]
                    ]
                },
                "check_trace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_118": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(2, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(1, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trace_135": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(2, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(1, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-float('inf'), -1.0, 0.0, 1.0, float('inf')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_151": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_152": {
                "variable": {
                    "value": "jit_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(2, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(1, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.5, 2.5, 3.5, 4.5, 5.5, 6.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-float('inf'), -1.0, 0.0, 1.0, float('inf')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trace_168": {
                "variable": {
                    "value": "jit_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (y,), check_trace=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(2, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "torch.jit.trace(f, (torch.zeros(2, requires_grad=True), torch.ones(1, requires_grad=True)))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Beta(alpha0, beta0))",
                            "Call"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ],
                        [
                            "pyro.sample('latent_fairness', dist.Dirichlet(concentration0))[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True, False, False, True, False, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.5, 2.5, 3.5, 4.5, 5.5, 6.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_180": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_181": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size((5, 4))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_194": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_195": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size((5, 4))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_207": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Size(shape)",
                            "Call"
                        ],
                        [
                            "torch.Size(shape)",
                            "Call"
                        ],
                        [
                            "torch.Size(shape)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_223": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Size(shape)",
                            "Call"
                        ],
                        [
                            "torch.Size(shape)",
                            "Call"
                        ],
                        [
                            "torch.Size(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_241": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Size(shape)",
                            "Call"
                        ],
                        [
                            "torch.Size(shape)",
                            "Call"
                        ],
                        [
                            "torch.Size(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_270": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0] * 6 + [0.0] * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_426": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0] * 6 + [0.0] * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_498": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "kl.item()",
                            "Call"
                        ],
                        [
                            "TraceEnum_ELBO(max_plate_nesting=0).differentiable_loss(model, guide, data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[transition, means]",
                    "type": "List",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_499": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum((elbo.loss_and_grads(model, guide) for i in range(outer_particles))) / outer_particles",
                            "BinOp"
                        ],
                        [
                            "JitTraceEnum_ELBO(max_plate_nesting=0).differentiable_loss(model, guide, data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[transition, means]",
                    "type": "List",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_525": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_564": {
                "variable": {
                    "value": "compiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trace_182": {
                "input": {
                    "value": "make_one_hot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_191": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_196": {
                "input": {
                    "value": "make_one_hot_actual",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_561": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[2.0, 2.0, 2.0, 2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[2.0, 2.0, 2.0, 2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_107": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_115": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x - y).pow(2).sum()",
                            "Call"
                        ],
                        [
                            "(x - y).pow(2).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_122": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_132": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x - y).pow(2).sum()",
                            "Call"
                        ],
                        [
                            "(x - y).pow(2).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_139": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_178": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([-float('inf'), -1.0, 0.0, 1.0, float('inf')])",
                            "Call"
                        ],
                        [
                            "torch.tensor([-float('inf'), -1.0, 0.0, 1.0, float('inf')])",
                            "Call"
                        ],
                        [
                            "torch.randn(5, 4, 3)",
                            "Call"
                        ],
                        [
                            "torch.randn(5, 4, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_178": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "i.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_188": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([-float('inf'), -1.0, 0.0, 1.0, float('inf')])",
                            "Call"
                        ],
                        [
                            "torch.tensor([-float('inf'), -1.0, 0.0, 1.0, float('inf')])",
                            "Call"
                        ],
                        [
                            "torch.randn(5, 4, 3)",
                            "Call"
                        ],
                        [
                            "torch.randn(5, 4, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_188": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "i.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_312": {
                "outputs": {
                    "value": "kl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1 + plate_dim) * kl_divergence(dist.Bernoulli(q), dist.Bernoulli(p))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[q.unconstrained()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_418": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_419": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_466": {
                "start": {
                    "value": "float(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_564": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_565": {
                "start": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_467": {
                "*size": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_473": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_509": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_524": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_526": {
                "*size": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cumsum_562": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(2)",
                            "Call"
                        ],
                        [
                            "torch.ones(2)",
                            "Call"
                        ],
                        [
                            "torch.ones(2, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "x / x.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([1.5, 2.5, 3.5, 4.5, 5.5, 6.5])",
                            "Call"
                        ],
                        [
                            "x / x.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([1.5, 2.5, 3.5, 4.5, 5.5, 6.5])",
                            "Call"
                        ],
                        [
                            "torch.ones(x.shape[0], dtype=torch.long, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_565": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_463": {
                "n": {
                    "value": "hidden_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_544": {
                "data": {
                    "value": "2000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_multi_sample_elbos.py": {
        "torch": {
            "randn_29": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_46": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_predictive.py": {
        "torch": {
            "tensor_104": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.15, 0.6, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_resampler.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.0, 1.0, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_sampling.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "self.loc_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_70": {
                "variable": {
                    "value": "self.loc_stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(1) / 51.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "torch.cat(latents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_84": {
                "input": {
                    "value": "marginal.mean - self.loc_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_86": {
                "input": {
                    "value": "marginal.variance.sqrt() - self.loc_stddev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_95": {
                "input": {
                    "value": "marginal.mean - self.loc_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_97": {
                "input": {
                    "value": "marginal.variance.sqrt() - self.loc_stddev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[[0.7], [0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[[0.9], [0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "latents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.ones(1, 1)]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_60": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_32": {
                "input": {
                    "value": "p_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('p1', torch.tensor([[0.7], [0.3]]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "latents[-1].view(-1).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_41": {
                "input": {
                    "value": "p_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('p2', torch.tensor([[0.9], [0.1]]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "latents[-1].view(-1).long()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_smcfilter.py": {
        "torch": {
            "randn_18": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_18": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "variable": {
                    "value": "histogram",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(size).exp()",
                            "Call"
                        ],
                        [
                            "probs / probs.sum()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_217": {
                "variable": {
                    "value": "trans_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_219": {
                "variable": {
                    "value": "obs_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "stack_260": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model.step(state) for _ in range(num_steps)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0], [-1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "self.sigma_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "self.sigma_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_220": {
                "*size": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_218": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_44": {
                "n": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "data": {
                    "value": "[1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_215": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_220": {
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_58": {
                "n": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_77": {
                "n": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "[2.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_svgd.py": {
        "torch": {
            "arange_79": {
                "variable": {
                    "value": "mean_init2",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "_product(shape2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "mean_init2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0, 3.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "alpha0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.8, 2.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "beta0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.3, 1.5, 1.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_78": {
                "start": {
                    "value": "_product(shape1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "input": {
                    "value": "shape1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "0.7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[0.7]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_tmc.py": {
        "torch": {
            "grad_61": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(-elbo.differentiable_loss(enum_model, lambda : None)).exp()",
                            "Call"
                        ],
                        [
                            "(vectorized_log_weights.logsumexp(dim=-1) - math.log(float(flat_num_samples))).exp()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "qs",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "[pyro.param('q0', torch.tensor([0.4, 0.6], requires_grad=True))]",
                            "List"
                        ],
                        [
                            "[q.unconstrained() for q in qs]",
                            "ListComp"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "grad_72": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(-tmc.differentiable_loss(tmc_model, lambda : None)).exp()",
                            "Call"
                        ],
                        [
                            "(-tmc.differentiable_loss(tmc_model, tmc_guide, reparameterized)).exp()",
                            "Call"
                        ],
                        [
                            "(-tmc.differentiable_loss(tmc_model, tmc_guide, reparameterized)).exp()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "qs",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "[pyro.param('q0', torch.tensor([0.4, 0.6], requires_grad=True))]",
                            "List"
                        ],
                        [
                            "[q.unconstrained() for q in qs]",
                            "ListComp"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "grad_160": {
                "variable": {
                    "value": "expected_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "expected_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(-elbo.differentiable_loss(enum_model, lambda : None)).exp()",
                            "Call"
                        ],
                        [
                            "(vectorized_log_weights.logsumexp(dim=-1) - math.log(float(flat_num_samples))).exp()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "qs",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "[pyro.param('q0', torch.tensor([0.4, 0.6], requires_grad=True))]",
                            "List"
                        ],
                        [
                            "[q.unconstrained() for q in qs]",
                            "ListComp"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "grad_180": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(-tmc.differentiable_loss(tmc_model, lambda : None)).exp()",
                            "Call"
                        ],
                        [
                            "(-tmc.differentiable_loss(tmc_model, tmc_guide, reparameterized)).exp()",
                            "Call"
                        ],
                        [
                            "(-tmc.differentiable_loss(tmc_model, tmc_guide, reparameterized)).exp()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "qs",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "[pyro.param('q0', torch.tensor([0.4, 0.6], requires_grad=True))]",
                            "List"
                        ],
                        [
                            "[q.unconstrained() for q in qs]",
                            "ListComp"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "grad_279": {
                "variable": {
                    "value": "actual_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "actual_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(-tmc.differentiable_loss(tmc_model, lambda : None)).exp()",
                            "Call"
                        ],
                        [
                            "(-tmc.differentiable_loss(tmc_model, tmc_guide, reparameterized)).exp()",
                            "Call"
                        ],
                        [
                            "(-tmc.differentiable_loss(tmc_model, tmc_guide, reparameterized)).exp()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "qs",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "[pyro.param('q0', torch.tensor([0.4, 0.6], requires_grad=True))]",
                            "List"
                        ],
                        [
                            "[q.unconstrained() for q in qs]",
                            "ListComp"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ],
                        [
                            "(q2.unconstrained(),)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "data": {
                    "value": "{1: 0.0999, 2: 0.086, 3: 0.0802, 4: 0.0771}[depth]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[0.4, 0.6]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[0.75, 0.25]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_35": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_43": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "float(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "data": {
                    "value": "float(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_util.py": {
        "torch": {
            "ones_44": {
                "*size": {
                    "value": "torch.Size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "torch.Size((2,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "torch.Size((3, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "torch.Size((3, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/infer/test_valid_models.py": {
        "torch": {
            "ones_1327": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1620": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1663": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_2357": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_2357": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_2394": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[7.0, 7.0, 7.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_2439": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "7.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_2475": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "7.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2477": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[False, False], [False, True], [True, False]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_2539": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_2539": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_2577": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2602": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_2623": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_2647": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2671": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2692": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2713": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 5.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2737": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 5.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_197": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_219": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_398": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_438": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_488": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_518": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_547": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_571": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_595": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_607": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_631": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_658": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_681": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_716": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_739": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_766": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_790": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_808": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_824": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_867": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_885": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_915": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_990": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1005": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1018": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1034": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1048": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1062": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1077": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1078": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1098": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1116": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1422": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1466": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2167": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2168": {
                "variable": {
                    "value": "x_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "p0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2314": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2342": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2343": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2344": {
                "data": {
                    "value": "[False, True]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2377": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2378": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2379": {
                "data": {
                    "value": "[True]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2380": {
                "data": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2381": {
                "data": {
                    "value": "[False, True, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2422": {
                "data": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2423": {
                "data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2424": {
                "data": {
                    "value": "[True]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2425": {
                "data": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2426": {
                "data": {
                    "value": "[False, True, True, False]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2497": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2525": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2526": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_202": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_224": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_330": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_469": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_496": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_526": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_553": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_575": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_613": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_638": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_663": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_687": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_703": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_898": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_920": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_994": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1009": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1022": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1039": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1053": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1067": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1084": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1085": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1102": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1122": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1140": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1141": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1168": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1169": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1170": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1492": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1511": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1530": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1550": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1568": {
                "data": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1585": {
                "data": {
                    "value": "[0.2, 0.8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1602": {
                "data": {
                    "value": "[0.2, 0.8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1624": {
                "data": {
                    "value": "[0.45, 0.55]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1625": {
                "data": {
                    "value": "[[0.6, 0.4], [0.4, 0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1626": {
                "data": {
                    "value": "[[0.75, 0.25], [0.55, 0.45]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1629": {
                "data": {
                    "value": "[[[0.4, 0.6], [0.3, 0.7]], [[0.3, 0.7], [0.2, 0.8]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_1646": {
                "variable": {
                    "value": "d_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1803": {
                "data": {
                    "value": "[[0.2, 0.8], [0.1, 0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1826": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1827": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1828": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_1838": {
                "variable": {
                    "value": "z_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1879": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1906": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1992": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_2057": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2058": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2111": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2134": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2155": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2199": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2213": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2226": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2308": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2331": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_2366": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_2367": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_2403": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_2404": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_2450": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_2451": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_2487": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2514": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_2548": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_2549": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2570": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2572": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2611": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2612": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2633": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2634": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2657": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2658": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2680": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2681": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2701": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2702": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2723": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2724": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_2746": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.sample('z', dist.Normal(0, 1))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Normal(0, 1))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z', dist.Bernoulli(p))",
                            "Call"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "pyro.sample('z_{}_{}'.format(i, j), dist.Categorical(p[z]))",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "pyro.sample('z_{}'.format(i), dist.Categorical(p[z]))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z_init', dist.Normal(0, 1))",
                            "Call"
                        ],
                        [
                            "pyro.sample('z_{}'.format(t), dist.Normal(z, 1))",
                            "Call"
                        ],
                        [
                            "pyro.barrier(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_2769": {
                "input": {
                    "value": "cutpoints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.sample('cutpoints', dist.Normal(0.0, 1.0).expand([K - 1]).to_event(1))",
                            "Call"
                        ],
                        [
                            "torch.sort(cutpoints, dim=-1).values",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_2775": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_2776": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_2777": {
                "*size": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_2778": {
                "*size": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_378": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_407": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_444": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_445": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_846": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1499": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1907": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_1914": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1932": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1939": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1963": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_1971": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1996": {
                "data": {
                    "value": "1.0 if data else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_2004": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_2018": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_2165": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_2166": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2305": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_2442": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_2442": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_2480": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_2480": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_2488": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2587": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2590": {
                "data": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2591": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2592": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2593": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_380": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_849": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_851": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1538": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1588": {
                "data": {
                    "value": "[0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1591": {
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1605": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1667": {
                "data": {
                    "value": "1.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1674": {
                "data": {
                    "value": "1.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1710": {
                "data": {
                    "value": "1.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1841": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1936": {
                "data": {
                    "value": "1.0 if data else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_1967": {
                "data": {
                    "value": "1.0 if data else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_2176": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_2240": {
                "start": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2328": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_2445": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_2483": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_2511": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_855": {
                "*size": {
                    "value": "11",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1332": {
                "data": {
                    "value": "1.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1340": {
                "data": {
                    "value": "1.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_1362": {
                "data": {
                    "value": "1.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_2455": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_2491": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_2759": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_2040": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/integration_tests/test_conjugate_gaussian_models.py": {
        "torch": {
            "sum_25": {
                "input": {
                    "value": "torch.pow(target - pyro.param(name), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "self.loc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.1, 0.03, 0.2, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "self.loc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.52]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_279": {
                "variable": {
                    "value": "self.N_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(self.N_data)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bernoulli_78": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.3 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_111": {
                "variable": {
                    "value": "sig_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sig_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q_%d' % k, -0.5 * torch.log(self.lambda_posts[k]).data + difficulty * (0.1 * torch.randn(1) - 0.53))",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_290": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.3 * torch.ones(n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_172": {
                "input": {
                    "value": "self.which_nodes_reparam",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_457": {
                "input": {
                    "value": "self.lambdas[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_553": {
                "input": {
                    "value": "self.which_nodes_reparam",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_85": {
                "input": {
                    "value": "self.lambdas[k - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_302": {
                "variable": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2 ** (n - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bernoulli(0.3 * torch.ones(N))",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(0.3 * torch.ones(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_93": {
                "input": {
                    "value": "self.lambdas[self.N]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_290": {
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(1, self.N)",
                            "Call"
                        ],
                        [
                            "range(2, self.N + 1)",
                            "Call"
                        ],
                        [
                            "range(2, self.N + 1)",
                            "Call"
                        ],
                        [
                            "range(2, self.N + 1)",
                            "Call"
                        ],
                        [
                            "range(2, self.N + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_291": {
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bernoulli(0.3 * torch.ones(N))",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(0.3 * torch.ones(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_477": {
                "input": {
                    "value": "self.lambdas[n - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_522": {
                "data": {
                    "value": "[0.5 + difficulty * i / n_nodes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_533": {
                "input": {
                    "value": "log_sig_node",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_' + node_suffix, -0.5 * torch.log(self.target_lambdas[node_suffix]) + difficulty * (torch.Tensor([-0.3]) - 0.3 * torch.randn(1) ** 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_274": {
                "data": {
                    "value": "[0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_497": {
                "input": {
                    "value": "self.lambdas[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_512": {
                "input": {
                    "value": "self.target_lambdas[node_suffix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_622": {
                "input": {
                    "value": "self.target_lambdas[node]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_108": {
                "input": {
                    "value": "self.lambda_posts[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_213": {
                "input": {
                    "value": "self.lambda_posts[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_275": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "target - pyro.param(name)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_104": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_109": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_117": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_513": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/integration_tests/test_tracegraph_elbo.py": {
        "torch": {
            "sum_24": {
                "input": {
                    "value": "torch.pow(target - pyro.param(name), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "torch.abs(target - pyro.param(name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "self.loc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[6.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "self.n_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "float(len(self.data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "variable": {
                    "value": "self.loc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[6.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.1, 0.3], [0.0, 0.4], [0.2, 0.5], [0.1, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "self.alpha0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "variable": {
                    "value": "self.beta0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_293": {
                "variable": {
                    "value": "self.log_alpha_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_294": {
                "variable": {
                    "value": "self.log_beta_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "self.alpha0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "self.beta0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_353": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_356": {
                "variable": {
                    "value": "self.log_alpha_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_357": {
                "variable": {
                    "value": "self.log_beta_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.beta_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_412": {
                "variable": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_413": {
                "variable": {
                    "value": "self.loc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_415": {
                "variable": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[6.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "self.n_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "float(self.n_outer * self.n_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_420": {
                "variable": {
                    "value": "self.sum_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_508": {
                "variable": {
                    "value": "self.data_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "pt_loc_baseline",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_84": {
                "variable": {
                    "value": "sig_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sig_q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.29)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.29)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.27)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.07)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_460": {
                "variable": {
                    "value": "sig_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sig_q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.29)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.29)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.27)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.07)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_562": {
                "variable": {
                    "value": "sig_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sig_q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.29)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.29)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.27)",
                            "Call"
                        ],
                        [
                            "pyro.param('log_sig_q', self.analytic_log_sig_n.expand(2) - 0.07)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[-0.1, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "[0.0, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[0.2, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[0.1, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "self.analytic_lam_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_116": {
                "input": {
                    "value": "self.analytic_lam_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "data": {
                    "value": "self.n_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_431": {
                "input": {
                    "value": "self.analytic_lam_n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_24": {
                "input": {
                    "value": "target - pyro.param(name)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_28": {
                "input": {
                    "value": "target - pyro.param(name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_183": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "[-0.34, 0.52]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "data": {
                    "value": "[0.74]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_224": {
                "input": {
                    "value": "log_sig_q_prime",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q_prime', -0.5 * torch.log(1.2 * self.lam0))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_319": {
                "input": {
                    "value": "beta_q_log",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('beta_q_log', self.log_beta_n - 0.143)",
                            "Call"
                        ],
                        [
                            "pyro.param('beta_q_log', self.log_beta_n - 0.143)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_382": {
                "input": {
                    "value": "beta_q_log",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pyro.param('beta_q_log', self.log_beta_n - 0.143)",
                            "Call"
                        ],
                        [
                            "pyro.param('beta_q_log', self.log_beta_n - 0.143)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_607": {
                "variable": {
                    "value": "mean_0_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(pyro.param('mean_0_%d' % k), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_610": {
                "variable": {
                    "value": "mean_1_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(pyro.param('mean_1_%d' % k), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_613": {
                "variable": {
                    "value": "mean_2_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(pyro.param('mean_2_%d' % k), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_616": {
                "variable": {
                    "value": "superfluous_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(mean_0_error, mean_1_error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_222": {
                "input": {
                    "value": "1.2 * self.lam0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_263": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_265": {
                "input": {
                    "value": "2.0 * self.lam0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_554": {
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_69": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_198": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_201": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_425": {
                "data": {
                    "value": "[-0.1, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_564": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_608": {
                "input": {
                    "value": "pyro.param('mean_0_%d' % k)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_611": {
                "input": {
                    "value": "pyro.param('mean_1_%d' % k)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_614": {
                "input": {
                    "value": "pyro.param('mean_2_%d' % k)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_617": {
                "input": {
                    "value": "mean_0_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(torch.pow(pyro.param('mean_0_%d' % k), 2.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_74": {
                "input": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_426": {
                "*size": {
                    "value": "torch.Size((2,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_444": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_522": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_580": {
                "*size": {
                    "value": "4 - i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_206": {
                "input": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_451": {
                "input": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_537": {
                "input": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/test_autoregressive.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_dim",
                    "type": "List",
                    "possible_values": [
                        [
                            "[2, 3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[1, 3, 5]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "List",
                    "possible_values": [
                        [
                            "[2, 3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[1, 3, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "List",
                    "possible_values": [
                        [
                            "[2, 3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[1, 3, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_32": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "observed_dim",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, 5]",
                            "List"
                        ],
                        [
                            "[0, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_57": {
                "variable": {
                    "value": "lower_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tril(nonzero(permuted_jacobian), diagonal=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(observed_dim, dtype=torch.long), torch.tensor(sorted(permutation[0:permutation.index(idx)]), dtype=torch.long) + observed_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sign_29": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_29": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(1, input_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "epsilon_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_dim",
                    "type": "List",
                    "possible_values": [
                        [
                            "[2, 3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[1, 3, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "tril_57": {
                "input": {
                    "value": "nonzero(permuted_jacobian)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_78": {
                "start": {
                    "value": "observed_dim",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0, 5]",
                            "List"
                        ],
                        [
                            "[0, 3]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_132": {
                "variable": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "input_dim",
                    "type": "List",
                    "possible_values": [
                        [
                            "[2, 3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[1, 3, 5]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "sorted(permutation[0:permutation.index(idx)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "list(sorted(prev_connections))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "list(sorted(skip_connections))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/test_module.py": {
        "torch": {
            "randn_48": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "submodule.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_320": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_346": {
                "variable": {
                    "value": "module.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_350": {
                "variable": {
                    "value": "module.p.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_458": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_476": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(28 * 28, 200)",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_510": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_538": {
                "variable": {
                    "value": "module.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_623": {
                "variable": {
                    "value": "gru",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_624": {
                "variable": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_467": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_548": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_567": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_628": {
                "input": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Module_75": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.m.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.p.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_237": {
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_244": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_265": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_270": {
                "variable": {
                    "value": "self.p.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(3.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_282": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_350": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "data": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_394": {
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_398": {
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_463": {
                "obj": {
                    "value": "module",
                    "type": "Call",
                    "possible_values": [
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "MyModule()",
                            "Call"
                        ],
                        [
                            "PyroModule[nn.Sequential](PyroModule[nn.Linear](28 * 28, 200), PyroModule[nn.Sigmoid](), PyroModule[nn.Linear](200, 200), PyroModule[nn.Sigmoid](), PyroModule[nn.Linear](200, 10))",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "DecoratorModel(3)",
                            "Call"
                        ],
                        [
                            "MyModule()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_477": {
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_479": {
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_481": {
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_537": {
                "data": {
                    "value": "1.234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_538": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_545": {
                "obj": {
                    "value": "module",
                    "type": "Call",
                    "possible_values": [
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "MyModule()",
                            "Call"
                        ],
                        [
                            "PyroModule[nn.Sequential](PyroModule[nn.Linear](28 * 28, 200), PyroModule[nn.Sigmoid](), PyroModule[nn.Linear](200, 200), PyroModule[nn.Sigmoid](), PyroModule[nn.Linear](200, 10))",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "DecoratorModel(3)",
                            "Call"
                        ],
                        [
                            "MyModule()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_564": {
                "obj": {
                    "value": "module",
                    "type": "Call",
                    "possible_values": [
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "MyModule()",
                            "Call"
                        ],
                        [
                            "PyroModule[nn.Sequential](PyroModule[nn.Linear](28 * 28, 200), PyroModule[nn.Sigmoid](), PyroModule[nn.Linear](200, 200), PyroModule[nn.Sigmoid](), PyroModule[nn.Linear](200, 10))",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "PyroModule()",
                            "Call"
                        ],
                        [
                            "DecoratorModel(3)",
                            "Call"
                        ],
                        [
                            "MyModule()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "Family()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_584": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_638": {
                "input": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_228": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_229": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_230": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_371": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_374": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "data": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.get_param_store().values()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_210": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_211": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_212": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_213": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_214": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_215": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_216": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_265": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_312": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_314": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_372": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "data": {
                    "value": "1.234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_584": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/einsum/test_adjoint.py": {
        "torch": {
            "randn_58": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_97": {
                "*size": {
                    "value": "torch.Size((2,) * len(input_))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/einsum/test_torch_log.py": {
        "torch": {
            "full_49": {
                "size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_49": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/gamma_gaussian.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "log_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_18": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_19": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim, rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(batch_shape + (dim, rank))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "samples.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_37": {
                "variable": {
                    "value": "concentration",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_38": {
                "variable": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_26": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_25": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/gaussian.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "log_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_18": {
                "variable": {
                    "value": "info_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_19": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim, rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(batch_shape + (dim, rank))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "samples.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (dim, rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_arrowhead.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "mm_21": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cov.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "flip_27": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linalg.cholesky(torch.flip(arrowhead_full, (-2, -1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_47": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "cholesky_28": {
                "input": {
                    "value": "torch.flip(arrowhead_full, (-2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_28": {
                "input": {
                    "value": "arrowhead_full",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask * cov",
                            "BinOp"
                        ]
                    ]
                },
                "dims": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_contract.py": {
        "torch": {
            "randn_523": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_524": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_525": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_540": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_541": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_542": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_554": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_555": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_556": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_571": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_572": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_573": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_574": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_594": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_595": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_617": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_618": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_619": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_657": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_658": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_659": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_678": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_679": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_680": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_681": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_696": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_697": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_698": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_699": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_700": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_714": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_715": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_716": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_717": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_123": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple((sizes[dim] for dim in dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_264": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tuple((symbol_to_size[s] for s in dims))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_284": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tuple((symbol_to_size[s] for s in dims))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_730": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple((sizes[dim] for dim in dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_750": {
                "*size": {
                    "value": "torch.Size((2,) * len(input_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_775": {
                "*size": {
                    "value": "torch.Size((2,) * len(input_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_800": {
                "*size": {
                    "value": "torch.Size((2,) * len(input_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_378": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple((sizes[dim] for dim in dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "full_378": {
                "size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple((sizes[dim] for dim in dims))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "fill",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/ops/test_gamma_gaussian.py": {
        "torch": {
            "randn_52": {
                "variable": {
                    "value": "log_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_normalizer_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "info_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "info_vec_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "precision_shape + (dim, rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "alpha_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_56": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_57": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beta_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_57": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_138": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_139": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_139": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_161": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_161": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_179": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + (1,) * len(batch_shape) + (right,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_180": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_180": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_195": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + (1,) * len(batch_shape) + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_202": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_202": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_254": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (x_dim, y_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_257": {
                "variable": {
                    "value": "xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + batch_shape + (x_dim + y_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_258": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + batch_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_328": {
                "variable": {
                    "value": "covariance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "precision",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(precision_shape + (dim, rank))",
                            "Call"
                        ],
                        [
                            "precision.matmul(precision.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "pad(x.precision, (0, nc, 0, nc)) + pad(y.precision, (na, 0, na, 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_334": {
                "variable": {
                    "value": "z_covariance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_345": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.batch_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_345": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_351": {
                "variable": {
                    "value": "value_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand((num_samples,) + z.batch_shape + (nb,)) * scale - scale / 2",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_352": {
                "variable": {
                    "value": "value_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand((num_samples,) + z.batch_shape + (nb,)) * scale - scale / 2",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, nc)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "logsumexp_353": {
                "variable": {
                    "value": "expect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.log_density(value_x, s) + y.log_density(value_y, s)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_194": {
                "n": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_213": {
                "n": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_214": {
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cholesky_314": {
                "input": {
                    "value": "x.precision[..., na:, na:] + y.precision[..., :nb, :nb]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_326": {
                "input": {
                    "value": "y.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(na, 0, na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_327": {
                "input": {
                    "value": "y.info_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "*size": {
                    "value": "z.batch_shape + (z.dim(),)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_219": {
                "*size": {
                    "value": "(num_samples,) + (1,) * len(batch_shape) + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_322": {
                "n": {
                    "value": "x.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_323": {
                "n": {
                    "value": "y.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_350": {
                "*size": {
                    "value": "(num_samples,) + z.batch_shape + (nb,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_gaussian.py": {
        "torch": {
            "randn_42": {
                "variable": {
                    "value": "log_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_normalizer_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_43": {
                "variable": {
                    "value": "info_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "info_vec_shape + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "precision_shape + (dim, rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_126": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_195": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + (1,) * len(batch_shape) + (right,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_209": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + (1,) * len(batch_shape) + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_253": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (x_dim, y_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_254": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (y_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_255": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (y_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_255": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_256": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (y_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_274": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (x_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_304": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (x_dim, y_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_308": {
                "variable": {
                    "value": "xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_shape + (1,) * len(batch_shape) + (x_dim + y_dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_321": {
                "variable": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (x_dim, y_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_392": {
                "variable": {
                    "value": "covariance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "precision",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(precision_shape + (dim, rank))",
                            "Call"
                        ],
                        [
                            "precision.matmul(precision.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "pad(x.precision, (0, nc, 0, nc)) + pad(y.precision, (na, 0, na, 0))",
                            "BinOp"
                        ],
                        [
                            "t(precision_unconstrained)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_398": {
                "variable": {
                    "value": "z_covariance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.precision",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_415": {
                "variable": {
                    "value": "value_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand((num_samples,) + z.batch_shape + (nb,)) * scale - scale / 2",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_416": {
                "variable": {
                    "value": "value_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand((num_samples,) + z.batch_shape + (nb,)) * scale - scale / 2",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, nc)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "logsumexp_417": {
                "variable": {
                    "value": "expect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.log_density(value_x) + y.log_density(value_y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_437": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (3,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_439": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (3, 3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_443": {
                "variable": {
                    "value": "log_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_449": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "(actual - expected).abs().sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loc, precision_unconstrained]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_208": {
                "n": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_234": {
                "n": {
                    "value": "dim",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ],
                        [
                            "left + right",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cholesky_378": {
                "input": {
                    "value": "x.precision[..., na:, na:] + y.precision[..., :nb, :nb]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_390": {
                "input": {
                    "value": "y.precision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(na, 0, na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_391": {
                "input": {
                    "value": "y.info_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(na, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_419": {
                "*size": {
                    "value": "z.batch_shape + (z.dim(),)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_239": {
                "*size": {
                    "value": "(num_samples,) + (1,) * len(batch_shape) + (dim,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_386": {
                "n": {
                    "value": "x.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_387": {
                "n": {
                    "value": "y.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_414": {
                "*size": {
                    "value": "(num_samples,) + z.batch_shape + (nb,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_indexing.py": {
        "torch": {
            "rand_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_shape + (5, 6) + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_136": {
                "variable": {
                    "value": "probs_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_137": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "x_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-1,) + (1,) * (-1 - prev_enum_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_138": {
                "variable": {
                    "value": "x_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "x_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-1,) + (1,) * (-1 - curr_enum_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_141": {
                "start": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_116": {
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_117": {
                "*size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_integrator.py": {
        "torch": {
            "pow_95": {
                "input": {
                    "value": "q['x'] ** 2 + q['y'] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_122": {
                "input": {
                    "value": "q['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_90": {
                "input": {
                    "value": "q['x'] ** 2 + q['y'] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_118": {
                "input": {
                    "value": "q['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "4.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sin_47": {
                "input": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_48": {
                "input": {
                    "value": "torch.tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "[0.02]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[-0.02]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_jit.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "6.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_linalg.py": {
        "torch": {
            "inverse_36": {
                "variable": {
                    "value": "expected_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ],
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "expected_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_triangular_47": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ],
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ]
                    ]
                },
                "B": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 6)",
                            "Call"
                        ],
                        [
                            "torch.randn(5, 6)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_57": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "solve_triangular_60": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "A.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "B": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 6)",
                            "Call"
                        ],
                        [
                            "torch.randn(5, 6)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "not upper",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "inverse_33": {
                "input": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ],
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ]
                    ]
                }
            },
            "mm_34": {
                "input": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ],
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rinverse(A, sym=use_sym)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_34": {
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[[17.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "[[1.0, 2.0], [2.0, -3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "[[1.0, 2, 0], [2, -2, 4], [0, 4, 5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "[[1.0, 2, 0, 7], [2, -2, 4, -1], [0, 4, 5, 8], [7, -1, 8, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[[1.0, 2, 0, 7, 0], [2, -2, 4, -1, 2], [0, 4, 5, 8, -4], [7, -1, 8, 1, -3], [0, 2, -4, -3, -1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_27": {
                "n": {
                    "value": "40",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triangular_solve_46": {
                "b": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 6)",
                            "Call"
                        ],
                        [
                            "torch.randn(5, 6)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ],
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ]
                    ]
                },
                "upper": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "triangular_solve_59": {
                "b": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 6)",
                            "Call"
                        ],
                        [
                            "torch.randn(5, 6)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ],
                        [
                            "torch.randn(5, 5)",
                            "Call"
                        ],
                        [
                            "A.triu() if upper else A.tril()",
                            "IfExp"
                        ]
                    ]
                },
                "upper": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_newton.py": {
        "torch": {
            "randn_18": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "flat_x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "actual_eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cov.reshape(flat_hessian.shape)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "flat_hessian",
                    "type": "Name",
                    "possible_values": [
                        [
                            "noise.matmul(noise.transpose(-1, -2)) + torch.eye(dims)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_62": {
                "variable": {
                    "value": "expected_eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_95": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_125": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "expected_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mode.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_41": {
                "n": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_71": {
                "outputs": {
                    "value": "x_updated[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[mode]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_126": {
                "n": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_packed.py": {
        "torch": {
            "randn_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(range(2, 2 + len(dims)))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_53": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(range(2, 2 + len(dims)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/ops/test_special.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logspace_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "200.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[iv(i, value.numpy()) for i in range(order + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_85": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_102": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quad_points.pow(2.0).log() + log_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_25": {
                "input": {
                    "value": "grad(safe_log(x), [x])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isfinite_24": {
                "input": {
                    "value": "grad(x.log(), [x])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_20": {
                "outputs": {
                    "value": "expected.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_25": {
                "outputs": {
                    "value": "safe_log(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_24": {
                "outputs": {
                    "value": "x.log()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "[0.6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "[[0.6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "[0.6, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "0.6",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_ssm_gp.py": {
        "torch": {
            "rand_18": {
                "variable": {
                    "value": "dt",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_21": {
                "variable": {
                    "value": "forward_backward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mk.transition_matrix(dt)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "backward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mk.transition_matrix(-dt)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_25": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "mk.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cholesky_30": {
                "input": {
                    "value": "mk.stationary_covariance()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_31": {
                "input": {
                    "value": "mk.process_covariance(forward)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[1e-09]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_15": {
                "*size": {
                    "value": "num_gps",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_stats.py": {
        "torch": {
            "empty_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_51": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10,) + torch.Size(sample_shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[autocorrelation(xij).tolist() for xij in xi] for xi in x]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_151": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_162": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10,) + torch.Size(sample_shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_183": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_184": {
                "variable": {
                    "value": "x[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_192": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_199": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_212": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 100) + sample_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "expanded_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, b, c, a, b, a, c, a, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_256": {
                "variable": {
                    "value": "expanded_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_257": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, b, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_257": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4.0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_258": {
                "variable": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_297": {
                "variable": {
                    "value": "truth",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "event_shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[3.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[3.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[4.0, 6.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[4.0, 6.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[0.0, 0.8, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[0.0, 0.22]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "batch_statistics",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "input": {
                    "value": "y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "[1, 0.78, 0.52, 0.21, -0.13, -0.52, -0.94, -1.4, -1.91, -2.45]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "[8.25, 6.42, 4.25, 1.75, -1.08, -4.25, -7.75, -11.58, -15.75, -20.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "batch_statistics",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "input": {
                    "value": "xs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "start": {
                    "value": "10.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_236": {
                "start": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "101",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_236": {
                "input": {
                    "value": "25",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "data": {
                    "value": "[7.49, 7.75, 7.86, 7.92]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "data": {
                    "value": "[1.14, 0.91, 0.79, 0.7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_253": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_254": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_255": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_260": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "genpareto.rvs(c=k, scale=sigma, size=n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_37": {
                "input": {
                    "value": "y.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "numel_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_38": {
                "input": {
                    "value": "z.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "numel_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_224": {
                "tensors": {
                    "value": "batch_diagnostics",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "input": {
                    "value": "sample_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size(sample_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_298": {
                "*size": {
                    "value": "(num_samples,) + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_streaming.py": {
        "torch": {
            "randperm_63": {
                "n": {
                    "value": "len(samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_21": {
                "*size": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_101": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_tensor_utils.py": {
        "torch": {
            "randn_35": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "block_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_35": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + (block_size,) + mat_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "left_shape + (period,) + right_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Uniform_77": {
                "variable": {
                    "value": "max_period",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "duration",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_96": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "left_shape + (size,) + right_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_112": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(block_size).unsqueeze(0).expand((batch_size,) + block_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_113": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_124": {
                "variable": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*batch_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(block_size).unsqueeze(0).expand((batch_size,) + block_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_125": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*batch_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(np.convolve(s, k, mode=mode)) for (s, k) in zip(signal.reshape(-1, m), kernel.reshape(-1, n))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "*batch_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_141": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31,
                                32,
                                33,
                                34,
                                35,
                                36,
                                37,
                                38,
                                39,
                                40,
                                41,
                                42,
                                43,
                                44,
                                45,
                                46,
                                47,
                                48,
                                49,
                                50,
                                51,
                                52,
                                53,
                                54,
                                55,
                                56,
                                57,
                                58,
                                59,
                                60,
                                61,
                                62,
                                63,
                                64,
                                65,
                                66,
                                67,
                                68,
                                69,
                                70,
                                71,
                                72,
                                73,
                                74,
                                75,
                                76,
                                77,
                                78,
                                79,
                                80,
                                81,
                                82,
                                83,
                                84,
                                85,
                                86,
                                87,
                                88,
                                89,
                                90,
                                91,
                                92,
                                93,
                                94,
                                95,
                                96,
                                97,
                                98,
                                99,
                                100,
                                101,
                                102,
                                103,
                                104,
                                105,
                                106,
                                107,
                                108,
                                109,
                                110,
                                111,
                                112,
                                113,
                                114,
                                115,
                                116,
                                117,
                                118,
                                119,
                                120,
                                121,
                                122,
                                123,
                                124,
                                125,
                                126,
                                127,
                                128,
                                129,
                                130,
                                131,
                                132,
                                133,
                                134,
                                135,
                                136,
                                137,
                                138,
                                139,
                                140,
                                141,
                                142,
                                143,
                                144,
                                145,
                                146,
                                147,
                                148,
                                149,
                                150,
                                151,
                                152,
                                153,
                                154,
                                155,
                                156,
                                157,
                                158,
                                159,
                                160,
                                161,
                                162,
                                163,
                                164,
                                165,
                                166,
                                167,
                                168,
                                169,
                                170,
                                171,
                                172,
                                173,
                                174,
                                175,
                                176,
                                177,
                                178,
                                179,
                                180,
                                181,
                                182,
                                183,
                                184,
                                185,
                                186,
                                187,
                                188,
                                189,
                                190,
                                191,
                                192,
                                193,
                                194,
                                195,
                                196,
                                197,
                                198,
                                199,
                                200,
                                201,
                                202,
                                203,
                                204,
                                205,
                                206,
                                207,
                                208,
                                209,
                                210,
                                211,
                                212,
                                213,
                                214,
                                215,
                                216,
                                217,
                                218,
                                219,
                                220,
                                221,
                                222,
                                223,
                                224,
                                225,
                                226,
                                227,
                                228,
                                229,
                                230,
                                231,
                                232,
                                233,
                                234,
                                235,
                                236,
                                237,
                                238,
                                239,
                                240,
                                241,
                                242,
                                243,
                                244,
                                245,
                                246,
                                247,
                                248,
                                249,
                                250,
                                251,
                                252,
                                253,
                                254,
                                255,
                                256,
                                257,
                                258,
                                259,
                                260,
                                261,
                                262,
                                263,
                                264,
                                265,
                                266,
                                267,
                                268,
                                269,
                                270,
                                271,
                                272,
                                273,
                                274,
                                275,
                                276,
                                277,
                                278,
                                279,
                                280,
                                281,
                                282,
                                283,
                                284,
                                285,
                                286,
                                287,
                                288,
                                289,
                                290,
                                291,
                                292,
                                293,
                                294,
                                295,
                                296,
                                297,
                                298,
                                299,
                                300,
                                301,
                                302,
                                303,
                                304,
                                305,
                                306,
                                307,
                                308,
                                309,
                                310,
                                311,
                                312,
                                313,
                                314,
                                315,
                                316,
                                317,
                                318,
                                319,
                                320,
                                321,
                                322,
                                323,
                                324,
                                325,
                                326,
                                327,
                                328,
                                329,
                                330,
                                331,
                                332,
                                333,
                                334,
                                335,
                                336,
                                337,
                                338,
                                339,
                                340,
                                341,
                                342,
                                343,
                                344,
                                345,
                                346,
                                347,
                                348,
                                349,
                                350,
                                351,
                                352,
                                353,
                                354,
                                355,
                                356,
                                357,
                                358,
                                359,
                                360,
                                361,
                                362,
                                363,
                                364,
                                365,
                                366,
                                367,
                                368,
                                369,
                                370,
                                371,
                                372,
                                373,
                                374,
                                375,
                                376,
                                377,
                                378,
                                379,
                                380,
                                381,
                                382,
                                383,
                                384,
                                385,
                                386,
                                387,
                                388,
                                389,
                                390,
                                391,
                                392,
                                393,
                                394,
                                395,
                                396,
                                397,
                                398,
                                399,
                                400,
                                401,
                                402,
                                403,
                                404,
                                405,
                                406,
                                407,
                                408,
                                409,
                                410,
                                411,
                                412,
                                413,
                                414,
                                415,
                                416,
                                417,
                                418,
                                419,
                                420,
                                421,
                                422,
                                423,
                                424,
                                425,
                                426,
                                427,
                                428,
                                429,
                                430,
                                431,
                                432,
                                433,
                                434,
                                435,
                                436,
                                437,
                                438,
                                439,
                                440,
                                441,
                                442,
                                443,
                                444,
                                445,
                                446,
                                447,
                                448,
                                449,
                                450,
                                451,
                                452,
                                453,
                                454,
                                455,
                                456,
                                457,
                                458,
                                459,
                                460,
                                461,
                                462,
                                463,
                                464,
                                465,
                                466,
                                467,
                                468,
                                469,
                                470,
                                471,
                                472,
                                473,
                                474,
                                475,
                                476,
                                477,
                                478,
                                479,
                                480,
                                481,
                                482,
                                483,
                                484,
                                485,
                                486,
                                487,
                                488,
                                489,
                                490,
                                491,
                                492,
                                493,
                                494,
                                495,
                                496,
                                497,
                                498,
                                499,
                                500,
                                501,
                                502,
                                503,
                                504,
                                505,
                                506,
                                507,
                                508,
                                509,
                                510,
                                511,
                                512,
                                513,
                                514,
                                515,
                                516,
                                517,
                                518,
                                519,
                                520,
                                521,
                                522,
                                523,
                                524,
                                525,
                                526,
                                527,
                                528,
                                529,
                                530,
                                531,
                                532,
                                533,
                                534,
                                535,
                                536,
                                537,
                                538,
                                539,
                                540,
                                541,
                                542,
                                543,
                                544,
                                545,
                                546,
                                547,
                                548,
                                549,
                                550,
                                551,
                                552,
                                553,
                                554,
                                555,
                                556,
                                557,
                                558,
                                559,
                                560,
                                561,
                                562,
                                563,
                                564,
                                565,
                                566,
                                567,
                                568,
                                569,
                                570,
                                571,
                                572,
                                573,
                                574,
                                575,
                                576,
                                577,
                                578,
                                579,
                                580,
                                581,
                                582,
                                583,
                                584,
                                585,
                                586,
                                587,
                                588,
                                589,
                                590,
                                591,
                                592,
                                593,
                                594,
                                595,
                                596,
                                597,
                                598,
                                599,
                                600,
                                601,
                                602,
                                603,
                                604,
                                605,
                                606,
                                607,
                                608,
                                609,
                                610,
                                611,
                                612,
                                613,
                                614,
                                615,
                                616,
                                617,
                                618,
                                619,
                                620,
                                621,
                                622,
                                623,
                                624,
                                625,
                                626,
                                627,
                                628,
                                629,
                                630,
                                631,
                                632,
                                633,
                                634,
                                635,
                                636,
                                637,
                                638,
                                639,
                                640,
                                641,
                                642,
                                643,
                                644,
                                645,
                                646,
                                647,
                                648,
                                649,
                                650,
                                651,
                                652,
                                653,
                                654,
                                655,
                                656,
                                657,
                                658,
                                659,
                                660,
                                661,
                                662,
                                663,
                                664,
                                665,
                                666,
                                667,
                                668,
                                669,
                                670,
                                671,
                                672,
                                673,
                                674,
                                675,
                                676,
                                677,
                                678,
                                679,
                                680,
                                681,
                                682,
                                683,
                                684,
                                685,
                                686,
                                687,
                                688,
                                689,
                                690,
                                691,
                                692,
                                693,
                                694,
                                695,
                                696,
                                697,
                                698,
                                699,
                                700,
                                701,
                                702,
                                703,
                                704,
                                705,
                                706,
                                707,
                                708,
                                709,
                                710,
                                711,
                                712,
                                713,
                                714,
                                715,
                                716,
                                717,
                                718,
                                719,
                                720,
                                721,
                                722,
                                723,
                                724,
                                725,
                                726,
                                727,
                                728,
                                729,
                                730,
                                731,
                                732,
                                733,
                                734,
                                735,
                                736,
                                737,
                                738,
                                739,
                                740,
                                741,
                                742,
                                743,
                                744,
                                745,
                                746,
                                747,
                                748,
                                749,
                                750,
                                751,
                                752,
                                753,
                                754,
                                755,
                                756,
                                757,
                                758,
                                759,
                                760,
                                761,
                                762,
                                763,
                                764,
                                765,
                                766,
                                767,
                                768,
                                769,
                                770,
                                771,
                                772,
                                773,
                                774,
                                775,
                                776,
                                777,
                                778,
                                779,
                                780,
                                781,
                                782,
                                783,
                                784,
                                785,
                                786,
                                787,
                                788,
                                789,
                                790,
                                791,
                                792,
                                793,
                                794,
                                795,
                                796,
                                797,
                                798,
                                799,
                                800,
                                801,
                                802,
                                803,
                                804,
                                805,
                                806,
                                807,
                                808,
                                809,
                                810,
                                811,
                                812,
                                813,
                                814,
                                815,
                                816,
                                817,
                                818,
                                819,
                                820,
                                821,
                                822,
                                823,
                                824,
                                825,
                                826,
                                827,
                                828,
                                829,
                                830,
                                831,
                                832,
                                833,
                                834,
                                835,
                                836,
                                837,
                                838,
                                839,
                                840,
                                841,
                                842,
                                843,
                                844,
                                845,
                                846,
                                847,
                                848,
                                849,
                                850,
                                851,
                                852,
                                853,
                                854,
                                855,
                                856,
                                857,
                                858,
                                859,
                                860,
                                861,
                                862,
                                863,
                                864,
                                865,
                                866,
                                867,
                                868,
                                869,
                                870,
                                871,
                                872,
                                873,
                                874,
                                875,
                                876,
                                877,
                                878,
                                879,
                                880,
                                881,
                                882,
                                883,
                                884,
                                885,
                                886,
                                887,
                                888,
                                889,
                                890,
                                891,
                                892,
                                893,
                                894,
                                895,
                                896,
                                897,
                                898,
                                899,
                                900,
                                901,
                                902,
                                903,
                                904,
                                905,
                                906,
                                907,
                                908,
                                909,
                                910,
                                911,
                                912,
                                913,
                                914,
                                915,
                                916,
                                917,
                                918,
                                919,
                                920,
                                921,
                                922,
                                923,
                                924,
                                925,
                                926,
                                927,
                                928,
                                929,
                                930,
                                931,
                                932,
                                933,
                                934,
                                935,
                                936,
                                937,
                                938,
                                939,
                                940,
                                941,
                                942,
                                943,
                                944,
                                945,
                                946,
                                947,
                                948,
                                949,
                                950,
                                951,
                                952,
                                953,
                                954,
                                955,
                                956,
                                957,
                                958,
                                959,
                                960,
                                961,
                                962,
                                963,
                                964,
                                965,
                                966,
                                967,
                                968,
                                969,
                                970,
                                971,
                                972,
                                973,
                                974,
                                975,
                                976,
                                977,
                                978,
                                979,
                                980,
                                981,
                                982,
                                983,
                                984,
                                985,
                                986,
                                987,
                                988,
                                989,
                                990,
                                991,
                                992,
                                993,
                                994,
                                995,
                                996,
                                997,
                                998,
                                999
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "randn_153": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fftpack.dct(x.numpy(), norm='ortho')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_161": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fftpack.idct(x.numpy(), norm='ortho')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_170": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_192": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape + event_shape + event_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_195": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "precision.inverse()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Uniform_79": {
                "variable": {
                    "value": "min_period",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "max_period",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.distributions.Uniform(2, duration).sample().item()",
                            "Call"
                        ],
                        [
                            "[max_period, duration]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_148": {
                "variable": {
                    "value": "serial_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "serial_result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "M",
                            "Name"
                        ],
                        [
                            "torch.matmul(serial_result, M)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(size)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_129": {
                "data": {
                    "value": "np.convolve(s, k, mode=mode)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/ops/test_welford.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_18": {
                "variable": {
                    "value": "cov_diagonal",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "diag_19": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov_diagonal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(dim_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_20": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(cov_diagonal)",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_27": {
                "variable": {
                    "value": "sample_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dist.sample(torch.Size([n_samples]))",
                            "Call"
                        ],
                        [
                            "dist.sample(sample_shape=torch.Size([n_samples]))",
                            "Call"
                        ]
                    ]
                }
            },
            "var_27": {
                "variable": {
                    "value": "sample_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_39": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(cov_diagonal)",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cov.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_40": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(cov_diagonal)",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_59": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_60": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(cov_diagonal)",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cov.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_61": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ],
                        [
                            "torch.zeros(dim_size)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(cov_diagonal)",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ],
                        [
                            "torch.randn(dim_size, dim_size)",
                            "Call"
                        ],
                        [
                            "torch.mm(cov, cov.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "actual",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[top, torch.cat([top[:, head_size:].t(), bottom_diag.diag()], -1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_71": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.cov(samples.cpu().numpy(), bias=False, rowvar=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(expected).type_as(mask)",
                            "Call"
                        ],
                        [
                            "(expected * n_samples + 0.001 * torch.eye(dim_size) * 5) / (n_samples + 5)",
                            "BinOp"
                        ],
                        [
                            "expected * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "[top[:, head_size:].t(), bottom_diag.diag()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_77": {
                "n": {
                    "value": "dim_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/optim/test_multi.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.09], [0.09, 0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/optim/test_optim.py": {
        "torch": {
            "tensor_182": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_205": {
                "variable": {
                    "value": "opt_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x2]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_223": {
                "variable": {
                    "value": "opt_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[x2]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_284": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_285": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "self.loc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[6.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_85": {
                "variable": {
                    "value": "free_param_unchanged",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pyro.param(free_param).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_86": {
                "variable": {
                    "value": "fixed_param_unchanged",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pyro.param(fixed_param).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_50": {
                "variable": {
                    "value": "sig_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sig_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('log_sig_q', torch.zeros(1, requires_grad=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "clip_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_377": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_41": {
                "input": {
                    "value": "self.lam0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_43": {
                "input": {
                    "value": "self.lam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_290": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_380": {
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_260": {
                "*size": {
                    "value": "outer_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "middle_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inner_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "event_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/params/test_module.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "sequential",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 20, 5)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_94": {
                "input": {
                    "value": "torch.ones(2, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "parameter.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/params/test_param.py": {
        "torch": {
            "zeros_104": {
                "variable": {
                    "value": "param_store[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_155": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_156": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_156": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_157": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_158": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_158": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_159": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_159": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_160": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.linear_module2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.linear_module3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_33": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(self.linear_module.parameters()) + [myparam]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_117": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_127": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_140": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "torch.pow(lin(x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_30": {
                "input": {
                    "value": "lin(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_113": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/perf/test_benchmark.py": {
        "torch": {
            "tensor_65": {
                "variable": {
                    "value": "alpha0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "beta0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 2.0, 3.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_72": {
                "variable": {
                    "value": "log_alpha_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha0 + data_sum",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_73": {
                "variable": {
                    "value": "log_beta_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta_n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beta0 + torch.tensor(float(n_data))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "true_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_124": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cholesky_126": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(-0.5 * (X - X.t()).pow(2) / 0.01).exp() + torch.eye(100) * 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(100, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gpmodule.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "float(n_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_126": {
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "beta_q_log",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pyro.param('beta_q_log', log_beta_n - 0.143)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "data": {
                    "value": "[1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "[1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_125": {
                "n": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/poutine/test_counterfactual.py": {
        "torch": {
            "tensor_93": {
                "variable": {
                    "value": "fix_z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-6.1258, -6.1524], [-4.1513, -4.308]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "obs_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-6.1258, -6.1524], [-4.1513, -4.308]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_86": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_89": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_91": {
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/poutine/test_mapdata.py": {
        "torch": {
            "zeros_45": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_140": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_147": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_18": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_20": {
                "input": {
                    "value": "torch.randn(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/poutine/test_poutines.py": {
        "torch": {
            "load_941": {
                "variable": {
                    "value": "deserialized",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_942": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_317": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_386": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_861": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_862": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_863": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_921": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_939": {
                "obj": {
                    "value": "wrapped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "wrapper(_model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "buffer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                },
                "pickle_protocol": {
                    "value": "pickle.HIGHEST_PROTOCOL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_28": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_243": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "flat_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_330": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "flat_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "flat_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_336": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "flat_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "flat_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_354": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_355": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tensor.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_474": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_475": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_476": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_650": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_651": {
                "variable": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_652": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_762": {
                "data": {
                    "value": "[0.5, 0.25, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_895": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_905": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_915": {
                "data": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_580": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_601": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_602": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_611": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_612": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_633": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_634": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_642": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_803": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_826": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_838": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_923": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_959": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_39": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_48": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "[[0.8], [0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "data": {
                    "value": "[[-0.1], [0.9]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_245": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_359": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_360": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_363": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_364": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_639": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_706": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_828": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_830": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_840": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_842": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_961": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_963": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_526": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_526": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_708": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_710": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_877": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_883": {
                "data": {
                    "value": "[0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_260": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_524": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_532": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/poutine/test_properties.py": {
        "torch": {
            "ones_86": {
                "variable": {
                    "value": "normal_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_106": {
                "variable": {
                    "value": "normal_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_107": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_100": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_101": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/poutine/test_runtime.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[False, True, True]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True, True, False]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_examples.py": {
        "torch": {
            "device_count_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_primitives.py": {
        "torch": {
            "tensor_25": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_util.py": {
        "torch": {
            "ones_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_97": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tutorial/source/search_inference.py": {
        "torch": {
            "stack_81": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(logits.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self._dist_and_values()[1].values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(self._dist_and_values()[1].values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_130": {
                "variable": {
                    "value": "deviation_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples - self.mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_93": {
                "obj": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logit)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_66": {
                "obj": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tr.nodes[self.sites]['value']",
                            "Subscript"
                        ],
                        [
                            "{site: tr.nodes[site]['value'] for site in self.sites}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "tensor_99": {
                "data": {
                    "value": "[list(values_map.keys()).index(value_hash)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_63": {
                "obj": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(logit)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[logits[value_hash], logit]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_218": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_194": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}