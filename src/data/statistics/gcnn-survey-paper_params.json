{
    "utils/link_prediction_utils.py": {
        "sklearn": {
            "roc_auc_score_91": {
                "variable": {
                    "value": "roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(true_adj[edges]).reshape((-1,))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(pred_adj[edges]).reshape((-1,))",
                            "Call"
                        ],
                        [
                            "self.adj_matrix.dot(self.adj_matrix)",
                            "Call"
                        ],
                        [
                            "nx.adamic_adar_index(graph)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_92": {
                "variable": {
                    "value": "ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(true_adj[edges]).reshape((-1,))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(pred_adj[edges]).reshape((-1,))",
                            "Call"
                        ],
                        [
                            "self.adj_matrix.dot(self.adj_matrix)",
                            "Call"
                        ],
                        [
                            "nx.adamic_adar_index(graph)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "best_model.py": {
        "tensorflow": {
            "IsDirectory_54": {
                "dirname": {
                    "value": "dir_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.dir, dataset, prop)",
                            "Call"
                        ]
                    ]
                }
            },
            "ListDirectory_56": {
                "dirname": {
                    "value": "dir_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.dir, dataset, prop)",
                            "Call"
                        ]
                    ]
                }
            },
            "ListDirectory_60": {
                "dirname": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(dir_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/base_models.py": {
        "tensorflow": {
            "AdamOptimizer_61": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_77": {
                "variable": {
                    "value": "all_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_79": {
                "variable": {
                    "value": "node_l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in all_variables if all([var_name not in v.name for var_name in non_reg])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "variable": {
                    "value": "all_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_89": {
                "variable": {
                    "value": "edge_l2_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in all_variables if 'edge-model' in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "greater_99": {
                "variable": {
                    "value": "boolean_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(1 - adj_true, keep_prob=keep_prob) * keep_prob",
                            "BinOp"
                        ],
                        [
                            "loss_mask + adj_true",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "boolean_mask_100": {
                "variable": {
                    "value": "masked_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "boolean_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(loss_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.greater(self.placeholders['node_mask'], 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_101": {
                "variable": {
                    "value": "masked_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "adj_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "boolean_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(loss_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.greater(self.placeholders['node_mask'], 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_102": {
                "variable": {
                    "value": "edge_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(adj_true, boolean_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(self.placeholders['node_labels'], boolean_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather_nd(self.placeholders['adj_true'], self.placeholders['edge_mask'].indices), (-1,))",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "masked_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(adj_pred, boolean_mask)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(logits, boolean_mask)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.gather_nd(adj_pred, self.placeholders['edge_mask'].indices), (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_111": {
                "variable": {
                    "value": "edge_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "adj_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "float(self.nb_nodes ** 2 - self.nb_edges) / self.nb_edges",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_177": {
                "variable": {
                    "value": "boolean_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.placeholders['node_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "boolean_mask_178": {
                "variable": {
                    "value": "masked_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "boolean_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(loss_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.greater(self.placeholders['node_mask'], 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_179": {
                "variable": {
                    "value": "masked_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.placeholders['node_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "boolean_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(loss_mask, 0.0)",
                            "Call"
                        ],
                        [
                            "tf.greater(self.placeholders['node_mask'], 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "adj_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.placeholders['adj_train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "masked_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(self.placeholders['adj_true'], self.placeholders['edge_mask'].indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "masked_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(adj_pred, self.placeholders['edge_mask'].indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_357": {
                "variable": {
                    "value": "adj_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.placeholders['adj_train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "greater_358": {
                "variable": {
                    "value": "boolean_node_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.placeholders['node_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "boolean_mask_359": {
                "variable": {
                    "value": "masked_node_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "boolean_node_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(self.placeholders['node_mask'], 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_360": {
                "variable": {
                    "value": "masked_node_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.placeholders['node_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "boolean_node_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.greater(self.placeholders['node_mask'], 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_368": {
                "variable": {
                    "value": "self.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "self._compute_node_loss(masked_pred, masked_true)",
                            "Call"
                        ],
                        [
                            "loss + self.edge_l2_reg * self._compute_edge_l2_loss()",
                            "BinOp"
                        ],
                        [
                            "self._compute_edge_loss(tf.reshape(adj_pred, (-1,)), adj_train)",
                            "Call"
                        ],
                        [
                            "self._compute_node_loss(masked_node_pred, masked_node_true)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.adj_matrix_pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_370": {
                "variable": {
                    "value": "masked_adj_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(self.placeholders['adj_true'], self.placeholders['edge_mask'].indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_373": {
                "variable": {
                    "value": "masked_adj_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(adj_pred, self.placeholders['edge_mask'].indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_71": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_73": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "self._compute_node_loss(masked_pred, masked_true)",
                            "Call"
                        ],
                        [
                            "loss + self.edge_l2_reg * self._compute_edge_l2_loss()",
                            "BinOp"
                        ],
                        [
                            "self._compute_edge_loss(tf.reshape(adj_pred, (-1,)), adj_train)",
                            "Call"
                        ],
                        [
                            "self._compute_node_loss(masked_node_pred, masked_node_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_106": {
                "input_tensor": {
                    "value": "edge_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=masked_true, logits=masked_pred)",
                            "Call"
                        ],
                        [
                            "tf.nn.weighted_cross_entropy_with_logits(targets=adj_true, logits=adj_pred, pos_weight=pos_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "edge_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=masked_true, logits=masked_pred)",
                            "Call"
                        ],
                        [
                            "tf.nn.weighted_cross_entropy_with_logits(targets=adj_true, logits=adj_pred, pos_weight=pos_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_278": {
                "variable": {
                    "value": "(metrics[edge_roc_auc], roc_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "adj_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.sigmoid(adj_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "curve": {
                    "value": "ROC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "auc_283": {
                "variable": {
                    "value": "(metrics[edge_pr_auc], pr_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "adj_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.sigmoid(adj_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "auc_383": {
                "variable": {
                    "value": "(metrics[edge_roc_auc], roc_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "adj_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.sigmoid(adj_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "curve": {
                    "value": "ROC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "auc_388": {
                "variable": {
                    "value": "(metrics[edge_pr_auc], pr_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "adj_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.sigmoid(adj_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_393": {
                "variable": {
                    "value": "(metrics[node_acc], acc_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(node_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(node_pred, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_96": {
                "x": {
                    "value": "1 - adj_true",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nb_edges / (self.nb_nodes ** 2 - self.nb_edges)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_141": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_placeholder_155": {
                "variable": {
                    "value": "self.placeholders[features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "self.placeholders[features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_193": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(tf.nn.sigmoid(logits), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "recall_195": {
                "variable": {
                    "value": "(metrics[recall], rec_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "node_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.nn.sigmoid(logits), 0.5), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_197": {
                "variable": {
                    "value": "(metrics[precision], prec_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "node_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(tf.nn.sigmoid(logits), 0.5), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_204": {
                "variable": {
                    "value": "(metrics[node_acc], acc_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(node_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_227": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_placeholder_239": {
                "variable": {
                    "value": "self.placeholders[features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "self.placeholders[features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "tensor": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_nd_266": {
                "params": {
                    "value": "self.placeholders['adj_true']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.placeholders['edge_mask'].indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_269": {
                "params": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.placeholders['edge_mask'].indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_276": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_313": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_placeholder_331": {
                "variable": {
                    "value": "self.placeholders[features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_333": {
                "variable": {
                    "value": "self.placeholders[features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_370": {
                "params": {
                    "value": "self.placeholders['adj_true']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.placeholders['edge_mask'].indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_373": {
                "params": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.placeholders['edge_mask'].indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_381": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_80": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_loss_89": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sparse_placeholder_144": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_hidden[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_230": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_232": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_234": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_235": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_236": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_315": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_317": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_319": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_320": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_322": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_hidden_node[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_324": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_328": {
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_366": {
                "tensor": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "greater_194": {
                "x": {
                    "value": "tf.nn.sigmoid(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_280": {
                "x": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_285": {
                "x": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_385": {
                "x": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_390": {
                "x": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train_norm'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_394": {
                "input": {
                    "value": "node_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_395": {
                "input": {
                    "value": "node_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_194": {
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_205": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_inference(self.placeholders['features'], self.placeholders['adj_train'], self.placeholders['is_training'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/edge_models.py": {
        "tensorflow": {
            "sigmoid_45": {
                "variable": {
                    "value": "self.adj_matrix_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "adj_matrix_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "self.adj_matrix_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "adj_matrix_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "self.adj_matrix_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "adj_matrix_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_140": {
                "variable": {
                    "value": "self.adj_matrix_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "adj_matrix_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(h0, self.att_mechanism, self.p_drop, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_99": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add(z_mean, noise)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : z_mean",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "edge-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "edge-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "edge-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "1 + 2 * self.z_log_std - tf.square(self.z_mean) - tf.square(tf.exp(self.z_log_std))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "kl_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(1 + 2 * self.z_log_std - tf.square(self.z_mean) - tf.square(tf.exp(self.z_log_std)), 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "edge-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "std",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_98": {
                "x": {
                    "value": "z_log_std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gcn_module(h0, adj_matrix, self.n_hidden[-1:], self.p_drop, is_training, self.n_hidden[-2], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_99": {
                "x": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gcn_module(h0, adj_matrix, self.n_hidden[-1:], self.p_drop, is_training, self.n_hidden[-2], False)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal([self.nb_nodes, self.n_hidden[-1]]) * tf.exp(z_log_std)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_112": {
                "x": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_113": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/node_edge_models.py": {
        "tensorflow": {
            "SparseTensor_219": {
                "variable": {
                    "value": "sp_adj_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "sp_adj_matrix.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(sp_adj_matrix.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "sp_adj_matrix.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_224": {
                "variable": {
                    "value": "sp_adj_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "sp_adj_att.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.nn.leaky_relu(sp_adj_att.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "sp_adj_att.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_concat_152": {
                "variable": {
                    "value": "z_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sp_inputs": {
                    "value": "[tf.contrib.layers.dense_to_sparse(z_latent), node_features_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseTensor_159": {
                "variable": {
                    "value": "sp_adj_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "sp_adj_matrix.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(sp_adj_matrix.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "sp_adj_matrix.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_concat_188": {
                "variable": {
                    "value": "z_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sp_inputs": {
                    "value": "[tf.contrib.layers.dense_to_sparse(z_latent), node_features_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "x": {
                    "value": "adj_matrix_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_model.compute_inference(node_features_in, sp_adj_matrix, is_training)",
                            "Call"
                        ],
                        [
                            "self.edge_model.compute_inference(node_features_in, sp_adj_matrix, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z_latent, self.att_mechanism, self.p_drop_edge, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z_latent, self.att_mechanism, self.p_drop_edge, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z_latent, self.att_mechanism, self.p_drop_edge, is_training)",
                            "Call"
                        ],
                        [
                            "self.edge_model.compute_inference(node_features_in, sp_adj_matrix, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_77": {
                "x": {
                    "value": "adj_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_sp_topk(adj_matrix_pred, sp_adj_matrix, self.nb_nodes, self.topk)",
                            "Call"
                        ],
                        [
                            "get_sp_topk(adj_matrix_pred, sp_adj_matrix, self.nb_nodes, self.topk)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.nn.leaky_relu(adj_matrix_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "edge-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "node-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_concat_108": {
                "variable": {
                    "value": "z_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sp_inputs": {
                    "value": "[tf.contrib.layers.dense_to_sparse(z_latent), node_features_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "edge-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "node-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "edge-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "node-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_77": {
                "features": {
                    "value": "adj_matrix_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.edge_model.compute_inference(node_features_in, sp_adj_matrix, is_training)",
                            "Call"
                        ],
                        [
                            "self.edge_model.compute_inference(node_features_in, sp_adj_matrix, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z_latent, self.att_mechanism, self.p_drop_edge, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z_latent, self.att_mechanism, self.p_drop_edge, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj(z_latent, self.att_mechanism, self.p_drop_edge, is_training)",
                            "Call"
                        ],
                        [
                            "self.edge_model.compute_inference(node_features_in, sp_adj_matrix, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_221": {
                "input": {
                    "value": "sp_adj_matrix.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_226": {
                "features": {
                    "value": "sp_adj_att.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_161": {
                "input": {
                    "value": "sp_adj_matrix.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/node_models.py": {
        "tensorflow": {
            "reduce_mean_106": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_to_dense_169": {
                "variable": {
                    "value": "adj_matrix_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "adj_matrix.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "adj_matrix.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "adj_matrix.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "validate_indices": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_174": {
                "variable": {
                    "value": "adj_matrix_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(adj_matrix_dense, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "variable": {
                    "value": "adj_matrix_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_matrix_dense",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse_to_dense(sparse_indices=adj_matrix.indices, output_shape=adj_matrix.dense_shape, sparse_values=adj_matrix.values, validate_indices=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(adj_matrix_dense, 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(adj_matrix_dense, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_98": {
                "variable": {
                    "value": "self.l2_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "l2_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_adj(hidden_repr_reg, self.att_mechanism, self.p_drop, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "adj_matrix.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_to_dense_122": {
                "variable": {
                    "value": "dense_normalized_laplacian",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_indices": {
                    "value": "normalized_laplacian.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "normalized_laplacian.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse_values": {
                    "value": "normalized_laplacian.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "node-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "node-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "node-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "node-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "node-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "elu_154": {
                "features": {
                    "value": "tf.concat(att[:2], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_155": {
                "features": {
                    "value": "tf.concat(att[2:], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_162": {
                "inputs": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_174": {
                "x": {
                    "value": "adj_matrix_dense",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sparse_to_dense(sparse_indices=adj_matrix.indices, output_shape=adj_matrix.dense_shape, sparse_values=adj_matrix.values, validate_indices=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(adj_matrix_dense, 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(adj_matrix_dense, -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gcn_pool_layer(node_features, adj_matrix_dense, in_dim=in_dim, out_dim=out_dim, sparse=sparse, is_training=is_training, p_drop=self.p_drop)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_features, (-1, out_dim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(node_features)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bias_add_191": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gcn_pool_layer(node_features, adj_matrix_dense, in_dim=in_dim, out_dim=out_dim, sparse=sparse, is_training=is_training, p_drop=self.p_drop)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_features, (-1, out_dim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(node_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_192": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gcn_pool_layer(node_features, adj_matrix_dense, in_dim=in_dim, out_dim=out_dim, sparse=sparse, is_training=is_training, p_drop=self.p_drop)",
                            "Call"
                        ],
                        [
                            "tf.reshape(node_features, (-1, out_dim))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(node_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "gcn-layer-last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_126": {
                "num_rows": {
                    "value": "self.nb_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "'gat-layer1-att{}'.format(j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_154": {
                "values": {
                    "value": "att[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_155": {
                "values": {
                    "value": "att[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "'gat-layer2-att{}'.format(j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "'gcn-pool-{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/gcn/gcn/inits.py": {
        "tensorflow": {
            "zeros_20": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_26": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_8": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_15": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_21": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/gcn/gcn/layers.py": {
        "tensorflow": {
            "cast_25": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_n_182": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "supports",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_25": {
                "x": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_170": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_82": {
                "name": {
                    "value": "self.name + '/vars/' + var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_74": {
                "name": {
                    "value": "self.name + '/inputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_77": {
                "name": {
                    "value": "self.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._call(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/gcn/gcn/metrics.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_6": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_7": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_15": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(preds, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_16": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(preds, 1), tf.argmax(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_17": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_8": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_10": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_18": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_20": {
                "input_tensor": {
                    "value": "accuracy_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "accuracy_all * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_15": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/gcn/gcn/train.py": {
        "tensorflow": {
            "Session_62": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            },
            "sparse_placeholder_51": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.constant(features[2], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, y_train.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_54": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_50": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_51": {
                "value": {
                    "value": "features[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "FileWriter_223": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "filename_suffix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get_filename_suffix(FLAGS.run_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_225": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_236": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_232": {
                "name": {
                    "value": "'{}-summary'.format(split)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_233": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "local_variables_initializer_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MakeDirs_385": {
                "dirname": {
                    "value": "save_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_235": {
                "name": {
                    "value": "metric",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metrics",
                            "Name"
                        ],
                        [
                            "self.target_metrics",
                            "Attribute"
                        ]
                    ]
                },
                "data": {
                    "value": "metrics[metric]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "checkpoint_exists_312": {
                "checkpoint_prefix": {
                    "value": "model_checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/data_utils.py": {
        "tensorflow": {}
    },
    "utils/model_utils.py": {
        "tensorflow": {
            "zeros_initializer_25": {
                "variable": {
                    "value": "BIAS_INIT",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "w_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "WEIGHT_INIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(in_dim, out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adj_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_126": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_128": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "adj_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_129": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_130": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SparseTensor_158": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "alpha.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.nn.leaky_relu(alpha.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "alpha.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_164": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bias_add_168": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_243": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "alpha.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.nn.leaky_relu(alpha.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "alpha.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_249": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bias_add_253": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_378": {
                "variable": {
                    "value": "a_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "WEIGHT_INIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "selfatt-row",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(out_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_383": {
                "variable": {
                    "value": "a_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "WEIGHT_INIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "selfatt-col",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(out_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_388": {
                "variable": {
                    "value": "alpha_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a_row",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='selfatt-row', shape=(out_dim, 1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='selfatt-row', shape=(out_dim, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_389": {
                "variable": {
                    "value": "alpha_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='selfatt-col', shape=(out_dim, 1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='selfatt-col', shape=(out_dim, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_add_391": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adj_matrix_sp * alpha_row",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "adj_matrix_sp * tf.transpose(alpha_col, perm=[1, 0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_400": {
                "variable": {
                    "value": "a_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "WEIGHT_INIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "selfatt-row",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(out_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_405": {
                "variable": {
                    "value": "a_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "WEIGHT_INIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "selfatt-col",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(out_dim, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_410": {
                "variable": {
                    "value": "alpha_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a_row",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='selfatt-row', shape=(out_dim, 1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='selfatt-row', shape=(out_dim, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_411": {
                "variable": {
                    "value": "alpha_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "a_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='selfatt-col', shape=(out_dim, 1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='selfatt-col', shape=(out_dim, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_456": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(node_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_457": {
                "variable": {
                    "value": "na",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(node_features), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_458": {
                "variable": {
                    "value": "nb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l2_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(node_features), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_460": {
                "variable": {
                    "value": "l2_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "na - 2 * tf.matmul(node_features, node_features, False, True) + nb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_467": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(node_features, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_473": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(features, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=features, rate=p_drop, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_474": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(features, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=features, rate=p_drop, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(features, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_480": {
                "variable": {
                    "value": "(feat_left, feat_right)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_481": {
                "variable": {
                    "value": "feat_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feat_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(feat_left, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_482": {
                "variable": {
                    "value": "feat_right",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feat_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(feat_right, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_483": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat_left",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(feat_left, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(feat_right, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_489": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(features, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=features, rate=p_drop, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "top_k_509": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(adj_pred, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_510": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(indices, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SparseTensor_511": {
                "variable": {
                    "value": "sp_adj_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(indices, tf.int64), (-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "tf.ones(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "(nb_nodes * nb_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SparseTensor_517": {
                "variable": {
                    "value": "sp_adj_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "sp_adj_train.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(sp_adj_train.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "sp_adj_train.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_concat_523": {
                "variable": {
                    "value": "sp_adj_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "sp_inputs": {
                    "value": "[sp_adj_pred, sp_adj_train]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_530": {
                "variable": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SparseTensor_33": {
                "indices": {
                    "value": "tensor.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.layers.dropout(inputs=tensor.values, rate=p_drop, training=is_training)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tensor.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_59": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_dense",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='linear', shape=(in_dim, out_dim))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='linear', shape=(node_features.shape[1], out_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_63": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_193": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "w_dense",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "WEIGHT_INIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(node_features.shape[1], out_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_dense",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='linear', shape=(in_dim, out_dim))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='linear', shape=(node_features.shape[1], out_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_203": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sp_compute_adj_att(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=alpha.indices, values=tf.nn.leaky_relu(alpha.values), dense_shape=alpha.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(alpha)",
                            "Call"
                        ],
                        [
                            "sparse_dropout(alpha, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj_att(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(alpha + bias_mat, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=alpha, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "sp_compute_adj_att(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=alpha.indices, values=tf.nn.leaky_relu(alpha.values), dense_shape=alpha.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(alpha)",
                            "Call"
                        ],
                        [
                            "sparse_dropout(alpha, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_add(adj_matrix_sp * alpha_row, adj_matrix_sp * tf.transpose(alpha_col, perm=[1, 0]))",
                            "Call"
                        ],
                        [
                            "alpha_row + tf.transpose(alpha_col, perm=[1, 0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "alpha + bias_mat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_210": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sp_compute_adj_att(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=alpha.indices, values=tf.nn.leaky_relu(alpha.values), dense_shape=alpha.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(alpha)",
                            "Call"
                        ],
                        [
                            "sparse_dropout(alpha, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj_att(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(alpha + bias_mat, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=alpha, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "sp_compute_adj_att(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=alpha.indices, values=tf.nn.leaky_relu(alpha.values), dense_shape=alpha.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(alpha)",
                            "Call"
                        ],
                        [
                            "sparse_dropout(alpha, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_add(adj_matrix_sp * alpha_row, adj_matrix_sp * tf.transpose(alpha_col, perm=[1, 0]))",
                            "Call"
                        ],
                        [
                            "alpha_row + tf.transpose(alpha_col, perm=[1, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_211": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_214": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sp_compute_adj_att(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=alpha.indices, values=tf.nn.leaky_relu(alpha.values), dense_shape=alpha.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(alpha)",
                            "Call"
                        ],
                        [
                            "sparse_dropout(alpha, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "compute_adj_att(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(alpha)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(alpha + bias_mat, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=alpha, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "sp_compute_adj_att(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=alpha.indices, values=tf.nn.leaky_relu(alpha.values), dense_shape=alpha.dense_shape)",
                            "Call"
                        ],
                        [
                            "tf.sparse_softmax(alpha)",
                            "Call"
                        ],
                        [
                            "sparse_dropout(alpha, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_add(adj_matrix_sp * alpha_row, adj_matrix_sp * tf.transpose(alpha_col, perm=[1, 0]))",
                            "Call"
                        ],
                        [
                            "alpha_row + tf.transpose(alpha_col, perm=[1, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_215": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_312": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_341": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_367": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_423": {
                "variable": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "WEIGHT_INIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'w-dot-{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(in_dim, in_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_n_430": {
                "inputs": {
                    "value": "adj_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_438": {
                "variable": {
                    "value": "weight_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "WEIGHT_INIT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'w-dot-{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, in_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_443": {
                "variable": {
                    "value": "weight_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "weight_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='w-dot-{}'.format(i), shape=(1, in_dim))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weight_vec, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_446": {
                "inputs": {
                    "value": "adj_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sparse_reduce_max_525": {
                "sp_input": {
                    "value": "sp_adj_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=indices, values=tf.ones(k), dense_shape=(nb_nodes * nb_nodes,))",
                            "Call"
                        ],
                        [
                            "tf.sparse_reshape(sp_adj_pred, shape=(nb_nodes, nb_nodes, 1))",
                            "Call"
                        ],
                        [
                            "tf.sparse_concat(sp_inputs=[sp_adj_pred, sp_adj_train], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "'gat-{}-{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_294": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_314": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_336": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.concat(att, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_362": {
                "variable": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.concat(att, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_413": {
                "a": {
                    "value": "alpha_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(node_features, a_col)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, a_col)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_456": {
                "x": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_467": {
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_474": {
                "a": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(features, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=features, rate=p_drop, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_483": {
                "a": {
                    "value": "feat_right",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(feat_right, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "tensor": {
                    "value": "adj_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_510": {
                "x": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(indices, tf.int64), (-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_35": {
                "inputs": {
                    "value": "tensor.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "p_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_160": {
                "features": {
                    "value": "alpha.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_245": {
                "features": {
                    "value": "alpha.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_266": {
                "name_or_scope": {
                    "value": "'mlp-{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_274": {
                "variable": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dense(hidden_layers[-1], in_dim, out_dim, p_drop, is_training, sparse_features, use_bias)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "'gcn-{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_339": {
                "inputs": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_365": {
                "inputs": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_392": {
                "a": {
                    "value": "alpha_col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(node_features, a_col)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, a_col)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_428": {
                "a": {
                    "value": "weight_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='w-dot-{}'.format(i), shape=(in_dim, in_dim))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(node_features, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_444": {
                "a": {
                    "value": "tf.multiply(weight_vec, node_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(node_features, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_513": {
                "shape": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_519": {
                "input": {
                    "value": "sp_adj_train.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "'cheb-{}-{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_329": {
                "name_or_scope": {
                    "value": "'gat-layer{}-att{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_336": {
                "values": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "'egat-layer{}-att{}'.format(i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_362": {
                "values": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_444": {
                "x": {
                    "value": "weight_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(initializer=WEIGHT_INIT, dtype=tf.float32, name='w-dot-{}'.format(i), shape=(1, in_dim))",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weight_vec, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_445": {
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_429": {
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_461": {
                "a": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "node_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dropout(node_features, p_drop, is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(adj_matrix, node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(node_features, 0)",
                            "Call"
                        ],
                        [
                            "tf.multiply(node_features, adj_matrix)",
                            "Call"
                        ],
                        [
                            "tf.transpose(node_features, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(node_features, axis=-1)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(node_features, w_dense)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "dense(node_features, in_dim, out_dim, p_drop, is_training, sparse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=node_features, rate=p_drop, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(alpha, node_features)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.bias_add(node_features)",
                            "Call"
                        ],
                        [
                            "sp_gcn_layer(node_features, adj_matrix, in_dim, out_dim, p_drop, is_training, sparse_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.add_n(feats)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(node_features)",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(tf.concat(att, axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}