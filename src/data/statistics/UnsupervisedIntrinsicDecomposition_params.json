{
    "main.py": {
        "tensorflow": {
            "reset_default_graph_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, input_size[0], input_size[1], 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "I",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_66": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_69": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_99": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "common_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "restore_map_vars(pretrained_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_73": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "model_checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "net_model.py": {
        "tensorflow": {
            "conv2d_72": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "skip_encoder_level(nbr_levels, input_img)",
                            "Call"
                        ],
                        [
                            "inception_block('down_' + str(lid), input_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(level_input, (3, 3), (2, 2), name='down_maxpool_' + str(lid))",
                            "Call"
                        ],
                        [
                            "skip_encoder_level(lid - 1, layer)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(layer, shape)",
                            "Call"
                        ],
                        [
                            "tf.concat((layer, level_input), axis=3)",
                            "Call"
                        ],
                        [
                            "inception_block('up_' + str(lid), layer)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "S",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_75": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(layer, 3, (1, 1), name='S', padding='same')",
                            "Call"
                        ],
                        [
                            "input_img[:, :, :, 0:3] / S",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_78": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(layer, 3, (1, 1), name='S', padding='same')",
                            "Call"
                        ],
                        [
                            "input_img[:, :, :, 0:3] / S",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_25": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_branch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1x1_pre",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "branch[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "(branch[1], branch[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv' + name + '_' + str(bid)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_26": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_branch, branch[2], (branch[1], branch[1]), name='conv' + name + '_' + str(bid), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, training=is_training, name='conv' + name + '_bn' + str(bid))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(conv, name='conv' + name + '_elu_' + str(bid))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv' + name + '_bn' + str(bid)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_27": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_branch, branch[2], (branch[1], branch[1]), name='conv' + name + '_' + str(bid), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, training=is_training, name='conv' + name + '_bn' + str(bid))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(conv, name='conv' + name + '_elu_' + str(bid))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'conv' + name + '_elu_' + str(bid)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_50": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "level_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer",
                            "Name"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'down_maxpool_' + str(lid)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(layer, level_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "AS_divtrick",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_16": {
                "name": {
                    "value": "'branch' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "conv1x1_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_branch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1x1_pre",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "branch[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1x1_pre' + name + '_' + str(bid)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_20": {
                "variable": {
                    "value": "conv1x1_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1x1_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_branch, branch[0], (1, 1), name='conv1x1_pre' + name + '_' + str(bid), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1x1_pre, training=is_training, name='conv1x1_pre' + name + '_bn' + str(bid))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(conv1x1_pre, name='conv1x1_pre' + name + '_elu_' + str(bid))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1x1_pre' + name + '_bn' + str(bid)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_21": {
                "variable": {
                    "value": "conv1x1_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1x1_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_branch, branch[0], (1, 1), name='conv1x1_pre' + name + '_' + str(bid), padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1x1_pre, training=is_training, name='conv1x1_pre' + name + '_bn' + str(bid))",
                            "Call"
                        ],
                        [
                            "tf.nn.elu(conv1x1_pre, name='conv1x1_pre' + name + '_elu_' + str(bid))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'conv1x1_pre' + name + '_elu_' + str(bid)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_33": {
                "name": {
                    "value": "'inception_' + str(lid)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_38": {
                "values": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "level_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer",
                            "Name"
                        ]
                    ]
                }
            }
        }
    }
}